[["index.html", "Análises Ecológicas no R Capa", " Análises Ecológicas no R 2021-12-02 Capa "],["prefácio.html", "Prefácio", " Prefácio "],["cap2.html", "Capítulo 1 Introdução 1.1 Histórico deste livro 1.2 Objetivo deste livro 1.3 O que você não encontrará neste livro 1.4 Por que usar o R? 1.5 Indo além da linguagem de progração para a Ecologia 1.6 Como usar este livro", " Capítulo 1 Introdução 1.1 Histórico deste livro Este livro foi estruturado a partir da apostila elaborada pelos pesquisadores Diogo B. Provete, Fernando R. da Silva e Thiago Gonçalves-Souza para ministrar o curso Estatística aplicada à ecologia usando o R no PPG em Biologia Animal da UNESP de São José Rio Preto/SP, em abril de 2011. Os três pesquisadores eram então alunos do PPG em Biologia Animal quando elaboraram o material disponibilizado na apostila. A proposta de transformar a apostila em livro sempre foi um tópico recorrente desde 2011, e concretizado agora, 10 anos depois. Neste período, Diogo, Fernando e Thiago foram contratados pela Universidade Federal de Mato Grosso do Sul, Universidade Federal de São Carlos campus Sorocaba, e Universidade Federal Rural de Pernambuco, respectivamente. Nestes anos eles ofertaram diferentes versões do curso Estatística aplicada à ecologia usando o R para alunos de graduação e pós-graduação em diferentes instituições do Brasil. A possibilidade da oferta destes novos cursos fortaleceu a ideia de trasformar a apostila em um livro com base nas experiências dos pesquisadores em sala de aula. Considerando que novas abordagens ecológicas vêm sendo descritas e criadas a uma taxa elevada nos últimos anos, era de se esperar que as informações disponíveis na apostila estivessem defasadas após 10 anos. Por este motivo, Diogo, Fernando e Thiago convidaram outros dois pesquisadores, Gustavo B. Paterno da Georg-August-University of Göttingen e Maurício H. Vancine do PPG em Ecologia, Evolução e Biodiversidade da UNESP Câmpus de Rio Claro, que são referências no uso de estatística em ecologia usando o R. Com o time completo, passaram mais de um ano realizando reuniões, compartilhando scripts e pagando cerveja para os coautores por capítulos atrasados até chegarem neste primeira versão do livro. 1.2 Objetivo deste livro Nossa proposta com este livro é de traçar o melhor caminho (pelo menos do nosso ponto de vista) entre questões ecológicas e os métodos estatísticos mais robustos para testá-las. Guiar seus passos nesse caminho (nem sempre linear) necessita que você utilize um requisito básico: o de utilizar seu esforço para caminhar. O nosso esforço, em contrapartida, será o de indicar as melhores direções para que você adquira certa independência em análises ecológicas. Um dos nossos objetivos é mostrar que o conhecimento de teorias ecológicas e a utilização de questões apropriadas são o primeiro passo na caminhada rumo à compreensão da lógica estatística. Não deixe que a estatística se torne a “pedra no seu caminho.” Em nossa opinião, programas com ambiente de programação favorecem o entendimento da lógica estatística, uma vez que cada passo (lembre-se de que você está caminhado em uma estrada desconhecida e cheia de pedras) precisa ser coordenado, ou seja, as linhas de comando (detalhes abaixo) precisam ser compreendidas para que você teste suas hipóteses. A primeira parte deste livro pretende utilizar uma estratégia que facilita a escolha do teste estatístico apropriado, por meio da seleção de questões/hipóteses claras e da ligação dessas hipóteses com a teoria e o método (veja Figura 3.1 no Capítulo 3). Enfatizamos que é fundamental ter em mente aonde se quer chegar, para poder escolher o que deve ser feito. Posteriormente à escolha de suas questões, é necessário transferir o contexto ecológico para um contexto meramente estatístico (hipótese nula/alternativa). A partir da definição de uma hipótese nula, partiremos para a aplicação de cada teste estatístico (de modelos lineares generalizados à análises multivariadas) utilizando a linguagem R. Antes de detalhar cada análise estatística, apresentaremos os comandos básicos para a utilização da linguagem R e os tipos de distribuição estatística que são essenciais para a compreensão dos testes estatísticos. Para isso, organizamos um esquema que chamamos de “estrutura lógica” que facilita a compreensão dos passos necessários para testar suas hipóteses (veja Figura 3.2 no Capítulo 3). 1.3 O que você não encontrará neste livro Aprofundamento teórico, detalhes matemáticos, e explicação dos algoritmos são informações que infelizmente não serão abordadas neste livro. O foco aqui é a explicação de como cada teste funciona (teoria e procedimentos matemáticos básicos) e sua aplicação em testes ecológicos usando scripts na linguagem R. Para tanto, o livro de Pierre e Louis Legendre (P. Legendre and Legendre 2012b) é uma leitura que permite o aprofundamento de cada uma das análises multivariadas propostas aqui. Além disso, são de fundamental importância para o amadurecimento em análises ecológicas as seguintes leituras: Manly (1991), Pinheiro and Bates (2000b), Scheiner and Gurevitch (2001), Burnham and Anderson (2014a), Quinn and Keough (2002), Venables and Ripley (2002), Magurran and McGill (2011), N. J. Gotelli and Ellison (2013), Zar (2010), Zuur, Ieno, and Elphick (2009a), Crawley (2012) e James et al. (2013). 1.4 Por que usar o R? Os criadores do R o chamam de uma linguagem e ambiente de programação estatística e gráfica (Venables and Ripley 2002). A linguagem R também é chamada de programação “orientada ao objeto” (object oriented programming), o que significa que utilizar o R envolve basicamente a criação e manipulação de objetos em uma tela branca, em que o usuário tem de dizer exatamente o que deseja que o programa execute, ao invés de simplesmente clicar em botões. E vem daí uma das grandes vantagens em se usar o R: o usuário tem total controle sobre o que está acontecendo e também tem de compreender o que deseja antes de executar uma análise. Além disso, o R permite integração com outros programas escritos em C++, Python e Java, permitindo que os usuários possam aplicar novas metodologias sem ter que aprender novas linguagens. Na página pessoal do Prof. Nicolas J. Gotelli (link), existem vários conselhos para um estudante iniciante de ecologia. Dentre esses conselhos, o Prof. Gotelli menciona que o domínio de uma linguagem de programação é uma das habilidades mais importantes, porque dá liberdade ao ecólogo para executar tarefas que vão além daquelas disponíveis em pacotes estatísticos comerciais. Além disso, a maioria das novas análises propostas nos mais reconhecidos periódicos em ecologia normalmente são implementadas em linguagem R, e os autores incluem normalmente o código fonte no material suplementar dos artigos, tornando a análise acessível. A partir do momento que essas análises ficam disponíveis (seja por código fornecido pelo autor ou por implementação em pacotes pré-existentes), é mais simples entendermos a lógica de análises complexas, especialmente as multivariadas, utilizando nossos próprios dados, realizando-as passo a passo. Sem a utilização do R, normalmente temos que contatar os autores que nem sempre são tão acessíveis. Uma última vantagem é que por ser um software livre, a citação do R em artigos é permitida e até aconselhável. Para saber como citar o R, digite citation() na linha de comando. Para citar um pacote específico, digite citation() com o nome do pacote entre aspas dentro dos parênteses. Neste ponto, esperamos ter convencido você leitor, de que aprender a utilizar o R tem inúmeras vantagens. Entretanto, provavelmente vai ser difícil no começo, mas continue e perceberá que o investimento vai valer à pena no futuro. 1.5 Indo além da linguagem de progração para a Ecologia Um ponto em comum em que todos os autores deste livro concordaram em conversas durante sua estruturação, foi a dificuldade que todos tivemos quando estávamos aprendendo a linguagem: Como transcrever os objetivos (manipulação de dados, análises e gráficos) em linguagem R Como interpretar os resultados das análises estatísticas do R para os objetivos ecológicos Num primeiro momento, quando estamos aprendendo a linguagem R é muito desafiador pensar em como estruturar nossos códigos para que eles façam o que precisamos: importar dados, selecionar linhas ou colunas, qual pacote ou função usar para uma certa análise ou como fazer um gráfico que nas nossas anotações são simples, mas no código parece impossível. Bem, não há um caminho fácil nesse sentido e ele depende muito da experiência e familiaridade adquirida com o tempo de uso da linguagem, assim como outra língua qualquer, como inglês ou espanhol. Entretanto, uma dica pode ajudar: estruture seus códigos antes de partir para o R. Num papel escreva os pontos que quer que seus códigos façam, como se estivesse explicando para alguém os passos que precisa para realizar as tarefas. Depois disso, transcreva para o script (iremos explicar esse conceito no @[cap4]) esse texto. Por fim, traduza isso em linguam R. Pode parecer massante e cansativo no começo, mas isso o ajudará a ter maior domínio da linguagem, sendo que esse passo se torna desnecessário quando se adquire bastante experiência. Uma vez transposta esse barreira inicial e temos os resultados de nossas análises (valores de estatísticas, parâmetros estimados, valores de p e R², etc.), com gráficos e outras figuras que precisamos, como interpretamos à luz da teoria ecológica? Esse ponto é talvez um dos mais complicados. Com o tempo, ter um valor final de uma estatística ou gráfico à partir da linaguagem R é relativamente simples, mas o que esse valor ou gráfico significam para nossa hipótese ecológica é o ponto mais complicado. Essa dificuldade por ser por inexperiência teórica (ainda não lemos muito sobre um aspecto ecológico) ou inexperiência científica (ainda temos dificuldade para expandir nossos argumentos de forma indutiva). Destacamos esse ponto porque ele é fundamental no processo científico e talvez seja o principal aspecto que diferencia os cientistas de outros profissionais: sua capacidade de entendimento dos padrões à partir dos processos e mecanismos atrelados. Nesse ponto, quase sempre recorremos à nossos orientadores ou colegas mais experientes para nos ajudar, mas é natural e faz parte do processo de aprendizado de uso da linguagem R junto à Ecologia como ciência. Entretanto, contrapomos a importância dessa extrapolação para não nos tornarmos apenas especialistas em linguagem R sem a fundamental capacidade de entendimento do sistema ecológico que estamos estudando. 1.6 Como usar este livro Os conteúdos apresentados em cada capítulo são independentes entre si. Portanto, você pode utilizar este livro de duas formas. A primeira é seguir uma ordem sequencial (capítulos 1, 2, 3, …) que recomendamos, principalmente, para as pessoas que não possuem familiaridade com a linguagem R. A segunda forma, é selecionar o capítulo que contém a análise de seu interesse e mudar de um capítulo para outro sem seguir a sequência apresentada no livro. Com exceção dos capítulos 3, 4, 5 e 15, os outros capítulos foram elaborados seguindo a mesma estrutura contendo uma descrição da análise estatística (aspecto teóricos) e exemplos relacionados com questões ecólogicas que podem ser respondidas por esta análise. Todos os exemplos são compostos por: i) uma descrição dos dados utilizados, ii) pergunta e predição do trabalho, iii) descrição das variáveis resposta(s) e preditora(s), e iv) descrição e explicação das linhas de comando do R necessárias para realização das análises. Os exemplos utilizados são baseados em dados reais que já foram publicados em artigos científicos ou são dados coletados por um dos autores deste livro. Nós recomendamos que primeiro você utilize estes exemplos para se familiarizar com as análises e a formatação das linhas e colunas das planilhas. Em seguida, utilize seus próprios dados para realizar as análises. Esta é a melhor maneira de se familiarizar com as linhas de comando do R. Muitas das métricas ou índices apresentados neste livro não foram traduzidas para o português, porque seus acrônimos são clássicos e bem estabelecidos na literatura ecológica. Nestes casos, consideramos que a tradução poderia confundir as pessoas que estão começando a se familiarizar com a literatura específica. Realçamos que não estamos abordando todas as possibilidades disponíveis, e existem muito outros pacotes e funções no R que realizam as mesmas análises. Contudo, esperamos que o conteúdo apresentado permita que os leitores adquiram independência e segurança, para que possam caminhar sozinhos na exploração de novos pacotes e funções para responderem suas perguntas biológicas e ecológicas. Referências "],["cap1.html", "Capítulo 2 Pré-requisitos 2.1 Introdução 2.2 Instalação do R 2.3 Instalação do RStudio 2.4 Versão do R 2.5 Pacotes 2.6 Dados", " Capítulo 2 Pré-requisitos 2.1 Introdução O objetivo desta seção é informar como fazer a instalação dos Programas R e RStudio, além de descrever os pacotes e dados necessários para reproduzir os exemplos do livro. 2.2 Instalação do R Para começarmos a trabalhar com o R é necessário baixá-lo na página do R Project. Então, acesse esse site e em seguida, clique no link download R. Figura 2.1: Página do R project indicando o link para download do programa Esse link o levará à página do CRAN Mirrors (Comprehensive R Archive Network). Escolha a página espelho do Brasil mais próxima de você para baixar o programa. Figura 2.2: Página do R project mostrando os espelhos distribuídos em diferentes países Escolha agora o sistema operacional do seu computador (passos adicionais existem para diferentes distribuições Linux). Figura 2.3: Página do R project indiciando os sistemas operacionais disponíveis. Selecionamos a opção do Windows. Agora clique em base para finalmente chegar à página de download com a versão mais recente do R. Figura 2.4: Página do R project indicando os passos para instalação do programa. 2.3 Instalação do RStudio O RStudio possui algumas características que o tornam popular: várias janelas de visualização, marcação e preenchimento automático do script, integração com controle de versão, dentre outras funcionalidades. Para fazer o download do RStudio, acessamos o site, e clique em download. Figura 2.5: Página inicial do R Studio indicando o local de download. Escolhemos a versão gratuita. Figura 2.6: Página do R Studio para download do programa. Escolhemos o instalador com base em nosso sistema operacional. Figura 2.7: Página do R Studio para instalação do programa. 2.4 Versão do R Todas os comandos, pacotes e análises disponibilizados no livro foram realizos no Programa R versão 4.1.1 (10-08-2021). 2.5 Pacotes Descrevemos no Capítulo 4 o que são e como instalar os pacotes para realizar as análises estatísticas no R. 📝 Importante: Criamos o pacote ecodados que contém todas as informações e dados utilizados neste livro. Assim, recomendamos que você instale e carregue este pacote no início de cada capítulo, para ter acesso aos dados necessários para executar as funções no R. Abaixo, listamos todos os pacotes que foram utilizados em alguma das análises descritas no livro. Você pode instalar os pacotes agora ou esperar para instalá-los quando ler o 4 e entender o que são as funções install.packages(), library() e install_github(). install.packages(c(&quot;ade4&quot;, &quot;adespatial&quot;, &quot;ape&quot;, &quot;bbmle&quot;, &quot;betapart&quot;, &quot;BiodiversityR&quot;, &quot;car&quot;, &quot;cati&quot;, &quot;datasauRus&quot;, &quot;devtools&quot;, &quot;DHARMa&quot;, &quot;dplyr&quot;, &quot;emmeans&quot;, &quot;factoextra&quot;, &quot;FactoMineR&quot;, &quot;fasterize&quot;, &quot;FD&quot;, &quot;forcats&quot;, &quot;geobr&quot;, &quot;GGally&quot;, &quot;ggExtra&quot;, &quot;ggforce&quot;, &quot;ggord&quot;, &quot;ggplot2&quot;, &quot;ggpubr&quot;, &quot;ggrepel&quot;, &quot;ggspatial&quot;, &quot;glmmTMB&quot;, &quot;grid&quot;, &quot;gridExtra&quot;, &quot;here&quot;, &quot;hillR&quot;, &quot;iNEXT&quot;, &quot;janitor&quot;, &quot;kableExtra&quot;, &quot;knitr&quot;, &quot;labdsv&quot;, &quot;lattice&quot;, &quot;leaflet&quot;, &quot;lmtest&quot;, &quot;lsmeans&quot;, &quot;lubridate&quot;, &quot;mapview&quot;, &quot;MASS&quot;, &quot;MuMIn&quot;, &quot;nlme&quot;, &quot;ordinal&quot;, &quot;palmerpenguins&quot;, &quot;performance&quot;, &quot;pez&quot;, &quot;phyloregion&quot;, &quot;phytools&quot;, &quot;picante&quot;, &quot;piecewiseSEM&quot;, &quot;purrr&quot;, &quot;pvclust&quot;, &quot;raster&quot;, &quot;readr&quot;, &quot;reshape2&quot;, &quot;rgdal&quot; , &quot;rnaturalearth&quot;, &quot;RVAideMemoire&quot;, &quot;sciplot&quot;, &quot;sf&quot;, &quot;sidrar&quot;, &quot;sjPlot&quot;, &quot;spData&quot;, &quot;spdep&quot;, &quot;stringr&quot;, &quot;SYNCSA&quot;, &quot;tibble&quot;, &quot;tidyr&quot;, &quot;tidyverse&quot;, &quot;tmap&quot;, &quot;tmaptools&quot;, &quot;TPD&quot;, &quot;vegan&quot;, &quot;viridis&quot;, &quot;visdat&quot;), dependencies = TRUE) Diferente dos pacotes anteriores que são baixados do CRAN, alguns pacotes são baixados do github dos pesquisadores responsáveis pelos pacotes. Nestes casos, precisamos carregar o pacote devtools para acessar a função install_github. Durante as instalações deste pacotes, o R irá pedir para você digitar um número indicando os pacotes que você deseja fazer update. Neste caso, digite 1 que irá indicar para ao programa que ele deve instalar todos os pacotes atualizados. library(devtools) install_github(&quot;paternogbc/ecodados&quot;) install_github(&quot;mwpennell/geiger-v2&quot;) install_github(&quot;fawda123/ggord&quot;) install_github(&quot;jinyizju/V.PhyloMaker&quot;) 2.6 Dados A maioria dos exemplos utilizados são baseados em dados reais que já foram publicados em artigos científicos ou são dados coletados por um dos autores deste livro. Em alguns casos, os dados foram simulados para facilitar a interpretação dos resultados de algumas análises estatísticas. Todos os dados, publicados ou simulados, estão disponíveis no pacote ecodados. Além disso, em cada capítulo fazemos uma breve descrição dos dados para facilitar a compreensão sobre o que é variável resposta ou preditora, como essas variáveis estão relacionadas com as perguntas e predições do exemplo. "],["cap3.html", "Capítulo 3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes 3.1 Introdução 3.2 Perguntas devem preceder as análises estatísticas 3.3 Fluxograma: Conectando Variáveis para Melhorar o desenho experimental e as análises estatísticas 3.4 Questões fundamentais em etnobiologia, ecologia e conservação 3.5 Considerações Finais 3.6 Referências", " Capítulo 3 Voltando ao básico: como dominar a arte de fazer perguntas cientificamente relevantes Capítulo originalmente publicado por Gonçalves-Souza, Provete, Garey, Silva &amp; Albuquerque (2019), in Methods and Techniques in Ethnobiology and Ethnoecology (tradução autorizada por Springer). 3.1 Introdução Aquele que ama a prática sem teoria é como um marinheiro que embarca em um barco sem um leme e uma bússola e nunca sabe onde pode atracar - Leonardo da Vinci. Qual é a sua pergunta? Talvez esta seja a frase que pesquisadores mais jovens ouvem quando começam suas atividades científicas. Apesar de aparentemente simples, responder a esta pergunta se torna um dos maiores desafios da formação científica. Seja na pesquisa quantitativa ou qualitativa, todo processo de busca de conhecimento parte de uma questão/problema formulada pelo pesquisador no início desse processo. Esta questão guiará o pesquisador em todas as etapas da pesquisa. No caso específico de pesquisa quantitativa, a questão é a porta de entrada de uma das formas mais poderosas de pensar cientificamente: o método hipotético-dedutivo (MHD) definido por Karl Popper (1959). Este capítulo propõe uma maneira de pensar sobre hipóteses (geradas dentro do MHD) para melhorar o pensamento estatístico usando um fluxograma que relaciona variáveis por ligações causais. Além disso, argumentamos que você pode facilmente usar fluxogramas para (1) identificar variáveis relevantes e como elas afetam umas às outras; (2) melhorar (quando necessário) o desenho experimental/observacional; (3) facilitar a escolha de análises estatísticas; e (4) melhorar a interpretação e comunicação dos dados e análises. 3.2 Perguntas devem preceder as análises estatísticas 3.2.1 Um bestiário1 para o teste de hipóteses (Você está fazendo a pergunta certa?) A maioria dos alunos e professores de ciências biológicas possuem aversão à palavra “estatística.” Não surpreendentemente, enquanto a maioria das disciplinas acadêmicas que compõem o “STEM” (termo em inglês para aglomerar Ciência, Tecnologia, Engenharia e Matemática) têm uma sólida formação estatística durante a graduação, cursos de ciências biológicas têm um currículo fraco ao integrar o pensamento estatístico dentro de um contexto biológico (Metz 2008). Esses cursos têm sido frequentemente ministrados sem qualquer abordagem prática para integrar os alunos em uma plataforma de solução de problemas (Horgan et al. 1999). Infelizmente, a Etnobiologia, Ecologia e Conservação (daqui em diante EEC) não são exceções. Talvez mais importante, uma grande preocupação durante o treinamento estatístico de estudantes de EEC é a necessidade de trabalhar com problemas complexos e multidemensionais que exigem soluções analíticas ainda mais complicadas para um público sem experiência em estatística e matemática. Por este motivo, muitos pesquisadores consideram a estatística como a parte mais problemática de sua pesquisa científica. Argumentamos neste capítulo que a dificuldade de usar estatística em EEC está associada à ausência de uma plataforma de solução de problemas gerando hipóteses claras que são derivadas de uma teoria. No entanto, concordamos que há um grande desafio em algumas disciplinas como a Etnobiologia para integrar esta abordagem direcionada por hipóteses, uma vez que foi introduzida apenas recentemente [veja Phillips and Gentry (1993); phillips_useful_1993-1; U. P. Albuquerque and Hanazaki (2009)]. Devido à falta de uma plataforma de solução de problemas, frequentemente percebemos que alunos/pesquisadores na EEC geralmente têm dificuldades de responder perguntas básicas para uma pesquisa científica, tais como: Qual é a principal teoria ou raciocínio lógico do seu estudo? Qual é a questão principal do seu estudo? Qual é a sua hipótese? Quais são suas predições? Qual é a unidade amostral, variável independente e dependente de seu trabalho? Existe alguma covariável? Qual é o grupo controle? Como selecionar qualquer teste estatístico sem responder a essas cinco perguntas? A estrutura estatística frequentista fornece uma maneira de ir progressivamente suportando ou falseando uma hipótese (Neyman and Pearson 1933; Popper 1959). A decisão de rejeitar uma hipótese nula é feita usando um valor de probabilidade (geralmente P &lt; 0,05) calculado pela comparação de eventos observados com observações repetidas obtidas a partir de uma distribuição nula. Agora, vamos ensinar através de um exemplo e apresentar um “guia para o pensamento estatístico” que conecta alguns elementos essenciais para executar qualquer análise multivariada (ou univariada) Underwood (1997). Primeiro, imagine que você observou os seguintes fenômenos na natureza: (1) “indivíduos de uma população tradicional selecionar algumas plantas para fins médicos” e (2)“manchas monodominantes da árvore Prosopis juliflora, uma espécie invasora em várias regiões.” Do lado da etnobiologia, para entender como e porque o conhecimento tradicional é construído, existe uma teoria ou hipótese (por exemplo, hipótese de aparência: Gonçalves, Albuquerque, and Medeiros 2016) explicando os principais processos que ditam a seleção da planta (Fig. 3.1a).Então, você pode fazer uma ou mais perguntas relacionadas àquele fenômeno observado (Fig. 3.1b). Por exemplo, como a urbanização afeta o conhecimento das pessoas sobre o uso de plantas medicinais em diferentes biomas? Do lado ecológico/conservação, para entender por que espécies introduzidas afetam as espécies nativas locais, você precisa entender as teorias do nicho ecológico e evolutiva (MacDougall, Gilbert, and Levine 2009; Saul and Jeschke 2015). Você pode perguntar, por exemplo, como as plantas exóticas afetam a estrutura de comunidades de plantas nativas? Questões complexas ou vagas dificultam a construção do fluxograma de pesquisa (ver descrição abaixo) e a seleção de testes estatísticos. Em vez disso, uma pergunta útil deve indicar as variáveis relevantes do seu estudo, como as independentes e dependentes, covariáveis, unidade de amostral e a escala espacial de interesse (Fig. 3.1b). No exemplo etnobiológico fornecido, a urbanização e o conhecimento das pessoas são as variáveis independentes e dependentes, respectivamente. Além disso, este estudo tem uma escala ampla, pois compara biomas diferentes. A próxima etapa é construir a hipótese biológica (Fig. 3.1c), que indicará a associação entre variáveis independentes e dependentes. No exemplo etnobiológico, a hipótese é que (1) “a urbanização afeta o conhecimento das pessoas sobre o uso de plantas medicinais,” enquanto a hipótese ecológica é que (2) “espécies exóticas afetam a estrutura de comunidades de plantas nativas.” Observe que isso é muito semelhante à questão principal. Mas você pode ter múltiplas hipóteses (Platt 1964) derivado de uma teoria. Depois de selecionar a hipótese biológica (ou científica), é hora de pensar sobre a derivação lógica da hipótese, que é chamada de predição ou previsão (Fig. 3.1d). Os padrões preditos são uma etapa muito importante, pois após defini-los você pode operacionalizar suas variáveis e visualizar seus dados. Por exemplo, a variável teórica “Urbanização” pode ser medida como “grau de urbanização ao longo das áreas urbanas, periurbanas e rurais” e “conhecimento das pessoas” como “o número e tipo de espécies de plantas úteis usadas para diferentes doenças.” Assim, a predição é que o grau de urbanização diminua o número e tipo de espécies de plantas conhecidas utilizadas para fins medicinais. No exemplo ecológico, a variável “espécies exóticas” pode ser medida como “a densidade da planta exótica Prosopis juliflora” e “Estrutura da comunidade” como “riqueza e composição de espécies nativas.” Depois de operacionalizar o seu trabalho à luz do método hipotético-dedutivo (HDM), o próximo passo é “pensar estatisticamente” sobre a hipótese biológica formulada (ver Figura 3.1 e, f). Figura 3.1: Um guia para o pensamento estatístico combinando o método hipotético-dedutivo (a – d, i) e estatística frequentista (e – i). Veja também a Fig. 1 em Underwood 1997, Fig. 1 em Ford 2004 e Fig. 1.3 em Legendre &amp; Legendre 2012. Então, você precisa definir as hipótese estatística nula (H0) e a alternativa (H1). Duas “hipóteses estatísticas” diferentes podem ser derivadas de uma hipótese biológica (Fig. 3.1e). Portanto, nós usamos o termo “hipótese estatística” entre aspas, porque as chamadas hipóteses estatísticas são predições sensu stricto, e muitas vezes confundem jovens estudantes. A hipótese estatística nula representa uma ausência de relacão entre as variáveis independentese e dependentes. Depois de definir a hipótese estatística nula, você pode derivar uma ou várias hipóteses estatísticas alternativas, que demonstram a(s) associação(ões) esperada(s) entre suas variáveis (Fig. 3.1e). Em nosso exemplo, a hipótese nula é que “o grau de urbanização não afeta o número de espécies de plantas úteis conhecidas pela população local.” Por sua vez, a hipótese alternativa é que “o grau de urbanização afeta o número de espécies de plantas úteis conhecidas pela população local.” Depois de operacionalizar suas variáveis e definir o valor nulo e hipóteses alternativas, é hora de visualizar o resultado esperado (Fig. 3.2, Caixa 1) e escolher um método estatístico adequado. Por exemplo, se você deseja comparar a diferença na composição de plantas úteis entre áreas urbanas, periurbanas e rurais, você pode executar uma PERMANOVA (Gonçalves-Souza, Garey, et al. 2019) que usa uma estatística de teste chamada pseudo-F. Então, você deve escolher o limite de probabilidade (o valor P) do teste estatístico para decidir se a hipótese nula deve ou não deve ser rejeitada (Nicholas J. Gotelli and Ellison 2012). Se você encontrar um P &lt; 0,05, você deve rejeitar a hipótese estatística nula (urbanização não afeta o número e a composição das plantas). Por outro lado, um P &gt; 0,05 indica que você não pode rejeitar a hipótese nula estatística. Assim, a estatística do teste e o valor P representam a última parte do teste de hipótese estatística, que é a decisão e conclusões apropriadas que serão usadas para retroalimentar a teoria principal (Figura 3.1g – i). Generalizando seus resultados e falseando (ou não) suas hipóteses, o estudo busca refinar a construção conceitual da teoria, que muda constantemente (Fig. 1i, Ford 2004). No entanto, há um ponto crítico nesta última frase, porque a significância estatística não significa necessariamente relevância biológica Martínez-Abraín (2008). Nas palavras de Ford (2004): “as estatísticas são usadas para iluminar o problema, e não para apoiar uma posição.” Além disso, o procedimento de teste de hipótese tem alguma incerteza, que pode influenciar resultados “falso-positivos” (erro tipo 1) e “falso-negativos” (erro tipo 2) (Whitlock and Schluter 2015). Para simplificar, não discutiremos em detalhes os prós e contras da estatística frequentista, bem como métodos alternativos (por exemplo, Bayesiano e Máxima Verossimilhança), e questões filosóficas relativas ao “valor P” (para uma discussão sobre esses tópicos, consulte o fórum em Ellison et al. 2014). Caixa 1. Tipo de variáveis e visualização de dados Conforme descrito na Seção 3, o fluxograma é essencial para conectar variáveis relevantes para a pesquisa. Para aproveitar ao máximo esta abordagem, você pode desenhar suas próprias predições gráficas para te ajudar a pensar sobre diferentes possibilidades analíticas. Aqui, nós fornecemos uma descrição completa dos tipos de variáveis que você deve saber antes de executar qualquer análise estatística e representar seus resultados. Além disso, mostramos uma breve galeria (Fig. 3.2) com exemplos de boas práticas em visualização de dados (Fig. 3.3b, veja também figuras em Gonçalves-Souza, Garey, et al. 2019). Além de conectar diferentes variáveis no fluxograma, você deve distinguir o tipo de variável. Primeiro você deve identificar as variáveis independentes (também conhecidos como explicativas ou preditoras) e dependentes (também conhecidas como resposta). A variável independente é aquela (ou aquelas) que prevê ou afeta a variável resposta (por exemplo, a fertilidade do solo é a variável independente capaz de afetar a abundância de uma espécie de planta focal, a variável dependente). Além disso, uma covariável é uma variável contínua que pode afetar tanto a variável resposta quanto a independente (ou ambos), mas geralmente não é do interesse do pesquisador. Depois de definir as variáveis relevantes, conectando-as no fluxograma, é hora de diferenciar seu tipo: (1) quantitativa ou contínua, e (2) categórica ou qualitativa (Fig. 3.2a, Caixa 1). O tipo de variável irá definir que tipo de figura você pode selecionar. Por exemplo, se você está comparando duas variáveis contínuas ou uma variável contínua e uma binária, a melhor maneira de visualizá-los (Fig. 3.2b) é um gráfico de dispersão (Fig. 3.2c, d). A linha representa os valores preditos pelo modelo estatístico usado (por exemplo, linear, logístico). Se você está interessado em comparar a gama de diferentes atributos (ou a descrição de qualquer variável numérica) entre as variáveis categóricas (por exemplo, espécies ou populações locais), um gráfico de halteres (do inglês Dumbbell plot) é uma boa opção (Fig. 3.2e). Histogramas também podem ser usados para mostrar a distribuição de duas variáveis contínuas de dois grupos ou fatores (Fig. 3.2f). No entanto, se você quiser testar o efeito de uma variável categórica independente (como em um desenho de ANOVA) sobre uma variável dependente, boxplots (Fig. 3.2g) ou gráficos de violino podem resumir essas relações de maneira elegante. Conjuntos de dados multivariados, por sua vez, podem ser visualizados com ordenação (Fig. 3.2h) ou gráficos de agrupamento (não mostrados). Existe um site abrangente apresentando várias maneiras de visualizar dados chamado https://www.datavizproject.com/. Figura 3.2: (A) Tipos de variáveis e (B) visualização de dados para representar a relação entre variáveis independentes e dependentes ou covariáveis. 3.3 Fluxograma: Conectando Variáveis para Melhorar o desenho experimental e as análises estatísticas McIntosh e Pontius (2017) afirmaram que o pensamento estatístico (representado na Fig. 3.1 inclui quatro etapas importantes: (1) quais perguntas você investigaria (Seção 4), (2) como e onde coletar os dados (Ruxton and Colegrave 2016), (3) quais fatores devem ser considerados e como eles afetam suas variáveis de interesse (e como elas afetam umas às outras), e (4) qual análise estatística você deve usar e como interpretar e comunicar os resultados (Seção 4). No entanto, a etapa (3) deve ser feita antes de coletar os dados. Por exemplo, se você está interessado na investigação dos benefícios das matas ciliares para as espécies nativas de peixes, quais variáveis devem ser incluídas no estudo? Se você escolher rios com e sem mata ciliar como única variável preditora, seu projeto de amostragem irá omitir outras variáveis de confusão, como ordem do rio e carbono orgânico do solo a montante. Vellend (2016) nomeou este problema como o “problema de três caixas” (ver também Ruxton and Colegrave 2016) , que se refere à limitação em inferir que X (variável independente) causa variação em Y (variável depende) quando outras variáveis criam ou ampliam a correlação entre X e Y (ver Fig. 2 em Ruxton and Colegrave 2016). Uma ferramenta útil para compreender a relação entre todas as variáveis relevantes do seu estudo é um fluxograma. No “fluxograma de pesquisa” [ver também magnusson_statistics_2015] proposto aqui, variáveis dependentes (também conhecidas como resposta) e independentes (ou preditora), bem como covariáveis são representadas como caixas (com formas distintas: Fig. 3.3). Além disso, você pode usar uma seta para representar uma (possível) via causal indicando força e sinal (positivo ou negativo) da variável preditora na variável dependente (Fig. 3.3) Ao fazer isso, você pode melhorar o desenho experimental ou observacional incluindo ou controlando variáveis de confusão o que, por sua vez, pode ajudar a separar a contribuição relativa de diferentes variáveis preditoras em seu sistema. Mais importante, fazer conexões entre variáveis melhora sua capacidade de visualizar o “Quadro geral” de sua pesquisa, o que pode afetar seu experimento, análise estatística e revisão da literatura. Na verdade, Arlidge et al. (2017)argumentam que fluxogramas facilitam a construção de narrativas, melhorando: (1) a definição de múltiplas hipóteses, (2) coleta, interpretação e disseminação de dados e (3) a comunicação do conteúdo do estudo. Você também pode ler o livro de Magnusson et al. (2015) para entender mais como usar fluxogramas para auxiliar análises estatísticas. Além disso, Ford (2004) recomenda o uso de uma abordagem analítica para fomentar o desenvolvimento da pesquisa. Além disso, o fluxograma de pesquisa pode ser usado como uma ferramenta forte para contemplar os conselhos de Ford (2004), que foram: (1) definir a pergunta da pesquisa, (2) definir a teoria a ser usada, (3) definir a técnica de investigação (por exemplo, experimento, observação de campo), (4) definir as medições, (5) definir como fazer inferência, e (6) interpretar, generalizar,e sintetizar a partir de dados que, por sua vez, são usados para refinar a teoria e modificar (quando necessário) questões futuras (Fig. 3.1). Figura 3.3: Exemplo de como usar um fluxograma para melhorar o entendimento do sistema estudado. A pergunta teórica “Qual é o impacto da invasão na comunidade nativa e nas propriedades do ecossistema?” pode gerar duas predições: (1) a planta exótica Prosopis juliflora reduz a diversidade beta de comunidades de plantas nativas, e (2) Prosopis juliflora modifica a composição das comunidades de plantas e reduz o estoque de carbono e as taxas de decomposição. Após selecionar suas predições, você pode construir um fluxograma conectando as variáveis relevantes e as associações entre elas. Além disso, você pode usar as informações na Caixa 1 para identificar que tipo de variável você irá coletar e quais figuras podem ser usadas (b). 3.4 Questões fundamentais em etnobiologia, ecologia e conservação As teorias são generalizações. As teorias contêm perguntas. Para algumas teorias, as perguntas são explícitas e representam o que a teoria pretende explicar. Para outras, as questões são implícitas e se relacionam com a quantidade e tipo de generalização, dada a escolha de métodos e exemplos usados por pesquisadores na construção da teoria. As teorias mudam continuamente, à medida que exceções são encontradas às suas generalizações e como questões implícitas sobre método e opções de estudos são expostas. - E. David Ford (2004) Como argumentamos antes, uma questão relevante e testável precede as análises estatísticas. Assim, apresentamos a seguir 12 questões que podem estimular pesquisas futuras na ECC. Observe, no entanto, que não queremos dizer que eles são as únicas questões relevantes a serem testadas na EEC (ver, por exemplo, Sutherland et al. (2013) para uma avaliação completa da pesquisa de ponta em Ecologia; e Caixa 6.1 em Pickett et al. (2007)2). Especificamente, essas questões são muito amplas e podem ser desenvolvidas em perguntas, hipóteses e predições mais restritas. Depois de cada questão teórica, apresentamos um estudo que testou essas hipóteses bem como as variáveis relevantes que podem estimular estudos futuros. Como o uso da terra afeta a manutenção da biodiversidade e a distribuição de espécies em diferentes escalas espaciais? Exemplo: Vários estudos em diferentes ecossistemas e escalas investigaram como o uso da terra afeta a biodiversidade. No entanto, destacamos um estudo comparando os efeitos globais do uso da terra (por exemplo, densidade populacional humana, paisagem para usos humanos, tempo desde a conversão da floresta) em espécies terrestres (por exemplo, mudança líquida na riqueza local, dissimilaridade composicional média) (Newbold et al. 2015). Qual é o impacto da invasão biótica nas comunidades nativas e propriedades do ecossistema? Exemplo: Investigar como o estabelecimento de espécies exóticas afetam a riqueza de espécies do receptor, comunidades nativas, bem como como isso afeta a entrega do serviços ecossitêmicos. Estudos anteriores controlaram a presença de espécies invasoras ou registros históricos comparados (estudos observacionais) dessas espécies e como elas impactam a biodiversidade. Além disso, há algum esforço em compreender os preditores de invasibilidade (por exemplo, produto interno bruto de regiões, densidade populacional humana, litoral continental e ilhas) Dawson et al. (2017). Como o declínio do predador de topo afeta a entrega de serviços ecossistêmicos? Exemplo: Investigar como a remoção de grandes carnívoros afeta o fornecimento de serviços ecossistêmicos, como o sequestro de carbono, doenças e controle de danos às colheitas. Estudos anteriores investigaram esta questão controlando a presença de predadores de topo ou comparando registros históricos (estudo observacionais) de espécies e vários preditores (por exemplo, perda e fragmentação de habitat, conflito entre humanos e espécies caçadas, utilização para a medicina tradicional e superexploração de presas) (Ripple et al. 2014). Como a acidificação dos oceanos afeta a produtividade primária e teias alimentares em ecossistemas marinhos? Exemplo: Estudos recentes testaram os efeitos individuais e interativos da acidificação e do aquecimento do oceano nas interações tróficas em uma teia alimentar. A acidificação e o aquecimento foram manipulados pela mudança dos níveis de CO2 e temperatura, respectivamente. Estudos anteriores demonstraram que elevação de CO2 e temperatura aumentou a produtividade primária e afetou a força do controle de cima para baixo exercido por predadores (Goldenberg et al. 2017). Como podemos reconciliar as necessidades da sociedade por recursos naturais com conservação da Natureza? Exemplo: Existe uma literatura crescente usando abordagens de paisagem para melhorar a gestão da terra para reconciliar conservação e desenvolvimento econômico. Os estudos possuem diversos objetivos, mas em geral eles usaram o engajamento das partes interessadas, apoio institucional, estruturas eficazes de governança como variáveis preditoras e melhorias ambientais (por exemplo, conservação do solo e da água, cobertura vegetal) e socioeconômicas (renda, capital social, saúde pública, emprego) como variáveis dependentes (Reed et al. 2017). Qual é o papel das áreas protegidas (UCs) para a manutenção da biodiversidade e dos serviços ecossistêmicos? Exemplo: Houve um trabalho considerável na última década comparando a eficácia das UCs para a conservação da biodiversidade. Embora esta questão não esteja completamente separada da questão anterior, o desenho dos estudos é relativamente distinto. Em geral, os pesquisadores contrastam o número de espécies e o fornecimento de serviços ecossistêmicos (por exemplo, retenção de água e solo, sequestro de carbono) entre áreas legalmente protegidas (UCs) e não protegidas (Xu et al. 2017). Como integrar o conhecimento científico e das pessoas locais para mitigar os impactos negativos das mudanças climáticas e do uso da terra na biodiversidade? Exemplo: Eventos climáticos extremos podem ter forte impacto sobre rendimento agrícola e produção de alimentos. Autores recentes têm argumentado que esse efeito pode ser mais forte para os pequenos agricultores. Estudos futuros podem investigar como a precipitação e a temperatura afetam o rendimento agrícola e como os agricultores tradicionais ou indígenas lidam com esse impacto negativo. Sistemas de agricultura tradicional têm menor erosão do solo e emissões de N2O / CO2 do que as monoculturas e, portanto, podem ser vistos como uma atividade de mitigação viável em um mundo em constante mudança (Niggli et al. 2009; Altieri and Nicholls 2017). Como as mudanças climáticas afetam a resiliência e estratégias adaptativas em sistemas socioecológicos? Exemplo: A mudança do clima altera tanto a pesca quanto a agricultura em todo o mundo, o que por sua vez obriga os humanos a mudar suas estratégias de cultivo. Estudos recentes têm argumentado que a agricultura em alguns países enfrentará riscos com as mudanças climáticas. Esses estudos comparam diferentes sistemas de produção, de agricultura convencional a outros tipos empregados por populações locais. Por exemplo, há uma forte conexão entre (1) espécies ameaçadas e sobrepesca, (2) índice de desenvolvimento humano (IDH) e dependência média da pesca e aquicultura. Além disso, há evidências de que a biodiversidade pode amortecer os impactos das mudanças climáticas aumentando a resiliência da terra [Niggli et al. (2009); Altieri and Nicholls (2017); blanchard_linked_2017]. Uma abordagem interessante é investigar como as populações locais lidam com esses desafios em termos de percepções e comportamento. Como a invasão biológica afeta espacial e temporalmente a estrutura e funcionalidade dos sistemas sócio-ecológicos? Exemplo: Muitos estudos demonstraram que espécies invasoras têm consequências biológicas, econômicas e sociais negativas. Aqui, da mesma forma que a pergunta B, os pesquisadores controlaram a presença de espécies invasoras ou utilizaram registros históricos. No entanto, trabalhos recentes quantificam não apenas a riqueza e composição de espécies nativas, mas também atributos funcionais de animais/vegetais que afetam diretamente o fornecimento de serviços ecossistêmicos como abastecimento (comida, água), regulação (clima, controle de inundações), suporte (ciclagem de nutrientes, formação do solo) e cultural (ecoturismo, patrimônio cultural) (Chaffin et al. 2016). Mas, espécies invasoras podem provocar efeitos positivos no sistema sócio-ecológico aumentando a disponibilidade de recursos naturais, impactando como as pessoas gerenciam e usam a biodiversidade local. Qual é a relação entre as diversidades filogenética e taxonômica com a diversidade biocultural? Exemplo: Estudos recentes mostraram que existe um padrão filogenético e taxonômico nos recursos que as pessoas incorporam em seus sistemas sócio-ecológicos, especialmente em plantas medicinais. Existe uma tendência para as pessoas, em diferentes partes do mundo, para usar plantas próximas filogeneticamente para os mesmos propósitos. Aqui, os pesquisadores podem testar o quanto isso afeta a diversidade de práticas em um sistema sócio-ecológico considerando o ambiente, bem como sua estrutura e funções [C. H. Saslis-Lagoudakis et al. (2012); saslis-lagoudakis_evolution_2014]. Quais variáveis ambientais e sócio-políticas mudam a estrutura e funcionalidade dos sistemas sócio-ecológicos tropicais? Exemplo: Testar a influência das mudanças ambientais afetadas pela espécie humana (por exemplo, fogo, exploração madeireira, aquecimento) em espécies-chave e, consequentemente, como esse efeito em cascata pode afetar outras espécies e serviços ecossistêmicos (por exemplo, armazenamento de carbono, ciclo da água e dinâmica do fogo) (Lindenmayer and Sato 2018). Os atributos das espécies influenciam como as populações locais distinguem plantas ou animais úteis e não-úteis? Exemplo: Investigar se a população local possui preferência ao selecionar espécies de animais ou plantas. Você pode avaliar se grupos diferentes (por exemplo, turistas) ou populações locais (por exemplo, pescadores) selecionam espécies com base em atributos das espécies. Estudos recentes têm mostrado uma ligação potencial entre planta (por exemplo, cor, folha, floração) e pássaro (por exemplo, cor, vocalzação) e alguns serviços culturais do ecossistema, como estética, recreativa e espiritual/religiosa (Goodness et al. 2016). Como você notou, as questões eram mais teóricas e, consequentemente, você pode derivar prediões testáveis (usando variáveis) a partir delas (Figuras 1 e 3). Por exemplo, da questão “Como o uso da terra afeta a manutenção da biodiversidade e distribuição de espécies em diferentes escalas?” podemos derivar duas predições diferentes: (1) densidade populacional (variável operacional de uso da terra) muda a composição de espécies e reduz a riqueza de espécies na escala da paisagem (predição derivada da hipótese da homogeneização biótica: Solar et al. 2015); (2) a composição dos atributos funcionais das plantas é diferente em remanescentes florestais com diferentes matrizes (cana-de-açúcar, gado, cidade, etc.). 3.5 Considerações Finais Conte-me seus segredos E faça-me suas perguntas Oh, vamos voltar para o início Correndo em círculos, perseguindo caudas Cabeças em uma ciência à parte Ninguém disse que seria fácil (…) Desfazendo enígmas Questões da ciência, ciência e progresso - O Cientista, Coldplay Este é um trecho de uma música da banda britânica de rock Coldplay, do álbum de 2002 A Rush of Blood to the Head. A letra é uma comparação incrível entre a ciência e os altos e baixos de um relacionamento fadado ao fracaço. A banda traz uma mensagem surpreendentemente clara de que como cientistas, nós (deveríamos) frequentemente fazer perguntas, voltar ao início após descobrir que estávamos errados (ou não) e que corremos em círculos tentando melhorar nosso conhecimento. A banda descreveu de uma forma tão precisa o quão cíclico (mas não repetitivo) é o método científico. Como disse a canção: não é fácil, mas aprender como fazer boas perguntas é um passo essencial para a consolidação do conhecimento. Ao incluir o teste de hipótese no EEC, podemos ser mais precisos. Definitivamente, isso não significa que a ciência descritiva seja inútil. Ao contrário, o desenvolvimento da ECC e principalmente da Etnobiologia, foi construído sobre uma linha de frente descritiva, o que significa que foi valioso para a fundação da Etnobiologia como disciplina consolidada [Group (2003); stepp_advances_2005]. No entanto, estudos recentes defendem que a etnobiologia deve dialogar com disciplinas com maior respaldo teórico, como ecologia e biologia evolutiva para melhorar a pesquisa sobre biodiversidade (U. P. Albuquerque and Ferreira Júnior 2017). Por sua vez, incorporando o conhecimento local em ecologia e evolução irá certamente refinar seu próprio desenvolvimento, que em última análise beneficia a conservação biológica (C. Haris Saslis-Lagoudakis and Clarke 2013). Além disso, há uma necessidade urgente de formar jovens pesquisadores em filosofia e metodologia da ciência, bem como comunicação e produção científica (U. Albuquerque P. 2013). Como comentário final, acreditamos que a formação dos alunos em EEC precisa de uma reavaliação que necessariamente volta aos conceitos e métodos básicos. Assim, os pesquisadores podem combinar o método hipotético-dedutivo com pensamento estatístico usando um fluxograma de pesquisa para ir além da descrição básica. Termo3 Definição Pressuposto Condições necessárias para sustentar uma hipótese ou construçãoa teoria Hipótese Afirmação testável derivada ou representando vários componentes de uma teoria Mecanismo Interação direta de uma relação causal que resultaem um fenômeno Padrão Eventos repetidos, entidades recorrentes ou relações replicadasrelações observadas no tempo ou no espaço Fenômeno Um evento, entidade ou relacionamento observável Predição Uma declaração de expectativa deduzida da lógicaestrutura ou derivada da estrutura causal de um teoria Processo Um subconjunto de fenômenos em que os eventos seguem umoutro no tempo ou espaço, que pode ou não sercausalmente conectado. É causa, mecanismo ou contensão explicando um padrão 3.6 Referências Referências "],["cap4.html", "Capítulo 4 Introdução ao R Pré-requisitos do capítulo 4.1 Contextualização 4.2 R e RStudio 4.3 Funcionamento da linguagem R 4.4 Estrutura e manipulação de objetos 4.5 Exercícios 4.6 Para se aprofundar", " Capítulo 4 Introdução ao R Pré-requisitos do capítulo Pacotes e dados que serão utilizados nesse capítulo. ## Pacotes library(ecodados) 4.1 Contextualização O objetivo desta seção é apresentar os aspectos básicos da linguagem R para a realização dos principais passos para a manipulação, visualização e análise de dados. Abordaremos aqui as questões básicas sobre a linguagem R, como: 1) R e RStudio, 2) funcionamento da linguagem, 3) estrutura e manipulação de objetos, 4) exercícios e 5) principais livros e material para se aprofundar nos seus estudos. Todo processo de aprendizagem torna-se mais efetivo quando a teoria é combinada com a prática, então recomendamos fortemente que você leitor(a) acompanhe os códigos e exercícios deste livro, ao mesmo tempo que os executa em seu computador e não só os leia passivamente. Além disso, se você tiver seus próprios dados é muito importante tentar executar e replicar as análises e/ou gráficos. Por motivos de espaço, não abordaremos todas as questões relacionadas ao uso da linguagem R nesta seção. Logo, aconselhamos que você consulte o material sugerido no final desta seção para se aprofundar. Este capítulo, na maioria das vezes, pode desestimular as pessoas que estão iniciando, uma vez que o mesmo não apresenta os códigos para realizar as análises estatísticas. Contudo, ele é essencial para o entendimento e interpretação do que está sendo informado nas linhas de código, além de facilitar a manipulação dos dados antes de realizar as análises estatísticas. Você perceberá que não usará este capítulo para fazer as análises, mas voltará neste capítulo diversas vezes para relembrar qual é o código ou que significa determinada expressão ou objeto usados nos próximos capítulos. 4.2 R e RStudio Com o R, é possível manipular, analisar e visualizar dados, além de escrever desde pequenas linhas de códigos até programas inteiros. O R é a versão em código aberto de uma linguagem de programação criada por John M. Chambers (Stanford University, CA, EUA) nos anos 1980 no Bell Labs, chamada de S, que contou com três versões: Old S (1976-1987), New S (1988-1997) e S4 (1998), utilizada na IDE S-PLUS (1988-2008). Essa linguagem tornou-se bastante popular e vários produtos comerciais que a usam ainda estão disponíveis, como o S-PLUS, SPSS, STATA e SAS. No final dos anos 1990, Robert Gentleman e Ross Ihaka (ambos da Universidade de Auckland, Nova Zelândia), iniciaram o desenvolvimento da versão livre da linguagem S, com o seguinte histórico: Desenvolvimento (1997-2000), Versão 1 (2000-2004), Versão 2 (2004-2013), Versão 3 (2013-2020) e Versão 4 (2020). Para mais detalhes do histórico de desenvolvimento das linguagens S e R, consultar (Wickham 2013). Atualmente a linguagem R é mantida por uma rede de colaboradores denominada R Core Team. A origem do nome R é desconhecida, mas reza a lenda que ao lançarem o nome da linguagem os autores se valeram da letra que vinha antes do S, uma vez que a linguagem R foi baseada nela e utilizaram a letra “R.” Outra história conta que pelo fato do nome dos dois autores iniciarem por “R,” batizaram a linguagem com essa letra, vai saber… Um aspecto digno de nota é que a linguagem R é uma linguagem de programação interpretada, ao contrário de outras linguagens como Fortran e C que são compiladas. Isso a faz ser mais fácil de ser utilizada, pois processa linhas de código e as transforma em linguagem de máquina (código binário que o computador efetivamente lê), apesar desse fato diminuir a velocidade de processamento. Para começarmos a trabalhar com o R é necessário baixá-lo na página do R Project. Então, acesse esse site, e em seguida, clique no link download R, que o levará à página do CRAN Mirrors (Comprehensive R Archive Network). Os detalhes de instalação são apresentados no @ref[cap1]. Reserve algum tempo para explorar esta página do R-Project. Existem vários livros dedicados a diversos assuntos baseados no R. Além disso, estão disponíveis manuais em diversas línguas para serem baixados gratuitamente. Como o R é um software livre, não existe a possibilidade de o usuário entrar em contato com um serviço de suporte de usuários, muito comuns em softwares pagos. Ao invés disso, existem várias listas de emails que fornecem suporte à comunidade de usuários. Nós, particularmente, recomendamos o ingresso nas seguintes listas: R-help, R-sig-ecology, e R-br. Este último reúne um grupo de pessoas usuárias brasileiras do programa R. Apesar de podermos utilizar o R com o IDE (Ambiente de Desenvolvimento Integrado - Integrated Development Environment) RGui que vem com a instalação da linguagem R para usuários Windows (Figura 4.1) ou no próprio terminal para usuários Linux e MacOS, existem alguns IDEs específicos para facilitar nosso uso dessa linguagem. Figura 4.1: Interface do RGui. Os números indicam: (1) R Script, (2) R Console, e (3) R Graphics. Dessa forma, nós que escrevemos utilizamos o RStudio e assumimos que você que está lendo fará o mesmo. O RStudio permite diversas personalizações, grande parte delas contidas em Tools &gt; Global options. Incentivamos as leitoras e leitores a “fuçar,” com certa dose de cuidado, nas opções para customização. Dentre essas mudanças, destacamos duas: Tools &gt; Global options &gt; Appearance &gt; Editor theme para escolher um tema para seu RStudio Tools &gt; Global options &gt; Code &gt; [X] Soft-wrap R source files com essa opção habilitada, quando escrevemos comentários longos ou mudamos a largura da janela que estamos trabalhando, todo o texto e o código se ajustam a janela automaticamente Um último ponto importante: para evitar possíveis erros é importante instalar primeiro o software que possui a linguagem R e depois o IDE RStudio. 4.3 Funcionamento da linguagem R Nesta seção, veremos os principais conceitos para entender como a linguagem R funciona ou como geralmente utilizamos o IDE RStudio no dia a dia, para executar nossas rotinas utilizando a linguagem R. Veremos então: 1) console, 2) script, 3) operadores, 4) objetos, 5) funções, 6) pacotes, 7) ajuda (help), 8) ambiente (environment/workspace), 9) citações e 10) principais erros. Antes de iniciarmos o uso do R pelo RStudio é fundamental entendermos alguns pontos sobre as janelas e o funcionamento delas no RStudio (Figura 4.2). Figura 4.2: Interface do RStudio. Os números indicam: (1) janela com abas de Script, R Markdown, dentre outras; (2) janela com abas de Console, Terminal e Jobs; (3) janela com abas de Environment, History, Conections e Tutorial; e (4) janela com abas de Files, Plots, Packages, Help e Viewer. Detalhando algumas dessas janelas e abas, temos: Console: painel onde os códigos são rodados e vemos as saídas Editor/Script: painel onde escrevemos nossos códigos em R, R Markdown ou outro formato Environment: painel com todos os objetos criados na sessão History: painel com o histórico dos códigos rodados Files: painel que mostra os arquivos no diretório de trabalho Plots: painel onde os gráficos são apresentados Packages: painel que lista os pacotes Help: painel onde a documentação das funções é exibida No RStudio, alguns atalhos são fundamentais para aumentar nossa produtividade: F1: abre o painel de Help quando digitado em cima de uma função Ctrl + Enter: roda a linha de código selecionada no script Ctrl + Shift + N: abre um novo script Ctrl + S: salva um script Ctrl + Z: desfaz uma operação Ctrl + Shift + Z: refaz uma operação Alt + -: insere um sinal de atribuição (&lt;-) Ctrl + Shift + M: insere um operador pipe (%&gt;%) Ctrl + Shift + C: comenta uma linha no script - insere um (#) Ctrl + Shift + R: insere uma sessão (# ———————-) Ctrl + Shift + H: abre uma janela para selecionar o diretório de trabalho Ctrl + Shift + F10: reinicia o console Ctrl + L: limpa os códigos do console Alt + Shift + K: abre uma janela com todos os atalhos disponíveis 4.3.1 Console O console é onde a versão da linguagem R instalada é carregada para executar os códigos da linguagem R (Figura 4.2 (2)). Na janela do console aparecerá o símbolo &gt;, seguido de uma barra vertical | que fica piscando (cursor), onde digitaremos ou enviaremos nossos códigos do script. Podemos fazer um pequeno exercício: vamos digitar 10 + 2, seguido da tecla Enter para que essa operação seja executada. 10 + 2 #&gt; [1] 12 O resultado retorna o valor 12, precedido de um valor entre colchetes. Esses colchetes demonstram a posição do elemento numa sequência de valores. Se fizermos essa outra operação 1:42, o R vai criar uma sequência unitária de valores de 1 a 42. A depender da largura da janela do console, vai aparecer um número diferente entre colchetes indicando sua posição na sequência: antes do número 1 vai aparecer o [1], depois quando a sequência for quebrada, vai aparecer o número correspondente da posição do elemento, por exemplo, [26]. 1:42 #&gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #&gt; [37] 37 38 39 40 41 42 Podemos ver o histórico dos códigos executados no console na aba History (Figura 4.2 (3)). 4.3.2 Scripts Scripts são rascunhos dos códigos e onde de fato os códigos são escritos e depois enviados ao console (Figura 4.2 (1)). Scripts são arquivos de texto simples, criados com a extensão (terminação) .R (ative a visualização da extensão de arquivos para ver). Para criar um script, basta ir em File &gt; New File &gt; R Script, ou clicando no ícone com uma folha branca e um círculo verde com um sinal de +, logo abaixo de File, ou ainda usando o atalho Ctrl + Shift + N. Também é possível usar outro editor de códigos, como o bloco de notas .txt, Sublime Text, Notepad++ e similares. Os códigos podem ser escritos nesses editores e depois salvos com a extensão .R que ao ser aberto no RStudio irão ser executados normalmente. Ou ainda, podemos configurar o Sublime Text para executar os códigos em R diretamente nele, veja mais aqui. Uma vez escrito os códigos no script podemos rodar esses códigos de duas formas: 1) todo o script de uma vez, clicando em Source ou usando o atalho Ctrl + Shift + Enter; ou 2) apenas a linha onde o cursor estiver posicionado, independente de sua posição naquela linha, clicando em Run ou usando o atalho Ctrl + Enter. Devemos sempre salvar nossos scripts, tomando por via de regra: primeiro criar o arquivo e depois ir salvando nesse mesmo arquivo a cada passo de desenvolvimento das análises (não é raro o R fechar sozinho e você perder algum tempo de trabalho…). Há diversos motivos para criar um script: continuar o desenvolvimento desse script em outro momento ou em outro computador, preservar trabalhos passados, ou ainda compartilhar seus códigos com outras pessoas. Para criar ou salvar um script basta ir em File &gt; Save, escolher um diretório e nome para o script e salvar. Podemos ainda utilizar o atalho Ctrl + S. Em relação aos scripts, há ainda os comentários, representados pelos símbolos # (hash), #' (hash-linha) e #&gt; (hash-maior). A diferença entre eles é que para o segundo e terceiro, quando precionamos a tecla Enter o comentário #' e #&gt; são inseridos automaticamente na linha seguinte. Linhas de códigos do script contendo comentários em seu início não são lidos pelo console do R. Se o comentário estiver no final da linha, essa linha de código ainda será lida. Os comentários são utilizados geralmente para: 1) descrever informações sobre dados ou funções e/ou 2) suprimir linhas de código. É interessante ter no início de cada script um cabeçalho identificando o objetivo ou análise, autor e data para facilitar o compartilhamento e reprodutibilidade. Os comentários podem ser inseridos ou retirados das linhas com o atalho: Ctrl + Shift + C. #&#39; --- #&#39; Título: Capítulo 04 - Introdução ao R #&#39; Autor: Maurício Vancine #&#39; Data: 11-11-2021 #&#39; --- Além disso, podemos usar comentários para adicionar informações sobre os códigos. ## Comentários # O R nao lê a linha do código depois do # (hash). 42 # Essas palavras não são executadas, apenas o 42, a resposta para questão fundamental da vida, o universo e tudo mais. #&gt; [1] 42 Por fim, outro ponto fundamental é ter boas práticas de estilo de código. Quanto mais organizado e padronizado estiver os scripts, mais fácil de entendê-los e de procurar possíveis erros. Existem dois guias de boas práticas para adequar seus scripts: Hadley Wickham e Google. Ainda em relação aos scripts, temos os Code Snippets (Fragmentos de código), que são macros de texto usadas para inserir rapidamente fragmentos comuns de código. Por exemplo, o snippet fun insere uma definição de função R. Para mais detalhes, ler o artigo do RStudio: link. # fun {snippet} fun name &lt;- function(variables) { } Uma aplicação bem interessante dos Code Snippets no script é o ts. Basta digitar esse código e em seguida completar um a tecla Tab para inserir rapidamente a data e horário atuais no script em forma de comentário. # ts {snippet} # Thu Nov 11 18:19:26 2021 ------------------------------ 4.3.3 Operadores No R, temos cinco tipos de operadores: aritméticos, relacionais, lógicos, atribuição e diversos. Grande parte deles são descritos na Tabela 4.1. Tabela 4.1: Operadores no R. Operador Tipo Descrição Aritmético Adição Aritmético Subtração Aritmético Multiplicação / Aritmético Divisão %% Aritmético Resto da divisão %/% Aritmético Divisão inteira ^ ou ** Aritmético Expoente &gt; Relacional Maior &lt; Relacional Menor &gt;= Relacional Maior ou igual &lt;= Relacional Menor ou igual == Relacional Igualdade != Relacional Diferença ! Lógico Lógico NÃO &amp; Lógico Lógico elementar E &amp;&amp; Lógico Lógico E || Lógico Lógico OU &lt;- ou = Atribuição Atribuição à esquerda &lt;&lt;- Atribuição Super atribuição à esquerda -&gt; Atribuição Atribuição à direita -&gt;&gt; Atribuição Super atribuição à direita : Diversos Sequência unitária %in% Diversos Elementos que pertencem a um vetor %*% Diversos Multiplicar matriz com sua transposta %&gt;% Diversos Pipe (pacote magrittr) |&gt; Diversos Pipe (R base nativo) %–% Diversos Intervalo de datas (pacote lubridate) Como exemplo, podemos fazer operações simples usando os operadores aritméticos. ## Operações aritméticas 10 + 2 # adição #&gt; [1] 12 10 * 2 # multiplicação #&gt; [1] 20 Precisamos ficar atentos à prioridade dos operadores aritméticos: PRIORITÁRIO () &gt; ^ &gt; * ou / &gt; + ou - NÃO PRIORITÁRIO Veja no exemplo abaixo como o uso dos parênteses muda o resultado. ## Sem especificar a ordem # Segue a ordem dos operadores. 1 * 2 + 2 / 2 ^ 2 #&gt; [1] 2.5 ## Especificando a ordem # Segue a ordem dos parenteses. ((1 * 2) + (2 / 2)) ^ 2 #&gt; [1] 9 4.3.4 Objetos Objetos são palavras às quais são atribuídos dados. A atribuição possibilita a manipulação de dados ou resultados de análises. Utilizaremos os símbolos &lt; (menor), seguido de - (menos), sem espaço, dessa forma &lt;-. Também podemos utilizar o símbolo de igual (=), mas não recomendamos, por não fazer parte das boas práticas de escrita de códigos em R. Podemos inserir essa combinação de símbolos com o atalho Alt + -. Para demonstrar, vamos atribuir o valor 10 à palavra obj_10, e chamar esse objeto novamente para verificar seu conteúdo. ## Atribuição - símbolo (&lt;-) obj_10 &lt;- 10 obj_10 #&gt; [1] 10 Todos os objetos criados numa sessão do R ficam listados na aba Environment (Figura 4.2 (3)). Além disso, o RStudio possui a função autocomplete, ou seja, podemos digitar as primeiras letras de um objeto (ou função) e em seguida apertar Tab para que o RStudio liste tudo que começar com essas letras. Dois pontos importantes sobre atribuições: primeiro, o R sobrescreve os valores dos objetos com o mesmo nome, deixando o objeto com o valor da última atribuição. ## Sobrescreve o valor dos objetos obj &lt;- 100 obj #&gt; [1] 100 ## O objeto &#39;obj&#39; agora vale 2 obj &lt;- 2 obj #&gt; [1] 2 Segundo, o R tem limitações ao nomear objetos: nome de objetos só podem começar por letras (a-z ou A-Z) ou pontos (.) nome de objetos só podem conter letras (a-z ou A-Z), números (0-9), underscores (_) ou pontos (.) R é case-sensitive, i.e., ele reconhece letras maiúsculas como diferentes de letras minúscula. Assim, um objeto chamado “resposta” é diferente do objeto “RESPOSTA” devemos evitar acentos ou cedilha (ç) para facilitar a memorização dos objetos e também para evitar erros de encoding/codificação de caracteres nome de objetos não podem ser iguais a nomes especiais, reservados para programação (break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while) Podemos ainda utilizar objetos para fazer operações e criar objetos. Isso pode parecer um pouco confuso para os iniciantes, mas é fundamental aprender essa lógica para passar para os próximos passos. ## Definir dois objetos va1 &lt;- 10 va2 &lt;- 2 ## Operações com objetos e atribuicão adi &lt;- va1 + va2 adi #&gt; [1] 12 4.3.5 Funções Funções são códigos preparados para realizar uma tarefa específica de modo simples. Outra forma de entender uma função é: códigos que realizam operações em argumentos. A estrutura de uma função é muito similar à sintaxe usada em planilhas eletrônicas, por exemplo, sendo composta por: nome_da_função(argumento1, argumento2, …) Nome da função: remete ao que ela faz Parênteses: limitam a função Argumentos: valores, parâmetros ou expressões onde a função atuará Vírgulas: separam os argumentos Os argumentos de uma função podem ser de dois tipos: Valores ou objetos: a função alterará os valores em si ou os valores atribuídos aos objetos Parâmetros: valores fixos que informam um método ou a realização de uma operação. Informa-se o nome desse argumento, seguido de “=” e um número, texto ou TRUE ou FALSE Alguns exemplos de argumentos como valores ou objetos. ## Funções - argumentos como valores sum(10, 2) #&gt; [1] 12 ## Funções - argumentos como objetos sum(va1, va2) #&gt; [1] 12 Alguns exemplos de argumentos como parâmetros. Note que apesar do valor do argumento ser o mesmo (10), seu efeito no resultado da função muda drasticamente. Aqui também é importante destacar um ponto: 1) podemos informar os argumentos sequencialmente, sem explicitar seus nomes, ou 2) independente da ordem, mas explicitando seus nomes. Entretanto, como no exemplo abaixo, devemos informar o nome do argumento (i.e., parâmetro), para que seu efeito seja o que desejamos. ## Funções - argumentos como parâmetros ## Repetição - repete todos os elementos rep(x = 1:5, times = 10) #&gt; [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 ## Repetição - repete cada um dos elementos rep(x = 1:5, each = 10) #&gt; [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 Um ponto fundamental, e que deve ser entendido nesse ponto, é o fluxo de atribuições do resultado da operação de funções a novos objetos. No desenvolvimento de qualquer script na linguagem R, grande parte da estrutura do mesmo será dessa forma: atribuição de dados a objetos &gt; operações com funções &gt; atribuição dos resultados a novos objetos &gt; operações com funções desses novos objetos &gt; atribuição dos resultados a novos objetos… Ao entender esse funcionamento, começamos a entender como devemos pensar na organização do nosso script para montar as análises que precisamos. ## Atribuicão dos resultados ## Repetição rep_times &lt;- rep(1:5, times = 10) rep_times #&gt; [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 ## Somar e atribuir rep_times_soma &lt;- sum(rep_times) rep_times_soma #&gt; [1] 150 ## Raiz e atribuir rep_times_soma_raiz &lt;- sqrt(rep_times_soma) rep_times_soma_raiz #&gt; [1] 12.24745 Por fim, é fundamental também entender a origem das funções que usamos no R. Todas as funções são advindas de pacotes. Esses pacotes possuem duas origens. pacotes já instalados por padrão e que são carregados quando abrimos o R (R Base) pacotes que instalamos e carregamos com funções 4.3.6 Pacotes Pacotes são conjuntos extras de funções para executar tarefas específicas, além dos pacotes instalados no R Base. Existe literalmente milhares de pacotes para as mais diversas tarefas: estatística, ecologia, geografia, sensoriamento remoto, econometria, ciências sociais, gráficos, machine learning, etc. Podemos verificar este vasto conjunto de pacotes pelo link que lista por nome os pacotes oficiais, ou seja, que passaram pelo crivo do CRAN. Existem ainda muito mais pacotes em desenvolvimento, geralmente disponibilizados em repositórios do GitHub ou GitLab. Podemos listar esses pacotes disponíveis no CRAN com esse código. ## Número atual de pacotes no CRAN nrow(available.packages()) #&gt; [1] 18514 Primeiramente, com uma sessão do R sem carregar nenhum pacote extra, podemos verificar pacotes carregados pelo R Base utilizando a função search(). ## Verificar pacotes carregados search() Podemos ainda verificar todos pacotes instalados em nosso computador com a função library(). ## Verificar pacotes instalados library() No R, quando tratamos de pacotes, devemos destacar a diferença de dois conceitos: instalar um pacote e carregar um pacote. A instalação de pacotes possui algumas características: Instala-se um pacote apenas uma vez Precisamos estar conectados à internet O nome do pacote precisa estar entre aspas na função Função (CRAN): install.packages() Vamos instalar o pacote vegan diretamente do CRAN, que possui funções para realizar uma série de análise em ecologia. Para isso, podemos ir em Tools &gt; Install Packages..., ou ir na aba Packages (Figura 4.2 (4)), procurar o pacote e simplesmente clicar em “Install.” Podemos ainda utilizar a função install.packages(). ## Instalar pacotes install.packages(&quot;vegan&quot;) Podemos conferir em que diretórios um pacote será instalado com a função .libPaths(). ## Diretórios de intalação dos pacotes .libPaths() #&gt; [1] &quot;/home/mude/R/x86_64-pc-linux-gnu-library/4.1&quot; &quot;/usr/local/lib/R/site-library&quot; #&gt; [3] &quot;/usr/lib/R/site-library&quot; &quot;/usr/lib/R/library&quot; Uma vez instalado um pacote, não há necessidade de instalá-lo novamente. Entretanto, todas as vezes que iniciarmos uma sessão no R, precisamos carregar os pacotes com as funções que precisamos utilizar. O carregamento de pacotes possui algumas características: Carrega-se o pacote toda vez que se abre uma nova sessão do R Não precisamos estar conectados à internet O nome do pacote não precisa estar entre aspas na função Funções: library() ou require() Vamos carregar o pacote vegan que instalamos anteriormente. Podemos ir na aba Packages (Figura 4.2 (4)) e “ticar” o pacote que queremos carregar ou utilizar a função library(). ## Carregar pacotes library(vegan) Como dissemos, alguns pacotes em desenvolvimento encontram-se disponíveis em repositórios do GitHub ou GitLab. Para instalar pacotes do GitHub, por exemplo, precisamos instalar e carregar o pacote devtools. ## Instalar pacote devtools install.packages(&quot;devtools&quot;) ## Carregar pacote devtools library(devtools) Uma vez instalado e carregado esse pacote, podemos instalar o pacote do GitHub, utilizando a função devtools::install_github(). Precisamos atentar para usar essa forma “nome_usuario/nome_repositorio,” retirados do link do repositório de interesse. Como exemplo, podemos instalar o mesmo pacote vegan do repositório do GitHub vegandevs/vegan, e depois utilizar a função library() para carregá-lo normalmente. ## Instalar pacote do github devtools::install_github(&quot;vegandevs/vegan&quot;) ## Carregar pacote do github library(&quot;vegan&quot;) Pode ser que em algumas circunstâncias iremos precisar instalar pacotes com versões específicas para algumas análises. A forma mais simples de fazer isso é instalar um pacote a partir de um arquivo compactado .tar.gz. Para isso podemos ir à base do CRAN e realizar o download: https://cran.r-project.org/src/contrib/Archive/. Para exemplificar, vamos instalar o pacote vegan 2.4.0. ## Download do arquivo .tar.gz download.file(url = &quot;https://cran.r-project.org/src/contrib/Archive/vegan/vegan_2.4-0.tar.gz&quot;, destfile = &quot;vegan_2.4-0.tar.gz&quot;, mode = &quot;wb&quot;) ## Instalar o pacote vegan 2.4.0 install.packages(&quot;vegan_2.4-0.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) Podemos ver a descrição de um pacote com a função packageDescription(). ## Descrição de um pacote packageDescription(&quot;vegan&quot;) #&gt; Package: vegan #&gt; Title: Community Ecology Package #&gt; Version: 2.5-7 #&gt; Author: Jari Oksanen, F. Guillaume Blanchet, Michael Friendly, Roeland Kindt, Pierre Legendre, Dan #&gt; McGlinn, Peter R. Minchin, R. B. O&#39;Hara, Gavin L. Simpson, Peter Solymos, M. Henry H. #&gt; Stevens, Eduard Szoecs, Helene Wagner #&gt; Maintainer: Jari Oksanen &lt;jhoksane@gmail.com&gt; #&gt; Depends: permute (&gt;= 0.9-0), lattice, R (&gt;= 3.4.0) #&gt; Suggests: parallel, tcltk, knitr, markdown #&gt; Imports: MASS, cluster, mgcv #&gt; VignetteBuilder: utils, knitr #&gt; Description: Ordination methods, diversity analysis and other functions for community and vegetation #&gt; ecologists. #&gt; License: GPL-2 #&gt; BugReports: https://github.com/vegandevs/vegan/issues #&gt; URL: https://cran.r-project.org, https://github.com/vegandevs/vegan #&gt; NeedsCompilation: yes #&gt; Packaged: 2020-11-27 13:22:03 UTC; jarioksa #&gt; Repository: CRAN #&gt; Date/Publication: 2020-11-28 15:10:02 UTC #&gt; Built: R 4.1.2; x86_64-pc-linux-gnu; 2021-11-10 15:41:11 UTC; unix #&gt; #&gt; -- File: /home/mude/R/x86_64-pc-linux-gnu-library/4.1/vegan/Meta/package.rds A maioria dos pacotes possui bancos de dados que pode ser acessados pela função data(). Esses bancos de dados podem ser usados para testar as funções do pacote. Se estiver com dúvida na maneira como você deve preparar a planilha para realizar uma análise específica, entre na Ajuda (Help) da função e veja os conjuntos de dados que estão no exemplo desta função. Como exemplo, vamos carregar os dados dune do pacote vegan, que são dados de observações de 30 espécies vegetais em 20 locais. ## Carregar dados de um pacote library(vegan) data(dune) dune[1:6, 1:6] #&gt; Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere #&gt; 1 1 0 0 0 0 0 #&gt; 2 3 0 0 2 0 3 #&gt; 3 0 4 0 7 0 2 #&gt; 4 0 8 0 2 0 2 #&gt; 5 2 0 0 0 4 2 #&gt; 6 2 0 0 0 3 0 Se por algum motivo precisarmos desinstalar um pacote, podemos utilizar a função remove.packages(). Já para descarregar um pacote de uma sessão do R, podemos usar a função detach(). ## Descarregar um pacote detach(&quot;package:vegan&quot;, unload = TRUE) E um último ponto fundamental sobre pacotes, diz respeito à atualização dos mesmos. Os pacotes são atualizados com frequência, e infelizmente ou felizmente (pois as atualizações podem oferecer algumas quebras entre pacotes), não se atualizam sozinhos. Muitas vezes, a instalação de um pacote pode depender da versão dos pacotes dependentes, e geralmente uma janela se abre perguntando se você quer que todos os pacotes dependentes sejam atualizados. Podemos ir na aba Packages (Figura 4.2 (4)) e clicar em “Update” ou usar a função update.packages(checkBuilt = TRUE, ask = FALSE) para atualizá-los, entretanto, essa é uma função que costuma demorar muito para terminar de ser executada. ## Atualização dos pacotes update.packages(checkBuilt = TRUE, ask = FALSE) Para fazer a atualização dos pacotes instalados pelo GitHub, recomendamos o uso do pacote dtupdate. ## Atualização dos pacotes instalados pelo GitHub dtupdate::github_update(auto.install = TRUE, ask = FALSE) Destacamos e incentivamos ainda uma prática que achamos interessante para aumentar a reprodutibilidade de nossos códigos e scripts: a de chamar as funções de pacotes carregados dessa forma pacote::função(). Com o uso dessa prática, deixamos claro o pacote em que a função está implementada. Destacamos aqui o exemplo de como instalar pacotes do GitHub do pacote devtools. ## Pacote seguido da função implementada daquele pacote devtools::install_github() 4.3.7 Ajuda (Help) Um importante passo para melhorar a usabilidade e ter mais familiaridade com a linguagem R é aprender a usar a ajuda (help) de cada função. Para tanto, podemos utilizar a função help() ou o operador ?, depois de ter carregado o pacote, para abrir uma nova aba (Figura 4.2 (4)) que possui diversas informações sobre a função de interesse. O arquivo de ajuda do R possui geralmente nove ou dez tópicos, que nos auxiliam muito no entendimento dos dados de entrada, argumentos e que operações estão sendo realizadas. Description: resumo da função Usage: como utilizar a função e quais os seus argumentos Arguments: detalha os argumentos e como os mesmos devem ser especificados Details: detalhes importantes para se usar a função Value: mostra como interpretar a saída (output) da função (os resultados) Note: notas gerais sobre a função Authors: autores da função References: referências bibliográficas para os métodos usados para construção da função See also: funções relacionadas Examples: exemplos do uso da função. Às vezes pode ser útil copiar esse trecho e colar no R para ver como funciona e como usar a função. Vamos realizar um exemplo, buscando o help da função aov(), que realiza uma análise de variância. ## Ajuda help(aov) ?aov Além das funções, podemos buscar detalhes de um pacote em específico, para uma página simples do help utilizando a função help() ou o operador ?. Entretanto, para uma opção que ofereça uma descrição detalhada e um índice de todas as funções do pacote, podemos utilizar a função library(), mas agora utilizando o argumento help, indicando o pacote de interesse entre aspas. ## Ajuda do pacote help(vegan) ?vegan ## Help detalhado library(help = &quot;vegan&quot;) Outra ferramenta de busca é a página rseek, na qual é possível buscar por um termo não só nos pacotes do R, mas também em listas de emails, manuais, páginas na internet e livros sobre o programa. 4.3.8 Ambiente (Environment) O ambiente Environment como vimos é onde os objetos criados são armazenados. É fundamental entender que um objeto é uma alocação de um pequeno espaço na memória RAM do nosso computador, onde o R armazenará um valor ou o resultado de uma função, utilizando o nome do objetos que definimos na atribuição. Sendo assim, se fizermos uma atribuição de um objeto maior que o tamanho da memória RAM, esse objeto não será alocado, e a atribuição não funcionará. Existem opções para contornar esse tipo de limitação, mas não a abordaremos aqui. Entretanto, podemos utilizar a função object.size() para saber quanto espaço nosso objeto criado está alocando de memória RAM. ## Tamanho de um objeto object.size(adi) #&gt; 56 bytes Podemos listar todos os objetos criados com a função ls() ou objects(). ## Listar todos os objetos ls() #&gt; [1] &quot;a1&quot; #&gt; [2] &quot;abu&quot; #&gt; [3] &quot;abundancia&quot; #&gt; [4] &quot;adi&quot; #&gt; [5] &quot;agua&quot; #&gt; [6] &quot;aic_fit&quot; #&gt; [7] &quot;aic_fit_ext&quot; #&gt; [8] &quot;ambie_dat&quot; #&gt; [9] &quot;ambie_fren_dat&quot; #&gt; [10] &quot;amostragem&quot; #&gt; [11] &quot;analise&quot; #&gt; [12] &quot;analise2&quot; #&gt; [13] &quot;aninha_plot&quot; #&gt; [14] &quot;anuros_ab&quot; #&gt; [15] &quot;anuros_comm&quot; #&gt; [16] &quot;anuros_comm_rel&quot; #&gt; [17] &quot;anuros_IC&quot; #&gt; [18] &quot;ar&quot; #&gt; [19] &quot;aranha.cent&quot; #&gt; [20] &quot;aranhas&quot; #&gt; [21] &quot;arquivos_raster&quot; #&gt; [22] &quot;assumption3&quot; #&gt; [23] &quot;autovalores&quot; #&gt; [24] &quot;autovetores&quot; #&gt; [25] &quot;betad_fren&quot; #&gt; [26] &quot;betad.aves&quot; #&gt; [27] &quot;bird.rda&quot; #&gt; [28] &quot;bocaina_transf&quot; #&gt; [29] &quot;bocaina_transf2&quot; #&gt; [30] &quot;ca.env&quot; #&gt; [31] &quot;candidates&quot; #&gt; [32] &quot;Carpornis&quot; #&gt; [33] &quot;chat&quot; #&gt; [34] &quot;co110_sf&quot; #&gt; [35] &quot;co110_sf_laea&quot; #&gt; [36] &quot;co110_sf_moll&quot; #&gt; [37] &quot;co110_sp&quot; #&gt; [38] &quot;cofresult&quot; #&gt; [39] &quot;colar&quot; #&gt; [40] &quot;COMDIST_AB_plot&quot; #&gt; [41] &quot;COMDIST_PA_plot&quot; #&gt; [42] &quot;COMDISTNT_AB_plot&quot; #&gt; [43] &quot;COMDISTNT_PA_plot&quot; #&gt; [44] &quot;comm_baselga&quot; #&gt; [45] &quot;commAux&quot; #&gt; [46] &quot;composicao_acaros&quot; #&gt; [47] &quot;composicao_especies&quot; #&gt; [48] &quot;composicao_PA&quot; #&gt; [49] &quot;comun_dat&quot; #&gt; [50] &quot;comun_fren_dat&quot; #&gt; [51] &quot;comunidade&quot; #&gt; [52] &quot;concatenar&quot; #&gt; [53] &quot;coord&quot; #&gt; [54] &quot;cor_linear_model&quot; #&gt; [55] &quot;cores&quot; #&gt; [56] &quot;corr&quot; #&gt; [57] &quot;correlacao_arbustos&quot; #&gt; [58] &quot;CRC_LP_femea&quot; #&gt; [59] &quot;CRC_PN_macho&quot; #&gt; [60] &quot;curvas_dominancia_com2&quot; #&gt; [61] &quot;curvas_dominancia_todas&quot; #&gt; [62] &quot;cwm_dis&quot; #&gt; [63] &quot;cwm_ex&quot; #&gt; [64] &quot;cwm_fren&quot; #&gt; [65] &quot;da&quot; #&gt; [66] &quot;dados&quot; #&gt; [67] &quot;dados_amostras&quot; #&gt; [68] &quot;dados_ancova&quot; #&gt; [69] &quot;dados_anova_simples&quot; #&gt; [70] &quot;dados_bloco&quot; #&gt; [71] &quot;dados_classes&quot; #&gt; [72] &quot;dados_coleta&quot; #&gt; [73] &quot;dados_combinado&quot; #&gt; [74] &quot;dados_combinado_ext&quot; #&gt; [75] &quot;dados_dis&quot; #&gt; [76] &quot;dados_dis_AB&quot; #&gt; [77] &quot;dados_div&quot; #&gt; [78] &quot;dados_dois_fatores&quot; #&gt; [79] &quot;dados_dois_fatores_interacao&quot; #&gt; [80] &quot;dados_dois_fatores_interacao2&quot; #&gt; [81] &quot;dados_inext&quot; #&gt; [82] &quot;dados_inext_abu&quot; #&gt; [83] &quot;dados_matriz&quot; #&gt; [84] &quot;dados_PA&quot; #&gt; [85] &quot;dados_prec&quot; #&gt; [86] &quot;dados_rarefacao&quot; #&gt; [87] &quot;dados_regressao&quot; #&gt; [88] &quot;dados_regressao_mul&quot; #&gt; [89] &quot;dados_semNA&quot; #&gt; [90] &quot;darknessmale&quot; #&gt; [91] &quot;dat&quot; #&gt; [92] &quot;dat_betapart&quot; #&gt; [93] &quot;dat.graf&quot; #&gt; [94] &quot;data&quot; #&gt; [95] &quot;data.frame_AB&quot; #&gt; [96] &quot;data.frame_PA&quot; #&gt; [97] &quot;dend&quot; #&gt; [98] &quot;dendro&quot; #&gt; [99] &quot;df&quot; #&gt; [100] &quot;df_sem_na&quot; #&gt; [101] &quot;dis_prec&quot; #&gt; [102] &quot;dist_categ&quot; #&gt; [103] &quot;dist_mist&quot; #&gt; [104] &quot;dist_normal&quot; #&gt; [105] &quot;distBocaina&quot; #&gt; [106] &quot;doubs&quot; #&gt; [107] &quot;dune&quot; #&gt; [108] &quot;E&quot; #&gt; [109] &quot;ED&quot; #&gt; [110] &quot;eigen_aranhas&quot; #&gt; [111] &quot;eixos&quot; #&gt; [112] &quot;eixos_cat&quot; #&gt; [113] &quot;eixos_cont&quot; #&gt; [114] &quot;eixos_mist&quot; #&gt; [115] &quot;env&quot; #&gt; [116] &quot;env_cont&quot; #&gt; [117] &quot;env.contin&quot; #&gt; [118] &quot;env.dist&quot; #&gt; [119] &quot;env.mite.pco&quot; #&gt; [120] &quot;env.pad&quot; #&gt; [121] &quot;env.pad.cat&quot; #&gt; [122] &quot;env.pca&quot; #&gt; [123] &quot;env.sel&quot; #&gt; [124] &quot;env2&quot; #&gt; [125] &quot;EP&quot; #&gt; [126] &quot;EP2&quot; #&gt; [127] &quot;especies_plantas&quot; #&gt; [128] &quot;espher_model&quot; #&gt; [129] &quot;est_ace&quot; #&gt; [130] &quot;est_boot&quot; #&gt; [131] &quot;est_chao1&quot; #&gt; [132] &quot;est_chao2&quot; #&gt; [133] &quot;est_jack1&quot; #&gt; [134] &quot;est_jack2&quot; #&gt; [135] &quot;euclid_dis&quot; #&gt; [136] &quot;expon_model&quot; #&gt; [137] &quot;fator&quot; #&gt; [138] &quot;fator_nominal&quot; #&gt; [139] &quot;fator_ordinal&quot; #&gt; [140] &quot;FD&quot; #&gt; [141] &quot;fdis&quot; #&gt; [142] &quot;fdiv&quot; #&gt; [143] &quot;feve&quot; #&gt; [144] &quot;filho_intervalo&quot; #&gt; [145] &quot;filho_nascimento&quot; #&gt; [146] &quot;filogenia_aves&quot; #&gt; [147] &quot;filogenia_cortada&quot; #&gt; [148] &quot;filogenia_nova&quot; #&gt; [149] &quot;fish&quot; #&gt; [150] &quot;fitofis&quot; #&gt; [151] &quot;flo&quot; #&gt; [152] &quot;fric&quot; #&gt; [153] &quot;fun_beta&quot; #&gt; [154] &quot;fun_beta_multi&quot; #&gt; [155] &quot;fun_jaccard&quot; #&gt; [156] &quot;fun_nestedness&quot; #&gt; [157] &quot;fun_turnover&quot; #&gt; [158] &quot;g_acari_axi1&quot; #&gt; [159] &quot;g_acari_axi2&quot; #&gt; [160] &quot;g_bar_h&quot; #&gt; [161] &quot;g_bar_v&quot; #&gt; [162] &quot;g_donut&quot; #&gt; [163] &quot;g_pie&quot; #&gt; [164] &quot;g1&quot; #&gt; [165] &quot;gauss_model&quot; #&gt; [166] &quot;geo_anfibios_especies&quot; #&gt; [167] &quot;geo_anfibios_especies_locais_vetor&quot; #&gt; [168] &quot;geo_anfibios_especies_locais_vetor_mata_atlantica&quot; #&gt; [169] &quot;geo_anfibios_especies_locais_vetor_mata_atlantica_buffer10km&quot; #&gt; [170] &quot;geo_anfibios_locais&quot; #&gt; [171] &quot;geo_anfibios_locais_bioclim_cor&quot; #&gt; [172] &quot;geo_anfibios_locais_especies_vetor_bioclim&quot; #&gt; [173] &quot;geo_anfibios_locais_especies_vetor_bioclim_hb&quot; #&gt; [174] &quot;geo_anfibios_locais_especies_vetor_bioclim_hb_cor&quot; #&gt; [175] &quot;geo_anfibios_locais_vetor&quot; #&gt; [176] &quot;geo_anfibios_locais_vetor_bioclim&quot; #&gt; [177] &quot;geo_anfibios_locais_vetor_ma_buffer10km_ext&quot; #&gt; [178] &quot;geo_anfibios_locais_vetor_ma_buffer10km_ext_join&quot; #&gt; [179] &quot;geo_raster_bioclim&quot; #&gt; [180] &quot;geo_raster_bioclim_bio01&quot; #&gt; [181] &quot;geo_raster_bioclim_mata_atlantica&quot; #&gt; [182] &quot;geo_raster_bioclim_moll&quot; #&gt; [183] &quot;geo_raster_bioclim_rc&quot; #&gt; [184] &quot;geo_raster_globcover&quot; #&gt; [185] &quot;geo_raster_globcover_mata_atlantica&quot; #&gt; [186] &quot;geo_raster_srtm&quot; #&gt; [187] &quot;geo_raster_srtm_rio_claro&quot; #&gt; [188] &quot;geo_raster_srtm_rio_claro_abaixo_500&quot; #&gt; [189] &quot;geo_raster_srtm_rio_claro_acima_600&quot; #&gt; [190] &quot;geo_raster_srtm_rio_claro_asp&quot; #&gt; [191] &quot;geo_raster_srtm_rio_claro_crop&quot; #&gt; [192] &quot;geo_raster_srtm_rio_claro_crop_mask&quot; #&gt; [193] &quot;geo_raster_srtm_rio_claro_crop_mask_inv&quot; #&gt; [194] &quot;geo_raster_srtm_rio_claro_dados&quot; #&gt; [195] &quot;geo_raster_srtm_rio_claro_desg_bil&quot; #&gt; [196] &quot;geo_raster_srtm_rio_claro_focal_sd&quot; #&gt; [197] &quot;geo_raster_srtm_rio_claro_global_dist&quot; #&gt; [198] &quot;geo_raster_srtm_rio_claro_log10&quot; #&gt; [199] &quot;geo_raster_srtm_rio_claro_mask&quot; #&gt; [200] &quot;geo_raster_srtm_rio_claro_prod&quot; #&gt; [201] &quot;geo_raster_srtm_rio_claro_rcl&quot; #&gt; [202] &quot;geo_raster_srtm_rio_claro_sirgas2000_utm23s&quot; #&gt; [203] &quot;geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media&quot; #&gt; [204] &quot;geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media_linhas&quot; #&gt; [205] &quot;geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media_pontos&quot; #&gt; [206] &quot;geo_raster_srtm_rio_claro_zonal&quot; #&gt; [207] &quot;geo_raster_srtm_rio_claro2&quot; #&gt; [208] &quot;geo_vetor_am_sul&quot; #&gt; [209] &quot;geo_vetor_biomas&quot; #&gt; [210] &quot;geo_vetor_brasil&quot; #&gt; [211] &quot;geo_vetor_brasil_anos&quot; #&gt; [212] &quot;geo_vetor_cobertura&quot; #&gt; [213] &quot;geo_vetor_cobertura_area&quot; #&gt; [214] &quot;geo_vetor_cobertura_classes&quot; #&gt; [215] &quot;geo_vetor_cobertura_cob_col_area&quot; #&gt; [216] &quot;geo_vetor_cobertura_floresta&quot; #&gt; [217] &quot;geo_vetor_cobertura_floresta_polygon&quot; #&gt; [218] &quot;geo_vetor_cobertura_nas_agre&quot; #&gt; [219] &quot;geo_vetor_cobertura_rasterizacao&quot; #&gt; [220] &quot;geo_vetor_cobertura_rasterizacao_poligonos&quot; #&gt; [221] &quot;geo_vetor_cobertura_rasterizacao_poligonos_dissolvidos&quot; #&gt; [222] &quot;geo_vetor_hidrografia&quot; #&gt; [223] &quot;geo_vetor_hidrografia_comp&quot; #&gt; [224] &quot;geo_vetor_hidrografia_diferenca&quot; #&gt; [225] &quot;geo_vetor_hidrografia_interseccao&quot; #&gt; [226] &quot;geo_vetor_hidrografia_rasterizacao&quot; #&gt; [227] &quot;geo_vetor_hidrografia_simplificado&quot; #&gt; [228] &quot;geo_vetor_mata_atlantica&quot; #&gt; [229] &quot;geo_vetor_mata_atlantica_hex&quot; #&gt; [230] &quot;geo_vetor_mata_atlantica_hex_especies&quot; #&gt; [231] &quot;geo_vetor_mata_atlantica_hex_especies_oco_riq&quot; #&gt; [232] &quot;geo_vetor_mata_atlantica_hex_total&quot; #&gt; [233] &quot;geo_vetor_nascentes&quot; #&gt; [234] &quot;geo_vetor_nascentes_cob_jun&quot; #&gt; [235] &quot;geo_vetor_nascentes_dist_flo&quot; #&gt; [236] &quot;geo_vetor_nascentes_ele&quot; #&gt; [237] &quot;geo_vetor_nascentes_floresta_ext&quot; #&gt; [238] &quot;geo_vetor_nascentes_floresta_int&quot; #&gt; [239] &quot;geo_vetor_nascentes_n&quot; #&gt; [240] &quot;geo_vetor_nascentes_rasterizacao&quot; #&gt; [241] &quot;geo_vetor_rio_claro&quot; #&gt; [242] &quot;geo_vetor_rio_claro_sirgas2000_utm23s&quot; #&gt; [243] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_cent&quot; #&gt; [244] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_convexo&quot; #&gt; [245] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_grid&quot; #&gt; [246] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_grid_cent&quot; #&gt; [247] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_hex&quot; #&gt; [248] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_hex_alt&quot; #&gt; [249] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_hex_cent&quot; #&gt; [250] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios&quot; #&gt; [251] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer&quot; #&gt; [252] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_quad&quot; #&gt; [253] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao&quot; #&gt; [254] &quot;geo_vetor_rio_claro_sirgas2000_utm23s_voronoi&quot; #&gt; [255] &quot;geo_vetor_rio_claro_tab&quot; #&gt; [256] &quot;grp.int&quot; #&gt; [257] &quot;grp.mon&quot; #&gt; [258] &quot;grp.pla&quot; #&gt; [259] &quot;hill_res_q_0&quot; #&gt; [260] &quot;hill_res_q_1&quot; #&gt; [261] &quot;hill_res_q_2&quot; #&gt; [262] &quot;hull.data&quot; #&gt; [263] &quot;hur_NB&quot; #&gt; [264] &quot;i&quot; #&gt; [265] &quot;ind_env&quot; #&gt; [266] &quot;intror_anfibios_locais&quot; #&gt; [267] &quot;itv_biomass&quot; #&gt; [268] &quot;itv_BS&quot; #&gt; [269] &quot;itv_eye_size&quot; #&gt; [270] &quot;itv_flatness&quot; #&gt; [271] &quot;itv_results&quot; #&gt; [272] &quot;k&quot; #&gt; [273] &quot;ktab_list&quot; #&gt; [274] &quot;li&quot; #&gt; [275] &quot;lista&quot; #&gt; [276] &quot;lista_nome&quot; #&gt; [277] &quot;lista_rarefacao&quot; #&gt; [278] &quot;lm_dat&quot; #&gt; [279] &quot;ma&quot; #&gt; [280] &quot;ma_cbind&quot; #&gt; [281] &quot;ma_col&quot; #&gt; [282] &quot;ma_rbind&quot; #&gt; [283] &quot;ma_row&quot; #&gt; [284] &quot;mapa_am_sul&quot; #&gt; [285] &quot;mapa_brasil_tmap&quot; #&gt; [286] &quot;mapa_oco&quot; #&gt; [287] &quot;mapa_pa_pred_cont&quot; #&gt; [288] &quot;mapa_pa_pred_corte&quot; #&gt; [289] &quot;mapa_pred_riq_nb&quot; #&gt; [290] &quot;mapa_pred_riq_pois&quot; #&gt; [291] &quot;mapa_riq&quot; #&gt; [292] &quot;mapa_srtm_rio_claro_ggplot2&quot; #&gt; [293] &quot;mapa_srtm_rio_claro_leaflet_int&quot; #&gt; [294] &quot;mapa_srtm_rio_claro_mapview_int&quot; #&gt; [295] &quot;mapa_srtm_rio_claro_tmap&quot; #&gt; [296] &quot;mapa_srtm_rio_claro_tmap_int&quot; #&gt; [297] &quot;mapa_vetor_biomas_ggplot2&quot; #&gt; [298] &quot;mapa_vetor_biomas_tmap&quot; #&gt; [299] &quot;Margalef&quot; #&gt; [300] &quot;mat_knn&quot; #&gt; [301] &quot;mat_listw&quot; #&gt; [302] &quot;mat_nb&quot; #&gt; [303] &quot;matriz_cov&quot; #&gt; [304] &quot;matriz_F&quot; #&gt; [305] &quot;Megascops&quot; #&gt; [306] &quot;MEM_mat&quot; #&gt; [307] &quot;Menhinick&quot; #&gt; [308] &quot;metricas&quot; #&gt; [309] &quot;metricas_divergencia&quot; #&gt; [310] &quot;metricas_divergencia_beta&quot; #&gt; [311] &quot;metricas_riqueza&quot; #&gt; [312] &quot;metricas_riqueza_beta&quot; #&gt; [313] &quot;MidPoint&quot; #&gt; [314] &quot;minha_arvore&quot; #&gt; [315] &quot;mite&quot; #&gt; [316] &quot;mite.env&quot; #&gt; [317] &quot;mite.hel&quot; #&gt; [318] &quot;mite.riqueza&quot; #&gt; [319] &quot;mite.xy&quot; #&gt; [320] &quot;MNTD_AB_plot&quot; #&gt; [321] &quot;MNTD_AP_plot&quot; #&gt; [322] &quot;mod_biomass&quot; #&gt; [323] &quot;mod_body_size&quot; #&gt; [324] &quot;mod_eye_size&quot; #&gt; [325] &quot;mod_flatness&quot; #&gt; [326] &quot;mod_itv&quot; #&gt; [327] &quot;mod_log&quot; #&gt; [328] &quot;mod_nb&quot; #&gt; [329] &quot;mod_pois&quot; #&gt; [330] &quot;mod_pro&quot; #&gt; [331] &quot;mod_quasipois&quot; #&gt; [332] &quot;mod.mite&quot; #&gt; [333] &quot;mod1&quot; #&gt; [334] &quot;mod2&quot; #&gt; [335] &quot;mod3&quot; #&gt; [336] &quot;model_bloco1&quot; #&gt; [337] &quot;model_bloco2&quot; #&gt; [338] &quot;modelo_ancova&quot; #&gt; [339] &quot;modelo_ancova2&quot; #&gt; [340] &quot;Modelo_anova&quot; #&gt; [341] &quot;modelo_errado&quot; #&gt; [342] &quot;Modelo_interacao1&quot; #&gt; [343] &quot;Modelo_interacao2&quot; #&gt; [344] &quot;modelo_intercepto&quot; #&gt; [345] &quot;modelo_pa&quot; #&gt; [346] &quot;modelo_pa_pred&quot; #&gt; [347] &quot;modelo_pa_pred_corte&quot; #&gt; [348] &quot;modelo_regressao&quot; #&gt; [349] &quot;modelo_regressao_mul&quot; #&gt; [350] &quot;modelo_riq_nb&quot; #&gt; [351] &quot;modelo_riq_nb_pred&quot; #&gt; [352] &quot;modelo_riq_pois&quot; #&gt; [353] &quot;modelo_riq_pois_pred&quot; #&gt; [354] &quot;Modelo1&quot; #&gt; [355] &quot;Modelo2&quot; #&gt; [356] &quot;modelos_nulo&quot; #&gt; [357] &quot;moran.comp&quot; #&gt; [358] &quot;moran.env&quot; #&gt; [359] &quot;MPD_AB_plot&quot; #&gt; [360] &quot;MPD_PA_plot&quot; #&gt; [361] &quot;mu&quot; #&gt; [362] &quot;multi&quot; #&gt; [363] &quot;n&quot; #&gt; [364] &quot;nmds.beta&quot; #&gt; [365] &quot;no_spat_gls&quot; #&gt; [366] &quot;novas_filogenias&quot; #&gt; [367] &quot;nulo&quot; #&gt; [368] &quot;obj&quot; #&gt; [369] &quot;obj_10&quot; #&gt; [370] &quot;obj_caracter&quot; #&gt; [371] &quot;obj_complexo&quot; #&gt; [372] &quot;obj_logico&quot; #&gt; [373] &quot;obj_numerico_double&quot; #&gt; [374] &quot;obj_numerico_inteiro&quot; #&gt; [375] &quot;old_par&quot; #&gt; [376] &quot;op&quot; #&gt; [377] &quot;p_1&quot; #&gt; [378] &quot;p_2&quot; #&gt; [379] &quot;p_3&quot; #&gt; [380] &quot;p1&quot; #&gt; [381] &quot;p2&quot; #&gt; [382] &quot;pal&quot; #&gt; [383] &quot;parasitas&quot; #&gt; [384] &quot;Pareado&quot; #&gt; [385] &quot;particao_phylosor&quot; #&gt; [386] &quot;pca.comp&quot; #&gt; [387] &quot;pca.p&quot; #&gt; [388] &quot;pcoa_traits_cat&quot; #&gt; [389] &quot;pcoa_traits_cont&quot; #&gt; [390] &quot;pcoa_traits_mist&quot; #&gt; [391] &quot;pcoa.dat&quot; #&gt; [392] &quot;pcoa.sps&quot; #&gt; [393] &quot;PD_plot&quot; #&gt; [394] &quot;PE_plot&quot; #&gt; [395] &quot;penguin_islands&quot; #&gt; [396] &quot;penguins&quot; #&gt; [397] &quot;penguins_01&quot; #&gt; [398] &quot;penguins_02&quot; #&gt; [399] &quot;penguins_arrange&quot; #&gt; [400] &quot;penguins_arrange_across&quot; #&gt; [401] &quot;penguins_arrange_desc&quot; #&gt; [402] &quot;penguins_arrange_desc_m&quot; #&gt; [403] &quot;penguins_bind_cols&quot; #&gt; [404] &quot;penguins_bind_rows&quot; #&gt; [405] &quot;penguins_count&quot; #&gt; [406] &quot;penguins_count_two&quot; #&gt; [407] &quot;penguins_distinct&quot; #&gt; [408] &quot;penguins_distinct_keep_all&quot; #&gt; [409] &quot;penguins_distinct_keep_all_across&quot; #&gt; [410] &quot;penguins_filter&quot; #&gt; [411] &quot;penguins_filter_between&quot; #&gt; [412] &quot;penguins_filter_if&quot; #&gt; [413] &quot;penguins_filter_in&quot; #&gt; [414] &quot;penguins_filter_na&quot; #&gt; [415] &quot;penguins_filter_two&quot; #&gt; [416] &quot;penguins_group_by&quot; #&gt; [417] &quot;penguins_group_by_across&quot; #&gt; [418] &quot;penguins_left_join&quot; #&gt; [419] &quot;penguins_media&quot; #&gt; [420] &quot;penguins_mutate&quot; #&gt; [421] &quot;penguins_mutate_across&quot; #&gt; [422] &quot;penguins_pad&quot; #&gt; [423] &quot;penguins_prop&quot; #&gt; [424] &quot;penguins_raw_colunas_na&quot; #&gt; [425] &quot;penguins_raw_multi_factor&quot; #&gt; [426] &quot;penguins_raw_pivot_longer&quot; #&gt; [427] &quot;penguins_raw_pivot_wider&quot; #&gt; [428] &quot;penguins_raw_sel_col&quot; #&gt; [429] &quot;penguins_raw_separar&quot; #&gt; [430] &quot;penguins_raw_separar_linhas&quot; #&gt; [431] &quot;penguins_raw_subs_na&quot; #&gt; [432] &quot;penguins_raw_todas_na&quot; #&gt; [433] &quot;penguins_raw_unir&quot; #&gt; [434] &quot;penguins_relocate_col&quot; #&gt; [435] &quot;penguins_relocate_ncol&quot; #&gt; [436] &quot;penguins_rename&quot; #&gt; [437] &quot;penguins_rename_with&quot; #&gt; [438] &quot;penguins_select_contains&quot; #&gt; [439] &quot;penguins_select_names&quot; #&gt; [440] &quot;penguins_select_position&quot; #&gt; [441] &quot;penguins_select_pull&quot; #&gt; [442] &quot;penguins_slice&quot; #&gt; [443] &quot;penguins_slice_head&quot; #&gt; [444] &quot;penguins_slice_max&quot; #&gt; [445] &quot;penguins_slice_sample&quot; #&gt; [446] &quot;penguins_stringr_nomes&quot; #&gt; [447] &quot;penguins_stringr_valores&quot; #&gt; [448] &quot;penguins_summarise&quot; #&gt; [449] &quot;penguins_summarise_across&quot; #&gt; [450] &quot;penguins_trait&quot; #&gt; [451] &quot;perm.aves&quot; #&gt; [452] &quot;perman_fren&quot; #&gt; [453] &quot;Pielou&quot; #&gt; [454] &quot;plot_betapart&quot; #&gt; [455] &quot;plot_phylosor&quot; #&gt; [456] &quot;plot_pred1&quot; #&gt; [457] &quot;plot_pred2&quot; #&gt; [458] &quot;plot_trait_cat&quot; #&gt; [459] &quot;plot_trait_cont&quot; #&gt; [460] &quot;plot_trait_mist&quot; #&gt; [461] &quot;plot_unifrac&quot; #&gt; [462] &quot;pois_plain&quot; #&gt; [463] &quot;polys&quot; #&gt; [464] &quot;prec_dis&quot; #&gt; [465] &quot;precipitacao&quot; #&gt; [466] &quot;pred.env&quot; #&gt; [467] &quot;pred.scores.mite&quot; #&gt; [468] &quot;pred.vars&quot; #&gt; [469] &quot;predito&quot; #&gt; [470] &quot;predito_ext&quot; #&gt; [471] &quot;PSR_plot&quot; #&gt; [472] &quot;pv.birds&quot; #&gt; [473] &quot;r_hoje&quot; #&gt; [474] &quot;r_inicio&quot; #&gt; [475] &quot;r_intervalo&quot; #&gt; [476] &quot;r_quadr&quot; #&gt; [477] &quot;rank_com2&quot; #&gt; [478] &quot;rank_com3&quot; #&gt; [479] &quot;rarefacao_anuros&quot; #&gt; [480] &quot;rarefacao_repteis&quot; #&gt; [481] &quot;raster_brick&quot; #&gt; [482] &quot;raster_layer&quot; #&gt; [483] &quot;raster_layer1&quot; #&gt; [484] &quot;raster_layer2&quot; #&gt; [485] &quot;raster_layer3&quot; #&gt; [486] &quot;raster_layer4&quot; #&gt; [487] &quot;raster_stack&quot; #&gt; [488] &quot;ratio_model&quot; #&gt; [489] &quot;rcl&quot; #&gt; [490] &quot;rda.bird&quot; #&gt; [491] &quot;rda.p&quot; #&gt; [492] &quot;redmale&quot; #&gt; [493] &quot;relAbund&quot; #&gt; [494] &quot;rep_times&quot; #&gt; [495] &quot;rep_times_soma&quot; #&gt; [496] &quot;rep_times_soma_raiz&quot; #&gt; [497] &quot;repeticao&quot; #&gt; [498] &quot;res_ace&quot; #&gt; [499] &quot;res_boot&quot; #&gt; [500] &quot;res_chao&quot; #&gt; [501] &quot;res_chao2&quot; #&gt; [502] &quot;res_hill&quot; #&gt; [503] &quot;res_indval&quot; #&gt; [504] &quot;res_jack1&quot; #&gt; [505] &quot;res_jack2&quot; #&gt; [506] &quot;res_rarefacao_amostras&quot; #&gt; [507] &quot;res.axis&quot; #&gt; [508] &quot;res.p.axis&quot; #&gt; [509] &quot;res.p.var&quot; #&gt; [510] &quot;res.var&quot; #&gt; [511] &quot;residuos&quot; #&gt; [512] &quot;residuos_LP&quot; #&gt; [513] &quot;resultado_AB&quot; #&gt; [514] &quot;resultado_PA&quot; #&gt; [515] &quot;resultados&quot; #&gt; [516] &quot;resultados_abundancia&quot; #&gt; [517] &quot;resultados_ace&quot; #&gt; [518] &quot;resultados_anuros&quot; #&gt; [519] &quot;resultados_boot&quot; #&gt; [520] &quot;resultados_chao2&quot; #&gt; [521] &quot;resultados_Comdist_AB&quot; #&gt; [522] &quot;resultados_Comdist_PA&quot; #&gt; [523] &quot;resultados_Comdistnt_AB&quot; #&gt; [524] &quot;resultados_Comdistnt_PA&quot; #&gt; [525] &quot;resultados_comunidades&quot; #&gt; [526] &quot;resultados_comunidades_ext&quot; #&gt; [527] &quot;resultados_ED&quot; #&gt; [528] &quot;resultados_extrapolacao&quot; #&gt; [529] &quot;resultados_incidencia&quot; #&gt; [530] &quot;resultados_jack1&quot; #&gt; [531] &quot;resultados_jack2&quot; #&gt; [532] &quot;resultados_MNTD_AB&quot; #&gt; [533] &quot;resultados_MNTD_PA&quot; #&gt; [534] &quot;resultados_morcegos&quot; #&gt; [535] &quot;resultados_MPD_AB&quot; #&gt; [536] &quot;resultados_MPD_PA&quot; #&gt; [537] &quot;resultados_PD&quot; #&gt; [538] &quot;resultados_PE&quot; #&gt; [539] &quot;resultados_Phylosor&quot; #&gt; [540] &quot;resultados_Phylosor_particao&quot; #&gt; [541] &quot;resultados_PSR&quot; #&gt; [542] &quot;resultados_PSV&quot; #&gt; [543] &quot;resultados_rarefacao&quot; #&gt; [544] &quot;resultados_repteis&quot; #&gt; [545] &quot;resultados_SES_MNTD&quot; #&gt; [546] &quot;resultados_SES_MPD&quot; #&gt; [547] &quot;resultados_SES_PD&quot; #&gt; [548] &quot;resultados_UniFrac&quot; #&gt; [549] &quot;resultados_UniFrac_particao&quot; #&gt; [550] &quot;resultados_VPD&quot; #&gt; [551] &quot;richness&quot; #&gt; [552] &quot;riqueza&quot; #&gt; [553] &quot;riqueza_extrapolada&quot; #&gt; [554] &quot;Riqueza_plot&quot; #&gt; [555] &quot;riqueza_rarefeita&quot; #&gt; [556] &quot;riqueza_sp&quot; #&gt; [557] &quot;sel.vars&quot; #&gt; [558] &quot;sequencia&quot; #&gt; [559] &quot;sequencia_esp&quot; #&gt; [560] &quot;ses.physo&quot; #&gt; [561] &quot;shannon_res&quot; #&gt; [562] &quot;simpson_res&quot; #&gt; [563] &quot;simulationBion&quot; #&gt; [564] &quot;simulationOutput&quot; #&gt; [565] &quot;small_ras&quot; #&gt; [566] &quot;small_ras_val&quot; #&gt; [567] &quot;sol1&quot; #&gt; [568] &quot;sorensen_plot&quot; #&gt; [569] &quot;sp&quot; #&gt; [570] &quot;sp_compos&quot; #&gt; [571] &quot;spatial.pred&quot; #&gt; [572] &quot;spe&quot; #&gt; [573] &quot;spe.KM.cascade&quot; #&gt; [574] &quot;spe.kmeans&quot; #&gt; [575] &quot;spe.norm&quot; #&gt; [576] &quot;species&quot; #&gt; [577] &quot;species.hel&quot; #&gt; [578] &quot;spNames&quot; #&gt; [579] &quot;sps.dis&quot; #&gt; [580] &quot;spVector&quot; #&gt; [581] &quot;Strix&quot; #&gt; [582] &quot;subst_plot&quot; #&gt; [583] &quot;tab_indval&quot; #&gt; [584] &quot;tempo_estudando_r&quot; #&gt; [585] &quot;tempo_estudando_r_dur&quot; #&gt; [586] &quot;theme_book&quot; #&gt; [587] &quot;tidy_anfibios_locais&quot; #&gt; [588] &quot;trait_baselga&quot; #&gt; [589] &quot;trait_cat&quot; #&gt; [590] &quot;trait_categ&quot; #&gt; [591] &quot;trait_dat&quot; #&gt; [592] &quot;trait_decomp&quot; #&gt; [593] &quot;trait_fren_dat&quot; #&gt; [594] &quot;trait_m&quot; #&gt; [595] &quot;trait_ord&quot; #&gt; [596] &quot;trait_pad&quot; #&gt; [597] &quot;traits&quot; #&gt; [598] &quot;traitsVector&quot; #&gt; [599] &quot;tree_dend&quot; #&gt; [600] &quot;va1&quot; #&gt; [601] &quot;va2&quot; #&gt; [602] &quot;valores&quot; #&gt; [603] &quot;var_env&quot; #&gt; [604] &quot;ve&quot; #&gt; [605] &quot;vec_1&quot; #&gt; [606] &quot;vec_2&quot; #&gt; [607] &quot;vec_ch&quot; #&gt; [608] &quot;vec_fa&quot; #&gt; [609] &quot;vec_nu&quot; #&gt; [610] &quot;W_sel_mat&quot; #&gt; [611] &quot;wITVResults&quot; #&gt; [612] &quot;world&quot; #&gt; [613] &quot;x&quot; #&gt; [614] &quot;xy&quot; #&gt; [615] &quot;y&quot; #&gt; [616] &quot;z&quot; #&gt; [617] &quot;ziNB_mod2&quot; #&gt; [618] &quot;ziP_mod2&quot; Podemos ainda remover todos os objetos criados com a função rm() ou remove(). Ou ainda fazer uma função composta para remover todos os objetos do Environment. ## Remover um objeto rm(adi) ## Remover todos os objetos criados rm(list = ls()) Quando usamos a função ls() agora, nenhum objeto é listado. ## Listar todos os objetos ls() #&gt; character(0) Toda a vez que fechamos o R os objetos criados são apagados do Environment. Dessa forma, em algumas ocasiões, por exemplo, análises estatísticas que demoram um grande tempo para serem realizadas, pode ser interessante exportar alguns ou todos os objetos criados. Para salvar todos os objetos, ou seja, todo o Workspace, podemos ir em Session -&gt; Save Workspace As... e escolher o nome do arquivo do Workspace, por exemplo, “meu_workspace.RData.” Podemos ainda utilizar funções para essas tarefas. A função save.image() salva todo Workspace com a extensão .RData. ## Salvar todo o workspace save.image(file = &quot;meu_workspace.RData&quot;) Depois disso, podemos fechar o RStudio tranquilamente e quando formos trabalhar novamente, podemos carregar os objetos criados indo em Session -&gt; Load Workspace... ou utilizando a função load(). ## Carregar todo o workspace load(&quot;meu_workspace.RData&quot;) Entretanto, em algumas ocasiões, não precisamos salvar todos os objetos. Dessa forma, podemos salvar apenas alguns objetos específicos usando a função save(), também com a extensão .RData. ## Salvar apenas um objeto save(obj1, file = &quot;meu_obj.RData&quot;) ## Salvar apenas um objeto save(obj1, obj2, file = &quot;meus_objs.RData&quot;) ## Carregar os objetos load(&quot;meus_objs.RData&quot;) Ou ainda podemos salvar apenas um objeto com a extensão .rds. Para isso, usamos as funções saveRDS() e readRDS(), para exportar e importar esses dados, respectivamente. É importante ressaltar que nesse formato .rds, para que o objeto seja criado no Workspace, ele precisa ser atribuído. ## Salvar um objeto para um arquivo saveRDS(obj, file = &quot;meu_obj.rds&quot;) ## Carregar esse objeto obj &lt;- readRDS(file = &quot;meu_obj.rds&quot;) 4.3.9 Citações Ao utilizar o R para realizar alguma análise em nossos estudos, é fundamental a citação do mesmo. Para saber como citar o R em artigos, existe uma função denominada citation(), que provê um formato genérico de citação e um BibTeX para arquivos LaTeX e R Markdown. ## Citação do R citation() #&gt; #&gt; To cite R in publications use: #&gt; #&gt; R Core Team (2021). R: A language and environment for statistical computing. R Foundation for #&gt; Statistical Computing, Vienna, Austria. URL https://www.R-project.org/. #&gt; #&gt; A BibTeX entry for LaTeX users is #&gt; #&gt; @Manual{, #&gt; title = {R: A Language and Environment for Statistical Computing}, #&gt; author = {{R Core Team}}, #&gt; organization = {R Foundation for Statistical Computing}, #&gt; address = {Vienna, Austria}, #&gt; year = {2021}, #&gt; url = {https://www.R-project.org/}, #&gt; } #&gt; #&gt; We have invested a lot of time and effort in creating R, please cite it when using it for data #&gt; analysis. See also &#39;citation(&quot;pkgname&quot;)&#39; for citing R packages. No resultado dessa função, há uma mensagem muito interessante: “See also ‘citation(“pkgname”)’ for citing R packages.” Dessa forma, aconselhamos citar também os pacotes utilizados nas análises para dar os devidos créditos aos desenvolvedores e desenvolvedoras das funções implementadas nos pacotes. Como exemplo, vamos ver como fica a citação do pacote vegan. ## Citação do pacote vegan citation(&quot;vegan&quot;) #&gt; #&gt; To cite package &#39;vegan&#39; in publications use: #&gt; #&gt; Jari Oksanen, F. Guillaume Blanchet, Michael Friendly, Roeland Kindt, Pierre Legendre, Dan McGlinn, #&gt; Peter R. Minchin, R. B. O&#39;Hara, Gavin L. Simpson, Peter Solymos, M. Henry H. Stevens, Eduard Szoecs #&gt; and Helene Wagner (2020). vegan: Community Ecology Package. R package version 2.5-7. #&gt; https://CRAN.R-project.org/package=vegan #&gt; #&gt; A BibTeX entry for LaTeX users is #&gt; #&gt; @Manual{, #&gt; title = {vegan: Community Ecology Package}, #&gt; author = {Jari Oksanen and F. Guillaume Blanchet and Michael Friendly and Roeland Kindt and Pierre Legendre and Dan McGlinn and Peter R. Minchin and R. B. O&#39;Hara and Gavin L. Simpson and Peter Solymos and M. Henry H. Stevens and Eduard Szoecs and Helene Wagner}, #&gt; year = {2020}, #&gt; note = {R package version 2.5-7}, #&gt; url = {https://CRAN.R-project.org/package=vegan}, #&gt; } #&gt; #&gt; ATTENTION: This citation information has been auto-generated from the package DESCRIPTION file and #&gt; may need manual editing, see &#39;help(&quot;citation&quot;)&#39;. Podemos ainda utilizar a função write_bib() do pacote knitr para exportar a citação do pacote no formato .bib. ## Exportar uma citação em formato .bib knitr::write_bib(&quot;vegan&quot;, file = &quot;vegan_ex.bib&quot;) 4.3.10 Principais erros de iniciantes Errar quando está começando a usar o R é muito comum e faz parte do aprendizado. Entretanto, os erros nunca devem ser encarados como uma forma de desestímulo, mas sim devem ser encarados como um desafio para continuar tentando. Todos nós, autores desse livro, e provavelmente usuários mais ou menos experientes, já passaram por um momento em que se quer desistir de tudo. Jovem aprendiz de R, a única diferença entre você que está iniciando agora e nós que usamos há mais tempo são as horas a mais de uso (e ódio). O que temos a mais é experiência para olhar o erro, lê-lo e conseguir interpretar o que está errado e saber buscar ajuda. Dessa forma, o ponto mais importante de quem está iniciando é ter paciência, calma, bom humor, ler e entender as mensagens de erros. Recomendamos uma prática que pode ajudar: caso não esteja conseguindo resolver alguma parte do seu código, deixe ele de lado um tempo, descance, faça uma caminhada, tome um banho, converse com seus animais de estimação ou plantas, tenha um pato de borracha ou outro objeto inanimado (eu tenho um sapo de madeira), explique esse código para esse pato, logo a solução deve aparecer. Listaremos aqui o que consideramos os principais erros dos iniciantes no R. 1. Esquecer de completar uma função ou bloco de códigos Esquecer de completar uma função ou bloco de códigos é algo bem comum. Geralmente esquecemos de fechar aspas \"\" ou parênteses (), mas geralmente o R nos informa isso, indicando um símbolo de + no console. sum(1, 2 + #&gt; Error: &lt;text&gt;:3:0: unexpected end of input #&gt; 1: sum(1, 2 #&gt; 2: + #&gt; ^ 2. Esquecer de vírgulas dentro de funções Outro erro bastante comum é esquecer de acrescentar a vírgula , para separar argumentos dentro de uma função, principalmente se estamos compondo várias funções acopladas, i.e., uma função dentro da outra. sum(1 2) #&gt; Error: &lt;text&gt;:1:7: unexpected numeric constant #&gt; 1: sum(1 2 #&gt; ^ 3. Chamar um objeto pelo nome errado Pode parecer simples, mas esse é de longe o erro mais comum que pessoas iniciantes comentem. Quando temos um script longo , é de se esperar que tenhamos atribuído diversos objetos e em algum momento atribuímos um nome do qual não lembramos. Dessa forma, quando chamamos o objeto ele não existe e o console informa um erro. Entretanto, esse tipo de erro pode ser facilmente identificado, como o exemplo abaixo. obj &lt;- 10 OBJ #&gt; Error in eval(expr, envir, enclos): object &#39;OBJ&#39; not found 4. Esquecer de carregar um pacote Esse também é um erro recorrente, mesmo para usuários mais experientes. Em scripts de análises complexas, que requerem vários pacotes, geralmente esquecemos de um ou outro pacote… A melhor forma de evitar esse tipo de erro é listar os pacotes que vamos precisar usar logo no início do script. ## Carregar dados data(dune) ## Função do pacote vegan decostand(dune, &quot;hell&quot;) #&gt; Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu Cirsarve Comapalu Eleopalu #&gt; 1 0.2357023 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 2 0.2672612 0.0000000 0.0000000 0.2182179 0.0000000 0.2672612 0.3086067 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 3 0.0000000 0.3162278 0.0000000 0.4183300 0.0000000 0.2236068 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 4 0.0000000 0.4216370 0.0000000 0.2108185 0.0000000 0.2108185 0.2581989 0.0000000 0.2108185 0.0000000 0.0000000 #&gt; 5 0.2156655 0.0000000 0.0000000 0.0000000 0.3049971 0.2156655 0.2156655 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 6 0.2041241 0.0000000 0.0000000 0.0000000 0.2500000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 7 0.2236068 0.0000000 0.0000000 0.0000000 0.2236068 0.0000000 0.2236068 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 8 0.0000000 0.3162278 0.0000000 0.3535534 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3162278 #&gt; 9 0.0000000 0.2672612 0.0000000 0.2672612 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 10 0.3049971 0.0000000 0.0000000 0.0000000 0.3049971 0.2156655 0.3049971 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 12 0.0000000 0.3380617 0.0000000 0.4780914 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 13 0.0000000 0.3892495 0.0000000 0.3892495 0.0000000 0.0000000 0.0000000 0.1740777 0.0000000 0.0000000 0.0000000 #&gt; 14 0.0000000 0.4082483 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2886751 0.4082483 #&gt; 15 0.0000000 0.4170288 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2948839 0.4662524 #&gt; 16 0.0000000 0.4605662 0.0000000 0.3481553 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.4923660 #&gt; 17 0.3651484 0.0000000 0.3651484 0.0000000 0.5163978 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2721655 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 19 0.0000000 0.0000000 0.3110855 0.0000000 0.3592106 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 20 0.0000000 0.4016097 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3592106 #&gt; Elymrepe Empenigr Hyporadi Juncarti Juncbufo Lolipere Planlanc Poaprat Poatriv Ranuflam Rumeacet #&gt; 1 0.4714045 0.0000000 0.0000000 0.0000000 0.0000000 0.6236096 0.0000000 0.4714045 0.3333333 0.0000000 0.0000000 #&gt; 2 0.3086067 0.0000000 0.0000000 0.0000000 0.0000000 0.3450328 0.0000000 0.3086067 0.4082483 0.0000000 0.0000000 #&gt; 3 0.3162278 0.0000000 0.0000000 0.0000000 0.0000000 0.3872983 0.0000000 0.3535534 0.3872983 0.0000000 0.0000000 #&gt; 4 0.2981424 0.0000000 0.0000000 0.0000000 0.0000000 0.3333333 0.0000000 0.2981424 0.3333333 0.0000000 0.0000000 #&gt; 5 0.3049971 0.0000000 0.0000000 0.0000000 0.0000000 0.2156655 0.3409972 0.2156655 0.3735437 0.0000000 0.3409972 #&gt; 6 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3535534 0.3227486 0.2500000 0.2886751 0.0000000 0.3535534 #&gt; 7 0.0000000 0.0000000 0.0000000 0.0000000 0.2236068 0.3872983 0.3535534 0.3162278 0.3535534 0.0000000 0.2738613 #&gt; 8 0.0000000 0.0000000 0.0000000 0.3162278 0.0000000 0.3162278 0.0000000 0.3162278 0.3162278 0.2236068 0.0000000 #&gt; 9 0.3779645 0.0000000 0.0000000 0.3086067 0.3086067 0.2182179 0.0000000 0.3086067 0.3450328 0.0000000 0.2182179 #&gt; 10 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3735437 0.2641353 0.3049971 0.3049971 0.0000000 0.0000000 #&gt; 11 0.0000000 0.0000000 0.2500000 0.0000000 0.0000000 0.4677072 0.3061862 0.3535534 0.0000000 0.0000000 0.0000000 #&gt; 12 0.0000000 0.0000000 0.0000000 0.0000000 0.3380617 0.0000000 0.0000000 0.0000000 0.3380617 0.0000000 0.2390457 #&gt; 13 0.0000000 0.0000000 0.0000000 0.0000000 0.3015113 0.0000000 0.0000000 0.2461830 0.5222330 0.2461830 0.0000000 #&gt; 14 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2886751 0.0000000 #&gt; 15 0.0000000 0.0000000 0.0000000 0.3611576 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2948839 0.0000000 #&gt; 16 0.0000000 0.0000000 0.0000000 0.3015113 0.0000000 0.0000000 0.0000000 0.0000000 0.2461830 0.2461830 0.0000000 #&gt; 17 0.0000000 0.0000000 0.3651484 0.0000000 0.0000000 0.0000000 0.3651484 0.2581989 0.0000000 0.0000000 0.0000000 #&gt; 18 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2721655 0.3333333 0.3333333 0.0000000 0.0000000 0.0000000 #&gt; 19 0.0000000 0.2540003 0.4016097 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 20 0.0000000 0.0000000 0.0000000 0.3592106 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3592106 0.0000000 #&gt; Sagiproc Salirepe Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp #&gt; 1 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 2 0.0000000 0.0000000 0.3450328 0.0000000 0.3450328 0.0000000 0.0000000 0.0000000 #&gt; 3 0.0000000 0.0000000 0.2236068 0.0000000 0.2236068 0.0000000 0.2236068 0.0000000 #&gt; 4 0.3333333 0.0000000 0.2108185 0.0000000 0.1490712 0.0000000 0.2108185 0.0000000 #&gt; 5 0.0000000 0.0000000 0.2641353 0.2156655 0.2156655 0.0000000 0.2156655 0.0000000 #&gt; 6 0.0000000 0.0000000 0.2500000 0.3227486 0.3227486 0.0000000 0.3535534 0.0000000 #&gt; 7 0.0000000 0.0000000 0.2738613 0.2236068 0.2236068 0.0000000 0.2236068 0.0000000 #&gt; 8 0.2236068 0.0000000 0.2738613 0.0000000 0.2236068 0.0000000 0.2236068 0.0000000 #&gt; 9 0.2182179 0.0000000 0.2182179 0.0000000 0.2672612 0.0000000 0.2182179 0.0000000 #&gt; 10 0.0000000 0.0000000 0.2641353 0.0000000 0.3735437 0.1524986 0.2156655 0.0000000 #&gt; 11 0.2500000 0.0000000 0.3952847 0.0000000 0.3061862 0.2500000 0.3535534 0.0000000 #&gt; 12 0.3380617 0.0000000 0.2390457 0.0000000 0.2927700 0.0000000 0.3380617 0.0000000 #&gt; 13 0.2461830 0.0000000 0.2461830 0.0000000 0.2461830 0.0000000 0.0000000 0.0000000 #&gt; 14 0.0000000 0.0000000 0.2886751 0.0000000 0.5000000 0.0000000 0.0000000 0.4082483 #&gt; 15 0.0000000 0.0000000 0.2948839 0.0000000 0.2085144 0.0000000 0.4170288 0.0000000 #&gt; 16 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.3481553 0.3015113 #&gt; 17 0.0000000 0.0000000 0.3651484 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #&gt; 18 0.0000000 0.3333333 0.4303315 0.0000000 0.2721655 0.1924501 0.4714045 0.0000000 #&gt; 19 0.3110855 0.3110855 0.4399413 0.0000000 0.2540003 0.0000000 0.3110855 0.0000000 #&gt; 20 0.0000000 0.4016097 0.2540003 0.0000000 0.0000000 0.0000000 0.3592106 0.3110855 Geralmente a mensagem de erro será de que a função não foi encontrada ou algo nesse sentido. Carregando o pacote, esse erro é contornado. ## Carregar o pacote library(vegan) ## Carregar dados data(dune) ## Função do pacote vegan decostand(dune[1:6, 1:6], &quot;hell&quot;) #&gt; Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere #&gt; 1 1.0000000 0.0000000 0 0.0000000 0.0000000 0.0000000 #&gt; 2 0.6123724 0.0000000 0 0.5000000 0.0000000 0.6123724 #&gt; 3 0.0000000 0.5547002 0 0.7337994 0.0000000 0.3922323 #&gt; 4 0.0000000 0.8164966 0 0.4082483 0.0000000 0.4082483 #&gt; 5 0.5000000 0.0000000 0 0.0000000 0.7071068 0.5000000 #&gt; 6 0.6324555 0.0000000 0 0.0000000 0.7745967 0.0000000 5. Usar o nome da função de forma errônea Esse erro não é tão comum, mas pode ser incômodo às vezes. Algumas funções possuem nomes no padrão “Camel Case,” i.e., com letras maiúsculas no meio do nome da função. Isso às vezes pode confundir, ou ainda, as funções podem ou não ser separadas com ., como row.names() e rownames(). No Capítulo de tidyverse 5, veremos que houve uma tentativa de padronização nos nomes das funções para “Snake Case,” i.e, todas as funções possuem letras minúsculas, com palavras separadas por underscore _. ## Soma das colunas colsums(dune) #&gt; Error in colsums(dune): could not find function &quot;colsums&quot; ## Soma das colunas colSums(dune) #&gt; Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu Cirsarve Comapalu Eleopalu Elymrepe #&gt; 16 48 5 36 21 13 15 1 2 4 25 26 #&gt; Empenigr Hyporadi Juncarti Juncbufo Lolipere Planlanc Poaprat Poatriv Ranuflam Rumeacet Sagiproc Salirepe #&gt; 2 9 18 13 58 26 48 63 14 18 20 11 #&gt; Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp #&gt; 54 9 47 4 49 10 6. Atentar para o diretório correto Muitas vezes o erro é simplesmente porque o usuário(a) não definiu o diretório correto onde está o arquivo a ser importado ou exportado. Por isso é fundamental sempre verificar se o diretório foi definido corretamente, geralmente usando as funções dir() ou list.files() para listar no console a lista de arquivos no diretório. Podemos ainda usar o argumento pattern para listar arquivos por um padrão textual. ## Listar os arquivos do diretório definido dir() list.files() ## Listar os arquivos do diretório definido por um padrão dir(pattern = &quot;.csv&quot;) Além disso, é fundamental ressaltar a importância de verificar se o nome do arquivo que importaremos foi digitado corretamente, atentando-se também para a extensão: .csv, .txt, .xlsx, etc. 4.4 Estrutura e manipulação de objetos O conhecimento sobre a estrutura e manipulação de objetos é fundamental para ter domínio e entendimento do funcionamento da linguagem R. Nesta seção, trataremos da estrutura e manipulação de dados no R, no que ficou conhecido como modo R Base, em contrapartida ao tidyverse, tópico do Capítulo 5. Abordaremos aqui temas chaves: 1) atributos de objetos, 2) manipulação de objetos unidimensionais e multidimensionais, 3) valores faltantes e especiais, 4) diretório de trabalho, e 5) importar, conferir e exportar dados. 4.4.1 Atributo dos objetos Quando fazemos atribuições de dados no R (&lt;-), os objetos gerados possuem três características. Nome: palavra que o R reconhece os dados atribuídos Conteúdo: dados em si Atributos: modos (natureza) e estruturas (organização) dos elementos Vamos explorar mais a fundo os modos e estruturas dos objetos. Vale ressaltar que isso é uma simplificação, pois há muitas classes de objetos, como funções e saídas de funções que possuem outros atributos. Podemos verificar os atributos dos objetos com a função attributes(). ## Atributos attributes(dune) #&gt; $names #&gt; [1] &quot;Achimill&quot; &quot;Agrostol&quot; &quot;Airaprae&quot; &quot;Alopgeni&quot; &quot;Anthodor&quot; &quot;Bellpere&quot; &quot;Bromhord&quot; &quot;Chenalbu&quot; &quot;Cirsarve&quot; &quot;Comapalu&quot; #&gt; [11] &quot;Eleopalu&quot; &quot;Elymrepe&quot; &quot;Empenigr&quot; &quot;Hyporadi&quot; &quot;Juncarti&quot; &quot;Juncbufo&quot; &quot;Lolipere&quot; &quot;Planlanc&quot; &quot;Poaprat&quot; &quot;Poatriv&quot; #&gt; [21] &quot;Ranuflam&quot; &quot;Rumeacet&quot; &quot;Sagiproc&quot; &quot;Salirepe&quot; &quot;Scorautu&quot; &quot;Trifprat&quot; &quot;Trifrepe&quot; &quot;Vicilath&quot; &quot;Bracruta&quot; &quot;Callcusp&quot; #&gt; #&gt; $row.names #&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; #&gt; #&gt; $class #&gt; [1] &quot;data.frame&quot; 4.4.1.1 Modo dos objetos A depender da natureza dos elementos que compõem os dados e que foram atribuídos aos objetos, esses objetos podem ser, de forma simples um dos cinco modos: numérico do tipo inteiro (integer), numérico do tipo flutuante (double), texto (character), lógico (logical) ou complexo (complex). A atribuição de números no R podem gerar dois tipos de modos: integer para números inteiros e double para números flutuantes ou com decimais. ## Numérico double obj_numerico_double &lt;- 1 ## Modo mode(obj_numerico_double) #&gt; [1] &quot;numeric&quot; ## Tipo typeof(obj_numerico_double) #&gt; [1] &quot;double&quot; A título de praticidade, ambos são incorporados como o modo numeric, com o tipo double, a menos que especifiquemos que seja inteiro com a letra L depois do número. ## Numérico integer obj_numerico_inteiro &lt;- 1L ## Modo mode(obj_numerico_inteiro) #&gt; [1] &quot;numeric&quot; ## Tipo typeof(obj_numerico_inteiro) #&gt; [1] &quot;integer&quot; Além de números, podemos atribuir textos, utilizando para isso aspas \"\". ## Caracter ou string obj_caracter &lt;- &quot;a&quot; # atencao para as aspas ## Modo mode(obj_caracter) #&gt; [1] &quot;character&quot; Em algumas situações, precisamos indicar a ocorrência ou não de um evento ou operação. Para isso, utilizamos as palavras reservadas (TRUE e FALSE), chamadas de variáveis booleanas, pois assumem apenas duas possibilidades: 0 ou 1. Devemos nos ater para o fato dessas palavras serem escritas com letras maiúsculas e sem aspas. ## Lógico obj_logico &lt;- TRUE # maiusculas e sem aspas ## Modo mode(obj_logico) #&gt; [1] &quot;logical&quot; Por fim, existe um modo pouco utilizado que cria números complexos (raiz de números negativos). ## Complexo obj_complexo &lt;- 1+1i ## Modo mode(obj_complexo) #&gt; [1] &quot;complex&quot; Podemos verificar o modo dos objetos ou fazer a conversão entre esses modos com diversas funções. ## Verificar o modo dos objetos is.numeric() is.integer() is.character() is.logical() is.complex() ## Conversões entre modos as.numeric() as.integer() as.character() as.logical() as.complex() 4.4.1.2 Estrutura dos objetos Uma vez entendido a natureza dos modos dos elementos dos objetos no R, podemos passar para o passo seguinte e entender como esses elementos são estruturados dentro dos objetos. Essa estruturação irá nos contar sobre a organização dos elementos, com relação aos modos e dimensionalidade da disposição dos elementos (Figura 4.3). De modo bem simples, os elementos podem ser estruturados em cinco tipos: Vetores e fatores: homogêneo (um modo) e unidimensional (uma dimensão). Um tipo especial de vetor são os fatores, usados para designar variáveis categóricas Matrizes: homogêneo (um modo) e bidimensional (duas dimensões) Arrays: homogêneo (um modo) e multidimensional (mais de duas dimensões) Data frames: heterogêneo (mais de um modo) e bidimensional (duas dimensões) Listas: heterogêneo (mais de um modo) e unidimensional (uma dimensão) Figura 4.3: Estruturas de dados mais comuns de R: vetores, matrizes, arrays, listas e data frames. Adaptado de: Grolemund (2014). 4.4.1.2.1 Vetor Vetores representam o encadeamento de elementos numa sequência unidimensional. No Capítulo 3, vimos o conceito de variável aleatória e seus tipos. No R, essas variáveis podem ser operacionalizadas como vetores. Dessa forma, essa estrutura de dados pode ser traduzida como medidas de uma variável numérica (discretas ou contínuas), variável binária (booleana - TRUE e FALSE) ou descrição (informações em texto). Há diversas formas de se criar um vetor no R: Concatenando elementos com a função c() Criando sequências unitárias : ou com a função seq() Criando repetições com a função rep() “Colar” palavras com uma sequência numérica com a função paste() ou paste0() Amostrando aleatoriamente elementos com a função sample() ## Concatenar elementos numéricos concatenar &lt;- c(15, 18, 20, 22, 18) concatenar #&gt; [1] 15 18 20 22 18 ## Sequência unitária (x1:x2) sequencia &lt;- 1:10 sequencia #&gt; [1] 1 2 3 4 5 6 7 8 9 10 ## Sequência com diferentes espaçamentos sequencia_esp &lt;- seq(from = 0, to = 100, by = 10) sequencia_esp #&gt; [1] 0 10 20 30 40 50 60 70 80 90 100 ## Repetição repeticao &lt;- rep(x = c(TRUE, FALSE), times = 5) repeticao #&gt; [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE ## Cola palavra e sequência numérica colar &lt;- paste(&quot;amostra&quot;, 1:5) colar #&gt; [1] &quot;amostra 1&quot; &quot;amostra 2&quot; &quot;amostra 3&quot; &quot;amostra 4&quot; &quot;amostra 5&quot; ## Amostragem aleatória amostragem &lt;- sample(x = 1:100, size = 10) amostragem #&gt; [1] 45 23 76 63 47 31 68 73 69 5 Como os vetores são homogêneos, i.e., só comportam um modo, quando combinamos mais de um modo no mesmo objeto ocorre uma dominância de modos. Existe, dessa forma, uma coerção dos elementos combinados para que todos fiquem iguais. Essa dominância segue essa ordem: DOMINANTE character &gt; double &gt; integer &gt; logical RECESSIVO Além disso, podemos utilizar as conversões listadas anteriormente para alterar os modos. Vamos exemplificar combinando os vetores criados anteriormente e convertendo-os. ## Coerção c(colar, amostragem) #&gt; [1] &quot;amostra 1&quot; &quot;amostra 2&quot; &quot;amostra 3&quot; &quot;amostra 4&quot; &quot;amostra 5&quot; &quot;45&quot; &quot;23&quot; &quot;76&quot; &quot;63&quot; #&gt; [10] &quot;47&quot; &quot;31&quot; &quot;68&quot; &quot;73&quot; &quot;69&quot; &quot;5&quot; ## Conversão as.numeric(repeticao) #&gt; [1] 1 0 1 0 1 0 1 0 1 0 4.4.1.2.2 Fator O fator representa medidas de uma variável categórica, podendo ser nominal ou ordinal. É fundamental destacar que fatores no R devem ser entendidos como um vetor de integer, i.e., ele é composto por números inteiros representando os níveis da variável categórica. Para criar um fator no R usamos uma função específica factor(), na qual podemos especificar os níveis com o argumento level, ou fazemos uma conversão usando a função as.factor(). Trabalhar com fatores no R Base não é das tarefas mais agradáveis, sendo assim, no Capítulo ?? usamos a versão tidyverse usando o pacote forcats. ## Fator nominal fator_nominal &lt;- factor(x = sample(x = c(&quot;floresta&quot;, &quot;pastagem&quot;, &quot;cerrado&quot;), size = 20, replace = TRUE), levels = c(&quot;floresta&quot;, &quot;pastagem&quot;, &quot;cerrado&quot;)) fator_nominal #&gt; [1] cerrado cerrado floresta pastagem pastagem cerrado cerrado pastagem cerrado floresta floresta floresta #&gt; [13] pastagem pastagem cerrado cerrado pastagem cerrado floresta pastagem #&gt; Levels: floresta pastagem cerrado ## Fator ordinal fator_ordinal &lt;- factor(x = sample(x = c(&quot;baixa&quot;, &quot;media&quot;, &quot;alta&quot;), size = 20, replace = TRUE), levels = c(&quot;baixa&quot;, &quot;media&quot;, &quot;alta&quot;), ordered = TRUE) fator_ordinal #&gt; [1] alta alta baixa media baixa media alta media baixa media baixa media alta baixa media media alta media #&gt; [19] baixa baixa #&gt; Levels: baixa &lt; media &lt; alta ## Conversão fator &lt;- as.factor(x = sample(x = c(&quot;floresta&quot;, &quot;pastagem&quot;, &quot;cerrado&quot;), size = 20, replace = TRUE)) fator #&gt; [1] cerrado pastagem floresta floresta cerrado cerrado pastagem cerrado pastagem cerrado pastagem cerrado #&gt; [13] pastagem pastagem floresta cerrado pastagem pastagem cerrado floresta #&gt; Levels: cerrado floresta pastagem 4.4.1.2.3 Matriz A matriz representa dados no formato de tabela, com linhas e colunas. As linhas representam unidades amostrais (locais, transectos, parcelas) e as colunas representam variáveis numéricas (discretas ou contínuas), variáveis binárias (TRUE ou FALSE) ou descrições (informações em texto). Podemos criar matrizes no R de duas formas. A primeira delas dispondo elementos de um vetor em um certo número de linhas e colunas com a função matrix(), podendo preencher essa matriz com os elementos do vetor por linhas ou por colunas alterando o argumento byrow. ## Vetor ve &lt;- 1:12 ## Matrix - preenchimento por linhas - horizontal ma_row &lt;- matrix(data = ve, nrow = 4, ncol = 3, byrow = TRUE) ma_row #&gt; [,1] [,2] [,3] #&gt; [1,] 1 2 3 #&gt; [2,] 4 5 6 #&gt; [3,] 7 8 9 #&gt; [4,] 10 11 12 ## Matrix - preenchimento por colunas - vertical ma_col &lt;- matrix(data = ve, nrow = 4, ncol = 3, byrow = FALSE) ma_col #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 A segundo forma, combinando vetores, utilizando a função rbind() para combinar vetores por linha, i.e., vetor embaixo do outro, e cbind() para combinar vetores por coluna, i.e., vetor ao lado do outro. ## Criar dois vetores vec_1 &lt;- c(1, 2, 3) vec_2 &lt;- c(4, 5, 6) ## Combinar por linhas - vertical - um embaixo do outro ma_rbind &lt;- rbind(vec_1, vec_2) ma_rbind #&gt; [,1] [,2] [,3] #&gt; vec_1 1 2 3 #&gt; vec_2 4 5 6 ## Combinar por colunas - horizontal - um ao lado do outro ma_cbind &lt;- cbind(vec_1, vec_2) ma_cbind #&gt; vec_1 vec_2 #&gt; [1,] 1 4 #&gt; [2,] 2 5 #&gt; [3,] 3 6 4.4.1.2.4 Array O array representa combinação de tabelas, com linhas, colunas e dimensões. Essa combinação pode ser feita em múltiplas dimensões, mas apesar disso, geralmente é mais comum o uso em Ecologia para três dimensões, por exemplo: linhas (unidades amostrais), colunas (espécies) e dimensão (tempo). Isso gera um “cubo mágico” ou “cartas de um baralho,” onde podemos comparar, nesse caso, comunidades ao longo do tempo. Além disso, arrays também são muito comuns em morfometria geométrica ou sensoriamento remoto. Podemos criar arrays no R dispondo elementos de um vetor em um certo número de linhas, colunas e dimensões com a função array(). Em nosso exemplo, vamos compor cinco comunidades de cinco espécies ao longo de três períodos. ## Array ar &lt;- array(data = sample(x = c(0, 1), size = 75, rep = TRUE), dim = c(5, 5, 3)) ar #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 1 0 1 1 0 #&gt; [2,] 1 0 1 1 0 #&gt; [3,] 1 1 1 1 1 #&gt; [4,] 0 1 0 1 0 #&gt; [5,] 1 0 1 0 0 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 0 0 0 1 0 #&gt; [2,] 0 1 0 1 0 #&gt; [3,] 1 1 1 1 0 #&gt; [4,] 0 0 0 0 1 #&gt; [5,] 0 0 0 0 0 #&gt; #&gt; , , 3 #&gt; #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 0 1 1 1 1 #&gt; [2,] 0 0 0 0 0 #&gt; [3,] 0 1 1 1 1 #&gt; [4,] 0 0 1 0 0 #&gt; [5,] 0 1 0 1 0 4.4.1.2.5 Data frame O data frame também representa dados no formato de tabela, com linhas e colunas, muito semelhante à matriz. Mas diferentemente das matrizes, os data frames comportam mais de um modo em suas colunas. Dessa forma, as linhas do data frame ainda representam unidades amostrais (locais, transectos, parcelas), mas as colunas agora podem representar descrições (informações em texto), variáveis numéricas (discretas ou contínuas), variáveis binárias (TRUE ou FALSE) e variáveis categóricas (nominais ou ordinais). A forma mais simples de criar data frames no R é através da combinação de vetores. Essa combinação é feita com a função data.frame() e ocorre de forma horizontal, semelhante à função cbind(). Sendo assim, todos os vetores precisam ter o mesmo número de elementos, ou seja, o mesmo comprimento. Podemos ainda nomear as colunas de cada vetor. ## Criar três vetores vec_ch &lt;- c(&quot;sp1&quot;, &quot;sp2&quot;, &quot;sp3&quot;) vec_nu &lt;- c(4, 5, 6) vec_fa &lt;- factor(c(&quot;campo&quot;, &quot;floresta&quot;, &quot;floresta&quot;)) ## Data frame - combinar por colunas - horizontal - um ao lado do outro df &lt;- data.frame(vec_ch, vec_nu, vec_fa) df #&gt; vec_ch vec_nu vec_fa #&gt; 1 sp1 4 campo #&gt; 2 sp2 5 floresta #&gt; 3 sp3 6 floresta ## Data frame - nomear as colunas df &lt;- data.frame(especies = vec_ch, abundancia = vec_nu, vegetacao = vec_fa) df #&gt; especies abundancia vegetacao #&gt; 1 sp1 4 campo #&gt; 2 sp2 5 floresta #&gt; 3 sp3 6 floresta 4.4.1.2.6 Lista A lista é um tipo especial de vetor que aceita objetos como elementos. Ela é a estrutura de dados utilizada para agrupar objetos, e é geralmente a saída de muitas funções. Podemos criar listas através da função list(). Essa função funciona de forma semelhante à função c() para a criação de vetores, mas agora estamos concatenando objetos. Podemos ainda nomear os elementos (objetos) que estamos combinando. Um ponto interessante para entender data frames, é que eles são listas, em que todos os elementos (colunas) possuem o mesmo número de elementos, ou seja, mesmo comprimento. ## Lista lista &lt;- list(rep(1, 20), # vector factor(1, 1), # factor cbind(c(1, 2), c(1, 2))) # matrix lista #&gt; [[1]] #&gt; [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #&gt; #&gt; [[2]] #&gt; [1] 1 #&gt; Levels: 1 #&gt; #&gt; [[3]] #&gt; [,1] [,2] #&gt; [1,] 1 1 #&gt; [2,] 2 2 ## Lista - nomear os elementos lista_nome &lt;- list(vector = rep(1, 20), # vector factor = factor(1, 1), # factor matrix = cbind(c(1, 2), c(1, 2))) # matrix lista_nome #&gt; $vector #&gt; [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #&gt; #&gt; $factor #&gt; [1] 1 #&gt; Levels: 1 #&gt; #&gt; $matrix #&gt; [,1] [,2] #&gt; [1,] 1 1 #&gt; [2,] 2 2 4.4.1.2.7 Funções Uma última estrutura de objetos criados no R são as funções. Elas são objetos criados pelo usuário e reutilizados para fazer operações específicas. A criação de funções geralmente é um tópico tratado num segundo momento, quando o usuário de R adquire certo conhecimento da linguagem. Aqui abordaremos apenas seu funcionamento básico, diferenciando sua estrutura para entendimento e sua diferenciação das demais estruturas. Vamos criar uma função simples que retorna a multiplicação de dois termos. Criaremos a função com o nome multi, à qual será atribuída uma função com o nome function(), com dois argumentos x e y. Depois disso abrimos chaves {}, que é onde iremos incluir nosso bloco de código. Nosso bloco de código é composto por duas linhas, a primeira contendo a operação de multiplicação dos argumento com a atribuição ao objeto mu e a sugunda contendo a função return() para retornar o valor da multiplicação. ## Criar uma função multi &lt;- function(x, y){ mu &lt;- (x * y) return(mu) } multi #&gt; function(x, y){ #&gt; #&gt; mu &lt;- (x * y) #&gt; return(mu) #&gt; #&gt; } ## Uso da função multi(42, 42) #&gt; [1] 1764 4.4.2 Manipulação de objetos unidimensionais Vamos agora explorar formas de manipular elementos de objetos unidimensionais, ou seja, vetores, fatores e listas. A primeira forma de manipulação é através da indexação, utilizando os operadores []. Com a indexação podemos acessar elementos de vetores e fatores por sua posição. Utilizaremos números, sequência de números ou operações booleanas para retornar partes dos vetores ou fatores. Podemos ainda retirar elementos dessas estruturas com o operador aritmético -. No exemplo a seguir, iremos fixar o ponto de partida da amostragem da função sample(), utilizando a função set.seed(42) (usamos 42 porque é a resposta para a vida, o universo e tudo mais - O Guia do Mochileiro das Galáxias, mas poderia ser outro número qualquer). Isso permite que o resultado da amostragem aleatório seja igual em diferentes computadores. ## Fixar a amostragem set.seed(42) ## Amostrar 10 elementos de uma sequência ve &lt;- sample(x = seq(0, 2, .05), size = 10) ve #&gt; [1] 1.80 0.00 1.20 0.45 1.75 0.85 1.15 0.30 1.90 0.20 ## Seleciona o quinto elemento ve[5] #&gt; [1] 1.75 ## Seleciona os elementos de 1 a 5 ve[1:5] #&gt; [1] 1.80 0.00 1.20 0.45 1.75 ## Retira o decimo elemento ve[-10] #&gt; [1] 1.80 0.00 1.20 0.45 1.75 0.85 1.15 0.30 1.90 ## Retira os elementos 2 a 9 ve[-(2:9)] #&gt; [1] 1.8 0.2 Podemos ainda fazer uma seleção condicional do vetor. Ao utilizarmos operadores relacionais, teremos como resposta um vetor lógico. Esse vetor lógico pode ser utilizado dentro da indexação para seleção de elementos. ## Quais valores sao maiores que 1? ve &gt; 1 #&gt; [1] TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE FALSE ## Valores acima de 1 ve[ve &gt; 1] #&gt; [1] 1.80 1.20 1.75 1.15 1.90 Além da indexação, temos algumas funções que nos auxiliam em algumas operações com objetos unidimensionais, listadas na Tabela 4.2. Tabela 4.2: Funções para verificação e resumo de dados unidimensionais. Função Descrição max() Valor máximo min() Valor mínimo range() Amplitude length() Comprimento sum() Soma cumsum() Soma cumulativa prod() Produto sqrt() Raiz quadrada abs() Valor absoluto exp() Expoente log() Logaritmo natural log1p() Logaritmo natural mais 1 log(x + 1) log2() Logaritmo base 2 log10() Logaritmo base 10 mean() Média mean.weighted() Média ponderada var() Variância sd() Desvio Padrão mediam() Mediana quantile() Quantil quarters() Quartil IQR() Amplitude interquartil round() Arredondamento sort() Ordenação order() Posição ordenada rev() Reverso unique() Únicos summary() Resumo estatístico cut() Divide variável contínua em fator pretty() Divide variável contínua em intervalos scale() Padronização e centralização sub() Substitui caracteres grep() Posição de caracteres any() Algum valor? all() Todos os valores? which() Quais valores? subset() Subconjunto ifelse() Operação condicional Para listas, também podemos usar a indexação [] para acessar ou retirar elementos. ## Lista li &lt;- list(elem1 = 1, elem2 = 2, elem3 = 3) ## Acessar o primeiro elemento li[1] #&gt; $elem1 #&gt; [1] 1 ## Retirar o primeiro elemento li[-1] #&gt; $elem2 #&gt; [1] 2 #&gt; #&gt; $elem3 #&gt; [1] 3 Podemos ainda usar a indexação dupla [[]] para acessar os valores desses elementos. ## Acessar o valor do primeiro elemento li[[1]] #&gt; [1] 1 ## Acessar o valor do segundo elemento li[[2]] #&gt; [1] 2 Para listas nomeadas, podemos ainda utilizar o operador $ para acessar elementos pelo nome. ## Acessar o primeiro elemento li$elem1 #&gt; [1] 1 E ainda podemos utilizar funções para medir o comprimento dessa lista, listar os nomes dos elementos ou ainda renomear os elementos: length() e names(). ## Comprimento length(li) #&gt; [1] 3 ## Nomes names(li) #&gt; [1] &quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot; ## Renomear names(li) &lt;- paste0(&quot;elemento0&quot;, 1:3) li #&gt; $elemento01 #&gt; [1] 1 #&gt; #&gt; $elemento02 #&gt; [1] 2 #&gt; #&gt; $elemento03 #&gt; [1] 3 4.4.3 Manipulação de objetos multidimensionais Da mesma forma que para objetos unidimensionais, podemos manipular elementos de objetos multidimensionais, ou seja, matrizes, data frames e arrays. Novamente, a primeira forma de manipulação é através da indexação, utilizando os operadores []. Com a indexação podemos acessar elementos de matrizes, data frames e arrays por sua posição. Podemos ainda retirar elementos dessas estruturas com o operador aritmético -. Entretanto, agora temos mais de uma dimensão na estruturação dos elementos dentro dos objetos. Assim, utilizamos números, sequência de números ou operação booleanas para retornar partes desses objetos, mas as dimensões têm de ser explicitadas e separadas por vírgulas para acessar linhas e colunas. Essa indexação funciona para matrizes e data frames. Para arrays, especificamos também as dimensões, também separadas por vírgulas para acessar essas dimensões. ## Matriz ma &lt;- matrix(1:12, 4, 3) ma #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 ## Indexação ma[3, ] # linha 3 #&gt; [1] 3 7 11 ma[, 2] # coluna 2 #&gt; [1] 5 6 7 8 ma[1, 2] # elemento da linha 1 e coluna 2 #&gt; [1] 5 ma[1, 1:2] # elementos da linha 1 e coluna 1 e 2 #&gt; [1] 1 5 ma[1, c(1, 3)] # elementos da linha 1 e coluna 1 e 3 #&gt; [1] 1 9 ma[-1, ] # retirar a linha 1 #&gt; [,1] [,2] [,3] #&gt; [1,] 2 6 10 #&gt; [2,] 3 7 11 #&gt; [3,] 4 8 12 ma[, -3] # retirar a coluna 3 #&gt; [,1] [,2] #&gt; [1,] 1 5 #&gt; [2,] 2 6 #&gt; [3,] 3 7 #&gt; [4,] 4 8 Para data frames, além de utilizar números e/ou sequências de números dentro do operador [] simples, assim como podemos utilizar o operador [[]] duplo para retornar apenas os valores de uma linha ou uma coluna. Se as colunas estiverem nomeadas, podemos utilizar o nome da coluna de interesse entre aspas dentro dos operadores [] (retornar coluna) e [[]] (retornar apenas os valores), assim como ainda podemos utilizar o operador $ para data frames. Essas últimas operações retornam um vetor, para o qual podemos fazer operações de vetores ou ainda atualizar o valor dessa coluna selecionada ou adicionar outra coluna. ## Criar três vetores sp &lt;- paste(&quot;sp&quot;, 1:10, sep = &quot;&quot;) abu &lt;- 1:10 flo &lt;- factor(rep(c(&quot;campo&quot;, &quot;floresta&quot;), each = 5)) ## data frame df &lt;- data.frame(sp, abu, flo) df #&gt; sp abu flo #&gt; 1 sp1 1 campo #&gt; 2 sp2 2 campo #&gt; 3 sp3 3 campo #&gt; 4 sp4 4 campo #&gt; 5 sp5 5 campo #&gt; 6 sp6 6 floresta #&gt; 7 sp7 7 floresta #&gt; 8 sp8 8 floresta #&gt; 9 sp9 9 floresta #&gt; 10 sp10 10 floresta ## [] - números df[, 1] #&gt; [1] &quot;sp1&quot; &quot;sp2&quot; &quot;sp3&quot; &quot;sp4&quot; &quot;sp5&quot; &quot;sp6&quot; &quot;sp7&quot; &quot;sp8&quot; &quot;sp9&quot; &quot;sp10&quot; ## [] - nome das colunas - retorna coluna df[&quot;flo&quot;] #&gt; flo #&gt; 1 campo #&gt; 2 campo #&gt; 3 campo #&gt; 4 campo #&gt; 5 campo #&gt; 6 floresta #&gt; 7 floresta #&gt; 8 floresta #&gt; 9 floresta #&gt; 10 floresta ## [[]] - nome das colunas - retorna apenas os valores df[[&quot;flo&quot;]] #&gt; [1] campo campo campo campo campo floresta floresta floresta floresta floresta #&gt; Levels: campo floresta ## $ funciona apenas para data frame df$sp #&gt; [1] &quot;sp1&quot; &quot;sp2&quot; &quot;sp3&quot; &quot;sp4&quot; &quot;sp5&quot; &quot;sp6&quot; &quot;sp7&quot; &quot;sp8&quot; &quot;sp9&quot; &quot;sp10&quot; ## Operação de vetors length(df$abu) #&gt; [1] 10 ## Converter colunas df$abu &lt;- as.character(df$abu) mode(df$abu) #&gt; [1] &quot;character&quot; ## Adicionar colunas set.seed(42) df$abu2 &lt;- sample(x = 0:1, size = nrow(df), rep = TRUE) df #&gt; sp abu flo abu2 #&gt; 1 sp1 1 campo 0 #&gt; 2 sp2 2 campo 0 #&gt; 3 sp3 3 campo 0 #&gt; 4 sp4 4 campo 0 #&gt; 5 sp5 5 campo 1 #&gt; 6 sp6 6 floresta 1 #&gt; 7 sp7 7 floresta 1 #&gt; 8 sp8 8 floresta 1 #&gt; 9 sp9 9 floresta 0 #&gt; 10 sp10 10 floresta 1 Podemos ainda fazer seleções condicionais para retornar linhas com valores que temos interesse, semelhante ao uso de filtro de uma planilha eletrônica. ## Selecionar linhas de uma matriz ou data frame df[df$abu &gt; 4, ] #&gt; sp abu flo abu2 #&gt; 5 sp5 5 campo 1 #&gt; 6 sp6 6 floresta 1 #&gt; 7 sp7 7 floresta 1 #&gt; 8 sp8 8 floresta 1 #&gt; 9 sp9 9 floresta 0 df[df$flo == &quot;floresta&quot;, ] #&gt; sp abu flo abu2 #&gt; 6 sp6 6 floresta 1 #&gt; 7 sp7 7 floresta 1 #&gt; 8 sp8 8 floresta 1 #&gt; 9 sp9 9 floresta 0 #&gt; 10 sp10 10 floresta 1 Além disso, há uma série de funções para conferência e manipulação de dados que listamos na Tabela 4.3. Tabela 4.3: Funções para verificação e resumo de dados multidimensionais. Função Descrição head() Mostra as primeiras 6 linhas tail() Mostra as últimas 6 linhas nrow() Mostra o número de linhas ncol() Mostra o número de colunas dim() Mostra o número de linhas e de colunas rownames() Mostra os nomes das linhas (locais) colnames() Mostra os nomes das colunas (variáveis) str() Mostra as classes de cada coluna (estrutura) summary() Mostra um resumo dos valores de cada coluna rowSums() Calcula a soma das linhas (horizontal) colSums() Calcula a soma das colunas (vertical) rowMeans() Calcula a média das linhas (horizontal) colMeans() Calcula a média das colunas (vertical) str() Mostra a estrutura dos dados table() Tabulação cruzada t() Matriz ou data frame transposto 4.4.4 Valores faltantes e especiais Valores faltantes e especiais são valores reservados que representam dados faltantes, indefinições matemáticas, infinitos e objetos nulos. NA (Not Available): significa dado faltante ou indisponível NaN (Not a Number): representa indefinições matemáticas Inf (Infinito): é um número muito grande ou um limite matemático NULL (Nulo): representa um objeto nulo, sendo útil para preenchimento em aplicações de programação ## Data frame com elemento NA df &lt;- data.frame(var1 = c(1, 4, 2, NA), var2 = c(1, 4, 5, 2)) df #&gt; var1 var2 #&gt; 1 1 1 #&gt; 2 4 4 #&gt; 3 2 5 #&gt; 4 NA 2 ## Resposta booleana para elementos NA is.na(df) #&gt; var1 var2 #&gt; [1,] FALSE FALSE #&gt; [2,] FALSE FALSE #&gt; [3,] FALSE FALSE #&gt; [4,] TRUE FALSE ## Algum elemento é NA? any(is.na(df)) #&gt; [1] TRUE ## Remover as linhas com NAs df_sem_na &lt;- na.omit(df) df_sem_na #&gt; var1 var2 #&gt; 1 1 1 #&gt; 2 4 4 #&gt; 3 2 5 ## Substituir NAs por 0 df[is.na(df)] &lt;- 0 df #&gt; var1 var2 #&gt; 1 1 1 #&gt; 2 4 4 #&gt; 3 2 5 #&gt; 4 0 2 ## Desconsiderar os NAs em funções com o argumento rm.na = TRUE sum(1, 2, 3, 4, NA, na.rm = TRUE) #&gt; [1] 10 ## NaN - not a number 0/0 #&gt; [1] NaN log(-1) #&gt; [1] NaN ## Limite matemático 1/0 #&gt; [1] Inf ## Número grande 10^310 #&gt; [1] Inf ## Objeto nulo nulo &lt;- NULL nulo #&gt; NULL 4.4.5 Diretório de trabalho O diretório de trabalho é o endereço da pasta (ou diretório) de onde o R importará ou exportar nossos dados. Podemos utilizar o próprio RStudio para tal tarefa, indo em Session &gt; Set Work Directory &gt; Choose Directory... ou simplesmente utilizar o atalho Ctrl + Shift + H. Podemos ainda utilizar as funções do R para definir o diretório. Para tanto, podemos navegar com o aplicativo de gerenciador de arquivos (e.g., Windows Explorer) até nosso diretório de interesse e copiar o endereço na barra superior. Voltamos para o R e colamos esse endereço entre aspas como um argumento da função setwd(). É fundamental destacar que em Sistemas Operacionais Windows é necessário inverter as barras (\\ por /). Aconselhamos ainda utilizar as funções getwd() para retornar o diretório definido na sessão do R, assim como as funções dir() ou list.files() para listagem dos arquivos no diretório, ambas medidas de conferência do diretório correto. ## Definir o diretório de trabalho setwd(&quot;/home/mude/data/github/livro_r_ecologia/dados&quot;) ## Verificar o diretório getwd() ## Listar os arquivos no diretório dir() list.files() Outra forma de definir o diretório é digitar a tecla tab dentro da função setwd(\"tab\"). Quando apertamos a tab dentro das aspas conseguimos selecionar o diretório manualmente, pois abre-se uma lista de diretório que podemos ir selecionando até chegar no diretório de interesse. ## Mudar o diretório com a tecla tab setwd(&quot;`tab`&quot;) 4.4.6 Importar dados Uma das operações mais corriqueiras do R, antes de realizar alguma análise ou plotar um gráfico, é a de importar dados que foram tabulados numa planilha eletrônica e salvos no formato .csv, .txt ou .xlsx. Ao importar esse tipo de dado para o R, o formato que o mesmo assume, se nenhum parâmetro for especificado, é o da classe data frame, prevendo que a planilha de dados possua colunas com diferentes modos. Existem diversas formas de importar dados para o R. Podemos importar utilizando o RStudio, indo na janela Environment (Figura 4.2 (3)) e clicar em “Importar Dataset.” Entretanto, aconselhamos o uso de funções que fiquem salvas em um script para aumentar a reprodutibilidade do mesmo. Dessa forma, as três principais funções para importar os arquivos nos três principais extensões (.csv, .txt ou .xlsx) são, respectivamente: read.csv(), read.table() e openxlsx::read.xlsx(), sendo o último do pacote openxlsx. ## Instalar o pacote openxlsx install.packages(&quot;openxlsx&quot;) library(openxlsx) Para exemplificar como importar dados vamos usar os dados de comunidades de anfíbios da Mata Atlântica (Atlantic Amphibians, Vancine et al. (2018)). Faremos o download diretamente do site da fonte dos dados. Vamos antes escolher um diretório de trabalho com a função setwd(), e em seguida criar um diretório com a função dir.create() chamado “dados.” Em seguida, vamos mudar nosso diretório para essa pasta e criar mais um diretório chamado “tabelas,” e por fim, definir esse diretório para que o conteúdo do download seja armazenado ali. ## Escolher um diretório setwd(&quot;/home/mude/data/github/livro_r_ecologia&quot;) ## Criar um diretório &#39;dados&#39; dir.create(&quot;dados&quot;) ## Escolher diretório &#39;dados&#39; setwd(&quot;dados&quot;) ## Criar um diretório &#39;tabelas&#39; dir.create(&quot;tabelas&quot;) ## Escolher diretório &#39;tabelas&#39; setwd(&quot;tabelas&quot;) Agora podemos fazer o download do arquivo .zip e extrair as tabelas usando a função unzip() nesse mesmo diretório. ## Download download.file(url = &quot;https://esajournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fecy.2392&amp;file=ecy2392-sup-0001-DataS1.zip&quot;, destfile = &quot;atlantic_amphibians.zip&quot;, mode = &quot;wb&quot;) ## Unzip unzip(zipfile = &quot;atlantic_amphibians.zip&quot;) Agora podemos importar a tabela de dados com a função read.csv(), atribuindo ao objeto intror_anfibios_locais. Devemos atentar para o argumento encoding, que selecionamos aqui como latin1 para corrigir um erro do autor dos dados que publicou esse data paper com erros… ## Importar a tabela de locais intror_anfibios_locais &lt;- read.csv(&quot;dados/tabelas/ATLANTIC_AMPHIBIANS_sites.csv&quot;, encoding = &quot;latin1&quot;) Esse arquivo foi criado com separador de decimais sendo . e separador de colunas sendo ,. Caso tivesse sido criado com separador de decimais sendo , e separador de colunas sendo ;, usaríamos a função read.csv2(). Para outros formatos, basta usar as outras funções apresentadas, atentando-se para os argumentos específicos de cada função. Outra forma de importar dados, principalmente quando não sabemos exatamente o nome do arquivo e também para evitar erros de digitação, é utilizar a tecla tab dentro das aspas da função de importação. Dessa forma, conseguimos ter acesso aos arquivos do nosso diretório e temos a possibilidade de selecioná-los sem erros de digitação. ## Importar usando a tecla tab intror_anfibios_locais &lt;- read.csv(&quot;`tab`&quot;) intror_anfibios_locais Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados data(intror_anfibios_locais) head(intror_anfibios_locais) #&gt; id reference_number species_number record sampled_habitat active_methods passive_methods #&gt; 1 amp1001 1001 19 ab fo,ll as pt #&gt; 2 amp1002 1002 16 co fo,la,ll as pt #&gt; 3 amp1003 1002 14 co fo,la,ll as pt #&gt; 4 amp1004 1002 13 co fo,la,ll as pt #&gt; 5 amp1005 1003 30 co fo,ll,br as &lt;NA&gt; #&gt; 6 amp1006 1004 42 co tp,pp,la,ll,is &lt;NA&gt; &lt;NA&gt; #&gt; complementary_methods period month_start year_start month_finish year_finish effort_months country state #&gt; 1 &lt;NA&gt; mo,da,tw,ni 9 2000 1 2002 16 Brazil Piauí #&gt; 2 &lt;NA&gt; mo,da,tw,ni 12 2007 5 2009 17 Brazil Ceará #&gt; 3 &lt;NA&gt; mo,da,tw,ni 12 2007 5 2009 17 Brazil Ceará #&gt; 4 &lt;NA&gt; mo,da,tw,ni 12 2007 5 2009 17 Brazil Ceará #&gt; 5 &lt;NA&gt; mo,da,ni 7 1988 8 2001 157 Brazil Ceará #&gt; 6 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Brazil Ceará #&gt; state_abbreviation municipality site latitude longitude #&gt; 1 BR-PI Canto do Buriti Parque Nacional Serra das Confusões -8.680000 -43.42194 #&gt; 2 BR-CE São Gonçalo do Amarante Dunas -3.545527 -38.85783 #&gt; 3 BR-CE São Gonçalo do Amarante Jardim Botânico Municipal de Bauru -3.574194 -38.88869 #&gt; 4 BR-CE São Gonçalo do Amarante Taíba -3.515250 -38.91880 #&gt; 5 BR-CE Baturité Serra de Baturité -4.280556 -38.91083 #&gt; 6 BR-CE Quebrangulo Reserva Biológica de Pedra Talhada -9.229167 -36.42806 #&gt; coordinate_precision altitude temperature precipitation #&gt; 1 gm 543 24.98 853 #&gt; 2 dd 15 26.53 1318 #&gt; 3 dd 29 26.45 1248 #&gt; 4 dd 25 26.55 1376 #&gt; 5 gm 750 21.35 1689 #&gt; 6 &lt;NA&gt; 745 20.45 1249 4.4.7 Conferência dos dados importados Uma vez importados os dados para o R, geralmente antes de iniciarmos qualquer manipulação, visualização ou análise de dados, fazemos a conferência desses dados. Para isso, podemos utilizar as funções listadas na Tabela 4.3. Dentre todas essas funções de verificação, destacamos a importância destas funções apresentadas abaixo para saber se as variáveis foram importadas e interpretadas corretamente e reconhecer erros de digitação, por exemplo. ## Primeiras linhas head(intror_anfibios_locais) #&gt; id reference_number species_number record sampled_habitat active_methods passive_methods #&gt; 1 amp1001 1001 19 ab fo,ll as pt #&gt; 2 amp1002 1002 16 co fo,la,ll as pt #&gt; 3 amp1003 1002 14 co fo,la,ll as pt #&gt; 4 amp1004 1002 13 co fo,la,ll as pt #&gt; 5 amp1005 1003 30 co fo,ll,br as &lt;NA&gt; #&gt; 6 amp1006 1004 42 co tp,pp,la,ll,is &lt;NA&gt; &lt;NA&gt; #&gt; complementary_methods period month_start year_start month_finish year_finish effort_months country state #&gt; 1 &lt;NA&gt; mo,da,tw,ni 9 2000 1 2002 16 Brazil Piauí #&gt; 2 &lt;NA&gt; mo,da,tw,ni 12 2007 5 2009 17 Brazil Ceará #&gt; 3 &lt;NA&gt; mo,da,tw,ni 12 2007 5 2009 17 Brazil Ceará #&gt; 4 &lt;NA&gt; mo,da,tw,ni 12 2007 5 2009 17 Brazil Ceará #&gt; 5 &lt;NA&gt; mo,da,ni 7 1988 8 2001 157 Brazil Ceará #&gt; 6 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Brazil Ceará #&gt; state_abbreviation municipality site latitude longitude #&gt; 1 BR-PI Canto do Buriti Parque Nacional Serra das Confusões -8.680000 -43.42194 #&gt; 2 BR-CE São Gonçalo do Amarante Dunas -3.545527 -38.85783 #&gt; 3 BR-CE São Gonçalo do Amarante Jardim Botânico Municipal de Bauru -3.574194 -38.88869 #&gt; 4 BR-CE São Gonçalo do Amarante Taíba -3.515250 -38.91880 #&gt; 5 BR-CE Baturité Serra de Baturité -4.280556 -38.91083 #&gt; 6 BR-CE Quebrangulo Reserva Biológica de Pedra Talhada -9.229167 -36.42806 #&gt; coordinate_precision altitude temperature precipitation #&gt; 1 gm 543 24.98 853 #&gt; 2 dd 15 26.53 1318 #&gt; 3 dd 29 26.45 1248 #&gt; 4 dd 25 26.55 1376 #&gt; 5 gm 750 21.35 1689 #&gt; 6 &lt;NA&gt; 745 20.45 1249 ## Últimas linhas tail(intror_anfibios_locais) #&gt; id reference_number species_number record sampled_habitat active_methods passive_methods #&gt; 1158 amp2158 1389 3 co &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 1159 amp2159 1389 9 co &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 1160 amp2160 1389 6 co &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 1161 amp2161 1389 1 co &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 1162 amp2162 1389 2 co &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 1163 amp2163 1389 2 co &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; complementary_methods period month_start year_start month_finish year_finish effort_months country #&gt; 1158 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Argentina #&gt; 1159 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Argentina #&gt; 1160 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Argentina #&gt; 1161 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Argentina #&gt; 1162 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Argentina #&gt; 1163 &lt;NA&gt; &lt;NA&gt; NA NA NA NA NA Argentina #&gt; state state_abbreviation municipality site latitude longitude #&gt; 1158 Misiones AR-N Manuel Belgrano Comandante Andresito -25.66944 -54.04556 #&gt; 1159 Misiones AR-N Posadas Posadas -27.45333 -55.89250 #&gt; 1160 Misiones AR-N Montecarlo Montecarlo -26.56889 -53.60889 #&gt; 1161 Misiones AR-N San Pedro Refugio Moconá -27.14083 -53.92611 #&gt; 1162 Misiones AR-N Cainguás Balneario Municipal Cuñá Pirú -27.08722 -54.95278 #&gt; 1163 Misiones AR-N Oberá Chacra San Juan de Dios -27.47333 -55.17194 #&gt; coordinate_precision altitude temperature precipitation #&gt; 1158 gms 251 19.94 1780 #&gt; 1159 gms 105 21.30 1768 #&gt; 1160 gms 597 18.35 1954 #&gt; 1161 gms 202 19.92 1850 #&gt; 1162 gms 213 21.04 1553 #&gt; 1163 gms 254 20.67 1683 ## Número de linhas e colunas nrow(intror_anfibios_locais) #&gt; [1] 1163 ncol(intror_anfibios_locais) #&gt; [1] 25 dim(intror_anfibios_locais) #&gt; [1] 1163 25 ## Nome das linhas e colunas rownames(intror_anfibios_locais) colnames(intror_anfibios_locais) ## Estrutura dos dados str(intror_anfibios_locais) ## Resumo dos dados summary(intror_anfibios_locais) ## Verificar NAs any(is.na(intror_anfibios_locais)) which(is.na(intror_anfibios_locais)) ## Remover as linhas com NAs intror_anfibios_locais_na &lt;- na.omit(intror_anfibios_locais) 4.4.8 Exportar dados Uma vez realizado as operações de manipulação ou tendo dados que foram analisados e armazenados num objeto no formato de data frame ou matriz, podemos exportar esses dados do R para o diretório que definimos anteriormente. Para tanto, podemos utilizar funções de escrita de dados, como write.csv(), write.table() e openxlsx::write.xlsx(). Dois pontos são fundamentais: 1. o nome do arquivo tem de estar entre aspas e no final dele deve constar a extensão que pretendemos que o arquivo tenha; 2. é interessante utilizar os argumentos row.names = FALSE e quote=FALSE, para que o arquivo escrito não tenha o nome das linhas ou aspas em todas as células, respectivamente. ## Exportar dados na extensão .csv write.csv(intror_anfibios_locais_na, &quot;ATLANTIC_AMPHIBIAN_sites_na.csv&quot;, row.names = FALSE, quote = FALSE) ## Exportar dados na extensão .txt write.table(intror_anfibios_locais_na, &quot;ATLANTIC_AMPHIBIAN_sites_na.txt&quot;, row.names = FALSE, quote = FALSE) ## Exportar dados na extensão .xlsx openxlsx::write.xlsx(intror_anfibios_locais_na, &quot;ATLANTIC_AMPHIBIAN_sites_na.xlsx&quot;, row.names = FALSE, quote = FALSE) 4.5 Exercícios Use o R para verificar o resultado da operação 7 + 7 ÷ 7 + 7 x 7 - 7. Verifique através do R se 3x2³ é maior que 2x3². Crie dois objetos (qualquer nome) com os valores 100 e 300. Multiplique esses objetos (função prod()) e atribuam ao objeto mult. Faça o logaritmo natural (função log()) do objeto mult e atribuam ao objeto ln. Quantos pacotes existem no CRAN nesse momento? Execute essa combinação no Console: nrow(available.packages(repos = \"http://cran.r-project.org\")). Instale o pacote tidyverse do CRAN. Escolha números para jogar na mega-sena usando o R, nomeando o objeto como mega. Lembrando: são 6 valores de 1 a 60 e atribuam a um objeto. Crie um fator chamado tr, com dois níveis (“cont” e “trat”) para descrever 100 locais de amostragem, 50 de cada tratamento. O fator deve ser dessa forma cont, cont, cont, ...., cont, trat, trat, ...., trat. Crie uma matriz chamada ma, resultante da disposição de um vetor composto por 10000 valores aleatórios entre 0 e 10. A matriz deve conter 100 linhas e ser disposta por colunas. Crie um data frame chamado df, resultante da composição desses vetores: id: 1:50 sp: sp01, sp02, ..., sp49, sp50 ab: 50 valores aleatórios entre 0 a 5 Crie uma lista com os objetos criados anteriormente: mega, tr, ma e df. Selecione os elementos ímpares do objeto tr, e atribua ao objeto tr_impar. Selecione as linhas com ids pares do objeto df, e atribua ao objeto df_ids_par. Faça uma amostragem de 10 linhas do objeto df, e atribua ao objeto df_amos10. 4.6 Para se aprofundar Listamos a seguir livros e links com material que recomendamos para seguir com sua aprendizagem em R Base. 4.6.1 Livros Mayer F. P., Bonat W. H., Zeviani W. M., Krainski E. T., Ribeiro Jr. P. J. 2018. Estatística Computacional com R. [http://cursos.leg.ufpr.br/ecr/index.html] Zeviani W. M. 2019. Manual de Planejamento e Análise de Experimentos com R. [http://leg.ufpr.br/~walmes/mpaer/] Curso-R. 2021. Ciência de Dados em R. [https://livro.curso-r.com/] Adler J. 2012. R in a Nutshell: A Desktop Quick Reference. 2 ed. O’Reilly Media. Burns P. 2011. The R Inferno. [https://www.burns-stat.com/pages/Tutor/R_inferno.pdf] Cotton R. 2013. Learning R: A Step-by-Step Function Guide to Data Analysis. O’Reilly Media. Crawley MJ. 2012. The R Book. 2 ed. Wiley. Davies TM. 2016. The Book of R: A First Course in Programming and Statistics. No Starch Press. Douglas A, Roos D, Mancini F, Couto A, Lusseau D. An Introduction to R. 2021 [https://intro2r.com/] Engel C. 2019. Introduction to R. [https://cengel.github.io/R-intro/] Gillespie C., Lovelace R, 2016. Efficient R programming. O’Reilly Media. [https://bookdown.org/csgillespie/efficientR/] Grolemund G. 2014. Hands-On Programming with R. O’Reilly Media. Holmes S, Huber W. 2019. Modern Statistics for Modern Biology. Cambridge University Press. [https://www.huber.embl.de/msmb/] Irizarry RA, Love MI. 2016. Data Analysis for the Life Sciences with R. Chapman and Hall/CRC. James G, Witten D, Hastie T, Tibshirani R. 2013. An Introduction to Statistical Learning: with Applications in R. 2 ed. Springer. [http://faculty.marshall.usc.edu/gareth-james/ISL/] Kabacoff RI. 2015. R in Action: Data analysis and graphics with R. 2 ed. Manning. Lander JP. 2017. R for Everyone: Advanced Analytics and Graphics. Addison-Wesley Professional. Matloff N. 2011. The Art of R Programming: A Tour of Statistical Software Design. No Starch Press. Long JD, Teetor P. 2019. R Cookbook.2 ed. O’Reilly Media. [https://rc2e.com/] Wickham H. 2019. Advanced R. 2 ed. Chapman and Hall/CRC. [https://adv-r.hadley.nz/] Wickham H. 2015. R Packages: Organize, Test, Document, and Share Your Code. O’Reilly Media. [https://r-pkgs.org/] 4.6.2 Links Materiais sobre R R resources (free courses, books, tutorials, &amp; cheat sheets) Data Science for Ecologists and Environmental Scientists Data Analysis and Visualization in R for Ecologists A (very) shortintroduction to R - Paul Torfs &amp; Claudia Brauer R forBeginners - Emmanuel Paradis Referências "],["cap5.html", "Capítulo 5 Tidyverse Pré-requisitos do capítulo 5.1 Contextualização 5.2 tidyverse 5.3 here 5.4 readr, readxl e writexl 5.5 tibble 5.6 magrittr (pipe - %&gt;%) 5.7 tidyr 5.8 dplyr 5.9 stringr 5.10 forcats 5.11 lubridate 5.12 purrr 5.13 Exercícios 5.14 Para se aprofundar", " Capítulo 5 Tidyverse Pré-requisitos do capítulo Pacotes que serão utilizados nesse capítulo. ## Pacotes library(tidyverse) library(here) library(ggplot2) library(purrr) library(tibble) library(dplyr) library(tidyr) library(stringr) library(readr) library(forcats) library(palmerpenguins) library(lubridate) 5.1 Contextualização Como todo idioma, a linguagem R vem passando por transformações nos últimos anos. Grande parte dessas mudanças estão dentro do paradigma da Ciência de Dados (Data Science), uma nova área de conhecimento que vem se moldando a partir do desenvolvimento da sociedade em torno da era digital e da grande quantidade de dados gerados e disponíveis pela internet, de onde advém os pilares das inovações tecnológicas: Big Data, Machine Learning e Internet of Things. A grande necessidade de computação para desenvolver esse novo paradigma colocaram o R e o python como as principais linguagens de programação frente a esses novos desafios. Apesar de não serem as únicas ferramentas utilizadas para esse propósito, elas rapidamente se tornaram uma das melhores escolhas, dado vários fatores como: são de código-aberto e gratuitas, possuírem grandes comunidades contribuidoras, serem linguagens de interpretação (orientadas a objeto) e relativamente fáceis de serem aprendidas e aplicadas. Essas mudanças e expanções na utilização da linguagem R para a Ciência de Dados começaram a ser implementadas principalmente devido a um pesquisador: Hadley Wickham, que iniciou sua contribuição à comunidade R com o desenvolvimento do já consagrado pacote ggplot2 (Wickham 2016a) para a composição de gráficos no R (ver mais no Capítulo 6), baseado na gramática de gráficos (Wilkinson and Wills 2005). Depois disso, Wickham dedicou-se ao desenvolvimento do pensamento de uma nova abordagem dentro da manipulação de dados, denominada Tidy Data (Dados organizados) (Wickham 2014), na qual focou na limpeza e organização de dados. A ideia postula que dados estão tidy quando: 1) variáveis estão nas colunas, 2) observações estão nas linhas e 3) valores estão nas células, sendo que para esse último, não deve haver mais de um valor por célula (Figura 5.2). A partir dessas ideias, o tidyverse foi operacionalizado no R como uma coleção de pacotes que atuam no workflow comum da ciência de dados: importação, manipulação, exploração, visualização, análise e comunicação de dados e análises (Wickham et al. 2019) (Figura 5.1). O principal objetivo do tidyverse é aproximar a linguagem para melhorar a interação entre ser humano e computador sobre dados, de modo que os pacotes compartilham uma filosofia de design de alto nível e gramática, além da estrutura de dados de baixo nível (Wickham et al. 2019). As principais leituras sobre o tema no R são os artigos (Wickham 2014) e (Wickham et al. 2019), e o livro (Wickham and Grolemund 2017), disponível on-line neste link, além do site que possui muito mais informações. Figura 5.1: Modelo das ferramentas necessárias em um projeto típico de ciência de dados: importar, organizar, entender (transformar, visualizar, modelar) e comunicar, envolto à essas ferramentas está a programação. Adaptado de: Wickham and Grolemund (2017). 5.2 tidyverse Uma vez instalado e carregado, o pacote tidyverse disponibiliza um conjunto de ferramentas através de vários pacotes. Esses pacotes compartilham uma filosofia de design, gramática e estruturas. Podemos entender o tidyverse como um “dialeto novo” para a linguagem R, onde tidy quer dizer organizado, arrumado, ordenado, e verse é universo. A seguir, listamos os principais pacotes e suas especificações. readr: importa dados tabulares (e.g. .csv e .txt) tibble: implementa a classe tibble tidyr: transformação de dados para tidy dplyr: manipulação de dados stringr: manipulação de caracteres forcats: manipulação de fatores ggplot2: possibilita a visualização de dados purrr: disponibiliza ferramentas para programação funcional Além dos pacotes principais, fazemos também menção a outros pacotes que estão dentro dessa abordagem e que trataremos ainda neste capítulo, em outro momento do livro, ou que você leitor(a) deve se familiarizar. Alguns pacotes compõem o tidyverse outros são mais gerais, entretanto, todos estão envolvidos de alguma forma com Data Science. readxl e writexl: importa e exporta dados tabulares (.xlsx) janitor: examinar e limpar dados sujos DBI: interface de banco de dados R haven: importa e exporta dados do SPSS, Stata e SAS httr: ferramentas para trabalhar com URLs e HTTP rvest: coletar facilmente (raspe) páginas da web xml2: trabalhar com arquivos XML jsonlite: um analisador e gerador JSON simples e robusto para R hms: hora do dia lubridate: facilita o tratamento de datas magrittr: provê os operadores pipe (%&gt;%, %$%, %&lt;&gt;%) glue: facilita combinar dados e caracteres rmarkdown: cria documentos de análise dinâmica que combinam código, saída renderizada (como figuras) e texto knitr: projetado para ser um mecanismo transparente para geração de relatórios dinâmicos com R shiny: framework de aplicativo Web para R flexdashboard: painéis interativos para R here: facilita a definição de diretórios usethis: automatiza tarefas durante a configuração e desenvolvimento de projetos (Git, ‘GitHub’ e Projetos RStudio) data.table: pacote que fornece uma versão de alto desempenho do data.frame (importar, manipular e expotar) reticulate: pacote que fornece ferramentas para integrar Python e R sparklyr: interface R para Apache Spark broom: converte objetos estatísticos em tibbles organizados modelr: funções de modelagem que funcionam com o pipe tidymodels: coleção de pacotes para modelagem e aprendizado de máquina usando os princípios do tidyverse Destacamos a grande expansão e aplicabilidade dos pacotes rmarkdown, knitr e bookdown, que permitiram a escrita desse livro usando essas ferramentas. Para instalar os principais pacotes que integram o tidyverse podemos instalar o pacote tidyverse. ## Instalar o pacote tidyverse install.packages(&quot;tidyverse&quot;) Quando carregamos o pacote tidyverse podemos notar uma mensagem indicando quais pacotes foram carregados, suas respectivas versões e os conflitos com outros pacotes. ## Carregar o pacote tidyverse library(tidyverse) Podemos ainda listar todos os pacotes do tidyverse com a função tidyverse::tidyverse_packages(). ## Listar todos os pacotes do tidyverse tidyverse::tidyverse_packages() #&gt; [1] &quot;broom&quot; &quot;cli&quot; &quot;crayon&quot; &quot;dbplyr&quot; &quot;dplyr&quot; &quot;dtplyr&quot; #&gt; [7] &quot;forcats&quot; &quot;googledrive&quot; &quot;googlesheets4&quot; &quot;ggplot2&quot; &quot;haven&quot; &quot;hms&quot; #&gt; [13] &quot;httr&quot; &quot;jsonlite&quot; &quot;lubridate&quot; &quot;magrittr&quot; &quot;modelr&quot; &quot;pillar&quot; #&gt; [19] &quot;purrr&quot; &quot;readr&quot; &quot;readxl&quot; &quot;reprex&quot; &quot;rlang&quot; &quot;rstudioapi&quot; #&gt; [25] &quot;rvest&quot; &quot;stringr&quot; &quot;tibble&quot; &quot;tidyr&quot; &quot;xml2&quot; &quot;tidyverse&quot; Também podemos verificar se os pacotes estão atualizados, senão, podemos atualizá-los com a função tidyverse::tidyverse_update(). ## Verificar e atualizar os pacotes do tidyverse tidyverse::tidyverse_update(repos = &quot;http://cran.us.r-project.org&quot;) Apesar de podermos fazer a instalação e carregamento de todos os pacotes juntos, usando o pacote tidyverse, podemos instalar e carregar os pacotes individualmente. ## Instalar os pacotes do tidyverse individualmente install.packages(c(&quot;ggplot2&quot;, &quot;purrr&quot;, &quot;tibble&quot;, &quot;dplyr&quot;, &quot;tidyr&quot;, &quot;stringr&quot;, &quot;readr&quot;, &quot;forcats&quot;), dependencies = TRUE) ## Carregar os pacotes do tidyverse individualmente library(ggplot2) library(purrr) library(tibble) library(dplyr) library(tidyr) library(stringr) library(readr) library(forcats) Todas as funções dos pacotes tidyverse usam fonte minúscula e _ (underscore) para separar os nomes internos das funções, seguindo a mesma sintaxe do python (“Snake Case”). Neste sentido de padronização, é importante destacar ainda que existe um guia próprio para que os scripts sigam a recomendação de padronização, o The tidyverse style guide, criado pelo Hadley Wickham. Para pessoas que desenvolvem existe o Tidyverse design guide criado pelo Tidyverse team. ## Funções no formato snake case read_csv() read_xlsx() as_tibble() left_join() group_by() Por fim, para evitar possíveis conflitos de funções com o mesmo nome entre pacotes, recomendamos fortemente o hábito de usar as funções precedidas do operador :: e o respectivo pacote. Assim, garante-se que a função utilizada é referente ao pacote daquela função. Segue um exemplo com as funções apresentadas anteriormente. ## Funções seguidas de seus respectivos pacotes readr::read_csv() readxl::read_xlsx() tibble::as_tibble() dplyr::left_join() dplyr::group_by() Seguindo essas ideias do novo paradigma da Ciência de Dados, outro conjunto de pacotes foi desenvolvido, chamado de tidymodels que atuam no workflow da análise de dados em ciência de dados: separação e reamostragem, pré-processamento, ajuste de modelos e métricas de performasse de ajustes. Por razões de espaço e especificidade, não entraremos em detalhes desse pacote. Seguindo o workflow da Figura 5.1, iremos ver nos itens das próximas seções como esses passos são realizados com funções de cada pacote. 5.3 here Dentro do workflow do tidyverse, devemos sempre trabalhar com Projetos do RStudio. Junto com o projeto, também podemos fazer uso do pacote here. Ele permite construir caminhos para os arquivos do projeto de forma mais simples e com maior reprodutibilidade. Esse pacote cobre o ponto que discutimos no capítulo 4, dado que muitas vezes mudar o diretório com a função setwd() tende a ser demorado, principalmente quando se trata de um script em que várias pessoas estão trabalhando em diferentes computadores e sistemas operacionais. Além disso, ele elimina a questão da fragilidade dos scripts, pois geralmente um script está com os diretórios conectados exatamente a um lugar e a um momento. Por fim, ele também simplifica o trabalho com subdiretórios, facilitando importar ou exportar arquivos para subpastas. Seu uso é relativamente simples: uma vez criado e aberto o RStudio pelo Projeto do RStudio, o diretório automaticamente é definido para o diretório do projeto. Depois disso, podemos usar a função here::here() para definir os subdiretórios onde estão os dados. O exemplo da aplicação fica para a seção seguinte, quando iremos de fato importar um arquivo para o R. Logo abaixo, mostramos como instalar e carregar o pacote here. ## Instalar install.packages(&quot;here&quot;) ## Carregar library(here) 5.4 readr, readxl e writexl Dado que possuímos um conjunto de dados e que geralmente esse conjunto de dados estará no formato tabular com umas das extensões: .csv, .txt ou .xlsx, usaremos o pacote readr ou readxl para importar esses dados para o R. Esses pacotes leem e escrevem grandes arquivos de forma mais rápida, além de fornecerem medidores de progresso de importação e exportação, e imprimir a informação dos modos das colunas quando faz a importação. Outro ponto bastante positivo é que também classificam automaticamente o modo dos dados de cada coluna, i.e., se uma coluna possui dados numéricos ou apenas texto, essa informação será considerada para classificar o modo da coluna toda. A classe do objeto atribuído quando lido por esses pacotes é automaticamente um tibble, que veremos melhor na seção seguinte. Todas as funções deste pacote são listadas na página de referência do pacote. Usamos as funções readr::read_csv() e readr::write_csv() para importar e exportar arquivos .csv do R, respectivamente. Para dados com a extensão .txt, podemos utilizar as funções readr::read_tsv() ou ainda readr::read_delim(). Para arquivos tabulares com a extensão .xlsx, temos de instalar e carregar dois pacotes adicionais: readxl e writexl, dos quais usaremos as funções readxl::read_excel(), readxl::read_xlsx() ou readxl::read_xls() para importar dados, atentado para o fato de podermos indicar a aba com os dados com o argumento sheet, e writexl::write_xlsx() para exportar. ## Instalar install.packages(&quot;writexl&quot;) ## Carregar library(readxl) library(writexl) Se o arquivo .csv foi criado com separador de decimais sendo . e separador de colunas sendo ,, usamos as funções normalmente. Caso seja criado com separador de decimais sendo , e separador de colunas sendo ;, usaríamos a função readr::read_csv2() para importar e readr::write_csv2() para exportar nesse formato, que é mais comum no Brasil. Para exemplificar como essas funções funcionam, vamos importar novamente os dados de comunidades de anfíbios da Mata Atlântica (Atlantic Amphibians, Vancine et al. (2018)), que fizemos o download no Capítulo 4. Estamos usando a função readr::read_csv(), indicando os diretórios com a função here::here(), e a classe do arquivo é tibble. Devemos atentar para o argumento locale = readr::locale(encoding = \"latin1\", que selecionamos aqui como latin1 para corrigir um erro do autor dos dados que publicou esse data paper com erros… ## Importar locais tidy_anfibios_locais &lt;- readr::read_csv( here::here(&quot;dados&quot;, &quot;tabelas&quot;, &quot;ATLANTIC_AMPHIBIANS_sites.csv&quot;), locale = readr::locale(encoding = &quot;latin1&quot;) ) #&gt; Rows: 1163 Columns: 25 #&gt; ── Column specification ────────────────────────────────────────────────────────────────────────────────────────── #&gt; Delimiter: &quot;,&quot; #&gt; chr (13): id, record, sampled_habitat, active_methods, passive_methods, complementary_methods, period, country... #&gt; dbl (12): reference_number, species_number, month_start, year_start, month_finish, year_finish, effort_months,... #&gt; #&gt; ℹ Use `spec()` to retrieve the full column specification for this data. #&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados data(tidy_anfibios_locais) head(tidy_anfibios_locais) Para se aprofundar no tema, recomendamos a leitura do Capítulo 11 Data import de Wickham and Grolemund (2017). 5.5 tibble O tibble (tbl_sf) é uma versão aprimorada do data frame (data.frame). Ele é a classe aconselhada para que as funções do tidyverse funcionem melhor sobre conjuntos de dados tabulares importados para o R. Geralmente, quando utilizamos funções tidyverse para importar dados para o R, é essa classe que os dados adquirem depois de importados. Além da importação de dados, podemos criar um tibble no R usando a função tibble::tibble(), semelhante ao uso da função data.frame(). Podemos ainda converter um data.frame para um tibble usando a função tibble::as_tibble(). Entretanto, em alguns momentos precisaremos da classe data.frame para algumas funções específicas, e podemos converter um tibble para data.frame usando a função tibble::as_data_frame(). Existem duas diferenças principais no uso do tibble e do data.frame: impressão e subconjunto. Objetos da classe tibbles possuem um método de impressão que mostra a contagem do número de linhas e colunas, e apenas as primeiras 10 linhas e todas as colunas que cabem na tela no console, além dos modos ou tipos das colunas. Dessa forma, cada coluna ou variável, pode ser do modo numbers (int ou dbl), character (chr), logical (lgl), factor (fctr), date + time (dttm) e date (date), além de outras inúmeras possibilidades. Todas as funções deste pacote são listadas na página de referência do pacote. ## Tibble - impressão tidy_anfibios_locais #&gt; # A tibble: 1,163 × 25 #&gt; id reference_number species_number record sampled_habitat active_methods passive_methods complementary_me… #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 amp1001 1001 19 ab fo,ll as pt &lt;NA&gt; #&gt; 2 amp1002 1002 16 co fo,la,ll as pt &lt;NA&gt; #&gt; 3 amp1003 1002 14 co fo,la,ll as pt &lt;NA&gt; #&gt; 4 amp1004 1002 13 co fo,la,ll as pt &lt;NA&gt; #&gt; 5 amp1005 1003 30 co fo,ll,br as &lt;NA&gt; &lt;NA&gt; #&gt; 6 amp1006 1004 42 co tp,pp,la,ll,is &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 7 amp1007 1005 23 co sp as &lt;NA&gt; &lt;NA&gt; #&gt; 8 amp1008 1005 19 co sp,la,sw as,sb,tr &lt;NA&gt; &lt;NA&gt; #&gt; 9 amp1009 1005 13 ab fo &lt;NA&gt; pt &lt;NA&gt; #&gt; 10 amp1010 1006 1 ab fo &lt;NA&gt; pt &lt;NA&gt; #&gt; # … with 1,153 more rows, and 17 more variables: period &lt;chr&gt;, month_start &lt;dbl&gt;, year_start &lt;dbl&gt;, #&gt; # month_finish &lt;dbl&gt;, year_finish &lt;dbl&gt;, effort_months &lt;dbl&gt;, country &lt;chr&gt;, state &lt;chr&gt;, #&gt; # state_abbreviation &lt;chr&gt;, municipality &lt;chr&gt;, site &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, #&gt; # coordinate_precision &lt;chr&gt;, altitude &lt;dbl&gt;, temperature &lt;dbl&gt;, precipitation &lt;dbl&gt; Para o subconjunto, como vimos anteriormente, para selecionar colunas e linhas de objetos bidimensionais podemos utilizar os operadores [] ou [[]], associado com números separados por vírgulas ou o nome da coluna entre aspas, e o operador $ para extrair uma coluna pelo seu nome. Comparando um data.frame a um tibble, o último é mais rígido na seleção das colunas: eles nunca fazem correspondência parcial e gerarão um aviso se a coluna que você está tentando acessar não existir. ## Tibble - subconjunto tidy_anfibios_locais$ref #&gt; Warning: Unknown or uninitialised column: `ref`. #&gt; NULL Por fim, podemos “espiar” os dados utilizando a função tibble::glimpse() para ter uma noção geral de número de linhas, colunas, e conteúdo de todas as colunas. Essa é função tidyverse da função R Base str(). ## Espiar os dados tibble::glimpse(tidy_anfibios_locais[, 1:10]) #&gt; Rows: 1,163 #&gt; Columns: 10 #&gt; $ id &lt;chr&gt; &quot;amp1001&quot;, &quot;amp1002&quot;, &quot;amp1003&quot;, &quot;amp1004&quot;, &quot;amp1005&quot;, &quot;amp1006&quot;, &quot;amp1007&quot;, &quot;amp1… #&gt; $ reference_number &lt;dbl&gt; 1001, 1002, 1002, 1002, 1003, 1004, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1006… #&gt; $ species_number &lt;dbl&gt; 19, 16, 14, 13, 30, 42, 23, 19, 13, 1, 1, 2, 4, 4, 6, 5, 8, 2, 5, 1, 2, 2, 1, 2, 2… #&gt; $ record &lt;chr&gt; &quot;ab&quot;, &quot;co&quot;, &quot;co&quot;, &quot;co&quot;, &quot;co&quot;, &quot;co&quot;, &quot;co&quot;, &quot;co&quot;, &quot;ab&quot;, &quot;ab&quot;, &quot;ab&quot;, &quot;ab&quot;, &quot;ab&quot;, &quot;ab&quot;… #&gt; $ sampled_habitat &lt;chr&gt; &quot;fo,ll&quot;, &quot;fo,la,ll&quot;, &quot;fo,la,ll&quot;, &quot;fo,la,ll&quot;, &quot;fo,ll,br&quot;, &quot;tp,pp,la,ll,is&quot;, &quot;sp&quot;, &quot;… #&gt; $ active_methods &lt;chr&gt; &quot;as&quot;, &quot;as&quot;, &quot;as&quot;, &quot;as&quot;, &quot;as&quot;, NA, &quot;as&quot;, &quot;as,sb,tr&quot;, NA, NA, NA, NA, NA, NA, NA, NA… #&gt; $ passive_methods &lt;chr&gt; &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, NA, NA, NA, NA, &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, &quot;pt&quot;, … #&gt; $ complementary_methods &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #&gt; $ period &lt;chr&gt; &quot;mo,da,tw,ni&quot;, &quot;mo,da,tw,ni&quot;, &quot;mo,da,tw,ni&quot;, &quot;mo,da,tw,ni&quot;, &quot;mo,da,ni&quot;, NA, NA, &quot;t… #&gt; $ month_start &lt;dbl&gt; 9, 12, 12, 12, 7, NA, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, … Para se aprofundar no tema, recomendamos a leitura do Capítulo 10 Tibbles de Wickham and Grolemund (2017). 5.6 magrittr (pipe - %&gt;%) O operador pipe %&gt;% permite o encadeamento de várias funções, eliminando a necessidade de criar objetos para armazenar resultados intermediários. Dessa forma, pipes são uma ferramenta poderosa para expressar uma sequência de múltiplas operações. O operador pipe %&gt;% vem do pacote magrittr, entretanto, todos os pacotes no tidyverse automaticamente tornam o pipe disponível. Essa função torna os códigos em R mais simples, pois realizamos múltiplas operações em uma única linha. Ele captura o resultado de uma declaração e o torna a entrada da próxima declaração, então podemos pensar como “EM SEGUIDA FAÇA” ao final de cada linha de código. Todas as funções deste pacote são listadas na página de referência do pacote. A principal vantagem do uso dos pipes é facilitar o debuging (achar erros) nos códigos, porque seu uso torna a linguagem R mais próxima do que falamos e pensamos, uma vez que evita o uso de funções dentro de funções (funções compostas, lembra-se do fog e gof? Evitamos eles aqui também…). Digitar %&gt;% é um pouco chato, dessa forma, existe um atalho para sua inserção nos scripts: Ctrl + Shift + M. Para deixar esse tópico menos estranho a quem possa ver essa operação pela primeira vez, vamos fazer alguns exemplos. ## Base R - sem pipe sqrt(sum(1:100)) #&gt; [1] 71.06335 ## Tidyverse - com pipe 1:100 %&gt;% sum() %&gt;% sqrt() #&gt; [1] 71.06335 Essas operações ainda estão simples, vamos torná-las mais complexas com várias funções compostas. É nesses casos que a propriedade organizacional do uso do pipe emerge: podemos facilmente ver o encadeamento de operações, onde cada função é disposta numa linha. Apenas um adendo: a função set.seed() que fixa a amostragem de funções que geram valores aleatório, como é o caso da função rpois(). ## Fixar amostragem set.seed(42) ## Base R - sem pipe ve &lt;- sum(sqrt(sort(log10(rpois(100, 10))))) ve #&gt; [1] 99.91426 ## Fixar amostragem set.seed(42) ## Tidyverse - com pipe ve &lt;- rpois(100, 10) %&gt;% log10() %&gt;% sort() %&gt;% sqrt() %&gt;% sum() ve #&gt; [1] 99.91426 O uso do pipe vai se tornar especialmente útil quando seguirmos para os pacotes das próximas duas seções: tidyr e dplyr. Com esses pacotes faremos operações em linhas e colunas de nossos dados tabulares, então podemos encadear uma série de funções para manipulação, limpeza e análise de dados. Há ainda três outras variações do pipe que podem ser úteis em alguns momentos, mas que para funcionar precisam que o pacotemagrittr seja carregado: %T&gt;%: retorna o lado esquerdo em vez do lado direito %$%: “explode” as variáveis em um quadro de dados %&lt;&gt;%: permite atribuição usando pipes Para se aprofundar no tema, recomendamos a leitura do Capítulo 18 Pipes de Wickham and Grolemund (2017). Observação: A partir da versão do R 4.1+ (18/05/2021), o operador pipe se tornou nativo do R. Entretanto, o operador foi atualizado para |&gt;, podendo ser inserido com o mesmo atalho Ctrl + Shift + M, mas necessitando uma mudança de opção em Tools &gt; Global Options &gt; Code &gt; [x] Use native pipe operator, |&gt; (requires R 4.1+), necessitando que o RStudio esteja numa versão igual ou superior a 1.4.17+. 5.7 tidyr Os conjuntos de dados tidy (organizados) são mais fáceis de manipular, modelar e visualizar. Um conjunto de dados está no formato tidy ou não, dependendo de como linhas, colunas e células são combinadas com observações, variáveis e valores. Nos dados tidy, as variáveis estão nas colunas, observações estão nas linhas e valores estão nas células, sendo que para esse último, não deve haver mais de um valor por célula (Figura 5.2). Cada variável em uma coluna Cada observação em uma linha Cada valor como uma célula Figura 5.2: As três regras que tornam um conjunto de dados tidy. Adaptado de: Wickham and Grolemund (2017). Todas as funções deste pacote são listadas na página de referência do pacote. Para realizar diversas transformações nos dados, a fim de ajustá-los ao formato tidy existe uma série de funções, para: unir colunas, separar colunas, lidar com valores faltantes (NA), transformar a base de dados de formato longo para largo (ou vice-e-versa), além de outras funções específicas. unite(): junta dados de múltiplas colunas em uma coluna separate(): separa caracteres em múltiplas colunas separate_rows(): separa caracteres em múltiplas colunas e linhas drop_na(): retira linhas com NA do conjunto de dados replace_na(): substitui NA do conjunto de dados pivot_wider(): transforma um conjunto de dados longo (long) para largo (wide) pivot_longer(): transforma um conjunto de dados largo (wide) para longo (long) 5.7.1 palmerpenguins Para exemplificar o funcionamento dessas funções, usaremos os dados de medidas de pinguins chamados palmerpenguins, disponíveis no pacote palmerpenguins. ## Instalar o pacote install.packages(&quot;palmerpenguins&quot;) Esses dados foram coletados e disponibilizados pela Dra. Kristen Gorman e pela Palmer Station, Antarctica LTER, membro da Long Term Ecological Research Network. O pacote palmerpenguins contém dois conjuntos de dados. Um é chamado de penguins, e é uma versão simplificada dos dados brutos. O segundo conjunto de dados é penguins_raw e contém todas as variáveis e nomes originais baixados. Ambos os conjuntos de dados contêm dados para 344 pinguins, de três espécies diferentes, coletados em três ilhas no arquipélago de Palmer, na Antártica. Destacamos também a versão traduzida desses dados para o português, disponível no pacote dados. Vamos utilizar principalmente o conjunto de dados penguins_raw, que é a versão dos dados brutos. ## Carregar o pacote palmerpenguins library(palmerpenguins) Pomode ainda vericar os dados, pedindo uma ajuda de cada um dos objetos. ## Ajuda dos dados ?penguins ?penguins_raw 5.7.2 glimpse() Primeiramente, vamos observar os dados e utilizar a função tibble::glimpse() para ter uma noção geral. ## Visualizar os dados penguins_raw #&gt; # A tibble: 344 × 17 #&gt; studyName `Sample Number` Species Region Island Stage `Individual ID` `Clutch Complet… `Date Egg` #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; #&gt; 1 PAL0708 1 Adelie Penguin … Anvers Torger… Adult, 1… N1A1 Yes 2007-11-11 #&gt; 2 PAL0708 2 Adelie Penguin … Anvers Torger… Adult, 1… N1A2 Yes 2007-11-11 #&gt; 3 PAL0708 3 Adelie Penguin … Anvers Torger… Adult, 1… N2A1 Yes 2007-11-16 #&gt; 4 PAL0708 4 Adelie Penguin … Anvers Torger… Adult, 1… N2A2 Yes 2007-11-16 #&gt; 5 PAL0708 5 Adelie Penguin … Anvers Torger… Adult, 1… N3A1 Yes 2007-11-16 #&gt; 6 PAL0708 6 Adelie Penguin … Anvers Torger… Adult, 1… N3A2 Yes 2007-11-16 #&gt; 7 PAL0708 7 Adelie Penguin … Anvers Torger… Adult, 1… N4A1 No 2007-11-15 #&gt; 8 PAL0708 8 Adelie Penguin … Anvers Torger… Adult, 1… N4A2 No 2007-11-15 #&gt; 9 PAL0708 9 Adelie Penguin … Anvers Torger… Adult, 1… N5A1 Yes 2007-11-09 #&gt; 10 PAL0708 10 Adelie Penguin … Anvers Torger… Adult, 1… N5A2 Yes 2007-11-09 #&gt; # … with 334 more rows, and 8 more variables: Culmen Length (mm) &lt;dbl&gt;, Culmen Depth (mm) &lt;dbl&gt;, #&gt; # Flipper Length (mm) &lt;dbl&gt;, Body Mass (g) &lt;dbl&gt;, Sex &lt;chr&gt;, Delta 15 N (o/oo) &lt;dbl&gt;, Delta 13 C (o/oo) &lt;dbl&gt;, #&gt; # Comments &lt;chr&gt; ## Espiar os dados dplyr::glimpse(penguins_raw) #&gt; Rows: 344 #&gt; Columns: 17 #&gt; $ studyName &lt;chr&gt; &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0… #&gt; $ `Sample Number` &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,… #&gt; $ Species &lt;chr&gt; &quot;Adelie Penguin (Pygoscelis adeliae)&quot;, &quot;Adelie Penguin (Pygoscelis adeliae)&quot;, &quot;Ade… #&gt; $ Region &lt;chr&gt; &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;A… #&gt; $ Island &lt;chr&gt; &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Tor… #&gt; $ Stage &lt;chr&gt; &quot;Adult, 1 Egg Stage&quot;, &quot;Adult, 1 Egg Stage&quot;, &quot;Adult, 1 Egg Stage&quot;, &quot;Adult, 1 Egg St… #&gt; $ `Individual ID` &lt;chr&gt; &quot;N1A1&quot;, &quot;N1A2&quot;, &quot;N2A1&quot;, &quot;N2A2&quot;, &quot;N3A1&quot;, &quot;N3A2&quot;, &quot;N4A1&quot;, &quot;N4A2&quot;, &quot;N5A1&quot;, &quot;N5A2&quot;, &quot;N… #&gt; $ `Clutch Completion` &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, … #&gt; $ `Date Egg` &lt;date&gt; 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16, 2007-11-16, 2007-11-16, 2007-11-1… #&gt; $ `Culmen Length (mm)` &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, … #&gt; $ `Culmen Depth (mm)` &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, … #&gt; $ `Flipper Length (mm)` &lt;dbl&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195… #&gt; $ `Body Mass (g)` &lt;dbl&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, … #&gt; $ Sex &lt;chr&gt; &quot;MALE&quot;, &quot;FEMALE&quot;, &quot;FEMALE&quot;, NA, &quot;FEMALE&quot;, &quot;MALE&quot;, &quot;FEMALE&quot;, &quot;MALE&quot;, NA, NA, NA, NA… #&gt; $ `Delta 15 N (o/oo)` &lt;dbl&gt; NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18718, 9.46060, NA, 9.13362, 8.63243… #&gt; $ `Delta 13 C (o/oo)` &lt;dbl&gt; NA, -24.69454, -25.33302, NA, -25.32426, -25.29805, -25.21799, -24.89958, NA, -25.… #&gt; $ Comments &lt;chr&gt; &quot;Not enough blood for isotopes.&quot;, NA, NA, &quot;Adult not sampled.&quot;, NA, NA, &quot;Nest neve… 5.7.3 unite() Primeiramente, vamos exemplificar como juntar e separar colunas. Vamos utilizar a função tidyr::unite() para unir as colunas. Há diversos parâmetros para alterar como essa função funciona, entretanto, é importante destacar três deles: col nome da coluna que vai receber as colunas unidas, sep indicando o caracter separador das colunas unidas, e remove para uma resposta lógica se as colunas unidas são removidas ou não. Vamos unir as colunas “Region” e “Island” na nova coluna “region_island.” ## Unir colunas penguins_raw_unir &lt;- tidyr::unite(data = penguins_raw, col = &quot;region_island&quot;, Region:Island, sep = &quot;, &quot;, remove = FALSE) head(penguins_raw_unir[, c(&quot;Region&quot;, &quot;Island&quot;, &quot;region_island&quot;)]) #&gt; # A tibble: 6 × 3 #&gt; Region Island region_island #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Anvers Torgersen Anvers, Torgersen #&gt; 2 Anvers Torgersen Anvers, Torgersen #&gt; 3 Anvers Torgersen Anvers, Torgersen #&gt; 4 Anvers Torgersen Anvers, Torgersen #&gt; 5 Anvers Torgersen Anvers, Torgersen #&gt; 6 Anvers Torgersen Anvers, Torgersen 5.7.4 separate() De forma contrária, podemos utilizar as funções tidyr::separate() e tidyr::separate_rows() para separar elementos de uma coluna em mais colunas. Respectivamente, a primeira função separa uma coluna em novas colunas conforme a separação, e a segunda função separa uma coluna, distribuindo os elementos também nas linhas. Novamente, há diversos parâmetros para mudar o comportamento dessas funções, mas destacaremos aqui quatro deles: col coluna a ser separada, into os nomes das novas colunas, sep indicando o caractere separador das colunas, e remove para uma resposta lógica se as colunas separadas são removidas ou não. Vamos separar a coluna “Stage” nas colunas “stage” e “egg_stage.” ## Separar colunas penguins_raw_separar &lt;- tidyr::separate(data = penguins_raw, col = Stage, into = c(&quot;stage&quot;, &quot;egg_stage&quot;), sep = &quot;, &quot;, remove = FALSE) head(penguins_raw_separar[, c(&quot;Stage&quot;, &quot;stage&quot;, &quot;egg_stage&quot;)]) #&gt; # A tibble: 6 × 3 #&gt; Stage stage egg_stage #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Adult, 1 Egg Stage Adult 1 Egg Stage #&gt; 2 Adult, 1 Egg Stage Adult 1 Egg Stage #&gt; 3 Adult, 1 Egg Stage Adult 1 Egg Stage #&gt; 4 Adult, 1 Egg Stage Adult 1 Egg Stage #&gt; 5 Adult, 1 Egg Stage Adult 1 Egg Stage #&gt; 6 Adult, 1 Egg Stage Adult 1 Egg Stage ## Separar colunas em novas linhas penguins_raw_separar_linhas &lt;- tidyr::separate_rows(data = penguins_raw, Stage, sep = &quot;, &quot;) head(penguins_raw_separar_linhas[, c(&quot;studyName&quot;, &quot;Sample Number&quot;, &quot;Species&quot;, &quot;Region&quot;, &quot;Island&quot;, &quot;Stage&quot;)]) #&gt; # A tibble: 6 × 6 #&gt; studyName `Sample Number` Species Region Island Stage #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 PAL0708 1 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult #&gt; 2 PAL0708 1 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen 1 Egg Stage #&gt; 3 PAL0708 2 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult #&gt; 4 PAL0708 2 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen 1 Egg Stage #&gt; 5 PAL0708 3 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult #&gt; 6 PAL0708 3 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen 1 Egg Stage 5.7.5 drop_na() e replace_na() Valores faltantes (NA) é um tipo especial de elemento que discutimos no Capítulo 4, e são relativamente comuns em conjuntos de dados. Em Base R, vimos algumas formas de lidar com esse tipo de elemento. No formato tidyverse, existem várias formas de lidar com eles, mas aqui focaremos nas funções tidyr::drop_na() e tidyr::replace_na(), para retirar linhas e substitui-los, respectivamente. ## Remover todas as linhas com NAs penguins_raw_todas_na &lt;- tidyr::drop_na(data = penguins_raw) head(penguins_raw_todas_na) #&gt; # A tibble: 6 × 17 #&gt; studyName `Sample Number` Species Region Island Stage `Individual ID` `Clutch Complet… `Date Egg` `Culmen Length … `Culmen Depth (… #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 PAL0708 7 Adelie… Anvers Torge… Adul… N4A1 No 2007-11-15 38.9 17.8 #&gt; 2 PAL0708 8 Adelie… Anvers Torge… Adul… N4A2 No 2007-11-15 39.2 19.6 #&gt; 3 PAL0708 29 Adelie… Anvers Biscoe Adul… N18A1 No 2007-11-10 37.9 18.6 #&gt; 4 PAL0708 30 Adelie… Anvers Biscoe Adul… N18A2 No 2007-11-10 40.5 18.9 #&gt; 5 PAL0708 39 Adelie… Anvers Dream Adul… N25A1 No 2007-11-13 37.6 19.3 #&gt; 6 PAL0809 69 Adelie… Anvers Torge… Adul… N32A1 No 2008-11-11 35.9 16.6 #&gt; # … with 6 more variables: Flipper Length (mm) &lt;dbl&gt;, Body Mass (g) &lt;dbl&gt;, Sex &lt;chr&gt;, Delta 15 N (o/oo) &lt;dbl&gt;, #&gt; # Delta 13 C (o/oo) &lt;dbl&gt;, Comments &lt;chr&gt; ## Remover linhas de colunas específicas com NAs penguins_raw_colunas_na &lt;- tidyr::drop_na(data = penguins_raw, any_of(&quot;Comments&quot;)) head(penguins_raw_colunas_na[, &quot;Comments&quot;]) #&gt; # A tibble: 6 × 1 #&gt; Comments #&gt; &lt;chr&gt; #&gt; 1 Not enough blood for isotopes. #&gt; 2 Adult not sampled. #&gt; 3 Nest never observed with full clutch. #&gt; 4 Nest never observed with full clutch. #&gt; 5 No blood sample obtained. #&gt; 6 No blood sample obtained for sexing. ## Substituir NAs por outro valor penguins_raw_subs_na &lt;- tidyr::replace_na(data = penguins_raw, list(Comments = &quot;Unknown&quot;)) head(penguins_raw_subs_na[, &quot;Comments&quot;]) #&gt; # A tibble: 6 × 1 #&gt; Comments #&gt; &lt;chr&gt; #&gt; 1 Not enough blood for isotopes. #&gt; 2 Unknown #&gt; 3 Unknown #&gt; 4 Adult not sampled. #&gt; 5 Unknown #&gt; 6 Unknown 5.7.6 pivot_longer() e pivot_wider() Por fim, trataremos da pivotagem ou remodelagem de dados. Veremos como mudar o formato do nosso conjunto de dados de longo (long) para largo (wide) e vice-versa. Essa é uma operação semelhante à “Tabela Dinâmica” das planilhas eletrônicas. Consiste em usar uma coluna para distribuir seus valores em outras colunas, de modo que os valores dos elementos são preenchidos corretamente, reduzindo assim o número de linhas. Essa operação é bastante comum em Ecologia de Comunidades, quando queremos transformar uma lista de espécies em uma matriz de comunidades, com várias espécies nas colunas. Para realizar essa operação, usarmos a função tidyr::pivot_wider(). Dos diversos parâmetros que podem compor essa função, dois deles são fundamentais: names_from que indica a coluna de onde os nomes serão usados e values_from a coluna com os valores. ## Selecionar colunas penguins_raw_sel_col &lt;- penguins_raw[, c(2, 3, 13)] head(penguins_raw_sel_col) #&gt; # A tibble: 6 × 3 #&gt; `Sample Number` Species `Body Mass (g)` #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 Adelie Penguin (Pygoscelis adeliae) 3750 #&gt; 2 2 Adelie Penguin (Pygoscelis adeliae) 3800 #&gt; 3 3 Adelie Penguin (Pygoscelis adeliae) 3250 #&gt; 4 4 Adelie Penguin (Pygoscelis adeliae) NA #&gt; 5 5 Adelie Penguin (Pygoscelis adeliae) 3450 #&gt; 6 6 Adelie Penguin (Pygoscelis adeliae) 3650 ## Pivotar para largo penguins_raw_pivot_wider &lt;- tidyr::pivot_wider(data = penguins_raw_sel_col, names_from = Species, values_from = `Body Mass (g)`) head(penguins_raw_pivot_wider) #&gt; # A tibble: 6 × 4 #&gt; `Sample Number` `Adelie Penguin (Pygoscelis adeliae)` `Gentoo penguin (Pygoscelis papua)` `Chinstrap penguin (P… #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 3750 4500 3500 #&gt; 2 2 3800 5700 3900 #&gt; 3 3 3250 4450 3650 #&gt; 4 4 NA 5700 3525 #&gt; 5 5 3450 5400 3725 #&gt; 6 6 3650 4550 3950 De modo oposto, podemos partir de um conjunto de dados largo (wide), ou seja, com várias colunas, e queremos que essas colunas preencham uma única coluna, e que os valores antes espalhados nessas várias colunas sejam adicionados um embaixo do outro, numa única coluna. Para essa operação, podemos utilizar a função tidyr::pivot_longer(). Novamente, dos diversos parâmetros que podem compor essa função, três deles são fundamentais: cols indicando as colunas que serão usadas para serem pivotadas, names_to que indica a coluna de onde os nomes serão usados e values_to a coluna com os valores. ## Selecionar colunas penguins_raw_sel_col &lt;- penguins_raw[, c(2, 3, 10:13)] head(penguins_raw_sel_col) #&gt; # A tibble: 6 × 6 #&gt; `Sample Number` Species `Culmen Length (mm… `Culmen Depth (m… `Flipper Length (… `Body Mass (g)` #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 Adelie Penguin (Pygosc… 39.1 18.7 181 3750 #&gt; 2 2 Adelie Penguin (Pygosc… 39.5 17.4 186 3800 #&gt; 3 3 Adelie Penguin (Pygosc… 40.3 18 195 3250 #&gt; 4 4 Adelie Penguin (Pygosc… NA NA NA NA #&gt; 5 5 Adelie Penguin (Pygosc… 36.7 19.3 193 3450 #&gt; 6 6 Adelie Penguin (Pygosc… 39.3 20.6 190 3650 ## Pivotar para largo penguins_raw_pivot_longer &lt;- tidyr::pivot_longer(data = penguins_raw_sel_col, cols = `Culmen Length (mm)`:`Body Mass (g)`, names_to = &quot;medidas&quot;, values_to = &quot;valores&quot;) head(penguins_raw_pivot_longer) #&gt; # A tibble: 6 × 4 #&gt; `Sample Number` Species medidas valores #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 Adelie Penguin (Pygoscelis adeliae) Culmen Length (mm) 39.1 #&gt; 2 1 Adelie Penguin (Pygoscelis adeliae) Culmen Depth (mm) 18.7 #&gt; 3 1 Adelie Penguin (Pygoscelis adeliae) Flipper Length (mm) 181 #&gt; 4 1 Adelie Penguin (Pygoscelis adeliae) Body Mass (g) 3750 #&gt; 5 2 Adelie Penguin (Pygoscelis adeliae) Culmen Length (mm) 39.5 #&gt; 6 2 Adelie Penguin (Pygoscelis adeliae) Culmen Depth (mm) 17.4 Para se aprofundar no tema, recomendamos a leitura do Capítulo 12 Tidy data de Wickham and Grolemund (2017). 5.8 dplyr O dplyr é um pacote que facilita a manipulação de dados, com uma gramática simples e flexível (por exemplo, como filtragem, reordenamento, seleção, entre outras). Ele foi construído com o intuito de obter uma forma mais rápida e expressiva de manipular dados tabulares. O tibble é a versão de data frame mais conveniente para se usar com pacote dplyr. Todas as funções deste pacote são listadas na página de referência do pacote. 5.8.1 Gramática Sua gramática simples contém funções verbais para manipulação de dados, baseada em: Verbos: mutate(), select(), filter(), arrange(), summarise(), slice(), rename(), etc. Replicação: across(), if_any(), if_all(), where(), starts_with(), ends_with(), contains(), etc. Agrupamento: group_by() e ungroup() Junções: inner_join(), full_join(), left_join(), right_join(), etc. Combinações: bind_rows() e bind_cols() Resumos, contagem e seleção: n(), n_distinct(), first(), last(), nth(), etc. Existe uma série de funções para realizar a manipulação dos dados, com diversas finalidades: manipulação de uma tabela, manipulação de duas tabelas, replicação, agrupamento, funções de vetores, além de muitas outras funções específicas. relocate(): muda a ordem das colunas rename(): muda o nome das colunas select(): seleciona colunas pelo nome ou posição pull(): seleciona uma coluna como vetor mutate(): adiciona novas colunas ou resultados em colunas existentes arrange(): reordena as linhas com base nos valores de colunas filter(): seleciona linhas com base em valores de colunas slice(): seleciona linhas de diferente formas distinct(): remove linhas com valores repetidos com base nos valores de colunas count(): conta observações para um grupo group_by(): agrupa linhas pelos valores das colunas summarise(): resume os dados através de funções considerando valores das colunas *_join(): funções que juntam dados de duas tabelas através de uma coluna chave 5.8.2 Sintaxe As funções do dplyr podem seguir uma mesma sintaxe: o tibble será sempre o primeiro argumento dessas funções, seguido de um pipe e pelo nome da função que irá fazer a manipulação nesses dados. Isso permite o encadeamento de várias operações consecutivas mantendo a estrutura do dado original e acrescentando mudanças num encadeamento lógico. Sendo assim, as funções verbais não precisam modificar necessariamente o tibble original, sendo que as operações de manipulações podem e devem ser atribuídas a um novo objeto. ## Sintaxe tb_dplyr &lt;- tb %&gt;% funcao_verbal1(argumento1, argumento2, ...) %&gt;% funcao_verbal2(argumento1, argumento2, ...) %&gt;% funcao_verbal3(argumento1, argumento2, ...) Além de data.frames e tibbles, a manipulação pelo formato dplyr torna o trabalho com outros formatos de classes e dados acessíveis e eficientes como data.table, SQL e Apache Spark, para os quais existem pacotes específicos. dtplyr: manipular conjuntos de dados data.table dbplyr: manipular conjuntos de dados SQL sparklyr: manipular conjuntos de dados no Apache Spark 5.8.3 palmerpenguins Para nossos exemplos, vamos utilizar novamente os dados de pinguins palmerpenguins. Esses dados estão disponíveis no pacote palmerpenguins. Vamos utilizar principalmente o conjunto de dados penguins, que é a versão simplificada dos dados brutos penguins_raw. ## Carrega o pacote palmerpenguins library(palmerpenguins) 5.8.4 relocate() Primeiramente, vamos reordenar as colunas com a função dplyr::relocate(), onde simplesmente listamos as colunas que queremos mudar de posição e para onde elas devem ir. Para esse último passo há dois argumentos: .before que indica qual a coluna que as colunas realocadas devem se mover antes, e o argumento .after indicando onde devem se mover depois. Ambos podem ser informados com os nomes ou posições dessas colunas com números. ## Reordenar colunas - nome penguins_relocate_col &lt;- penguins %&gt;% dplyr::relocate(sex, year, .after = island) head(penguins_relocate_col) #&gt; # A tibble: 6 × 8 #&gt; species island sex year bill_length_mm bill_depth_mm flipper_length_mm body_mass_g #&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen male 2007 39.1 18.7 181 3750 #&gt; 2 Adelie Torgersen female 2007 39.5 17.4 186 3800 #&gt; 3 Adelie Torgersen female 2007 40.3 18 195 3250 #&gt; 4 Adelie Torgersen &lt;NA&gt; 2007 NA NA NA NA #&gt; 5 Adelie Torgersen female 2007 36.7 19.3 193 3450 #&gt; 6 Adelie Torgersen male 2007 39.3 20.6 190 3650 ## Reordenar colunas - posição penguins_relocate_ncol &lt;- penguins %&gt;% dplyr::relocate(sex, year, .after = 2) head(penguins_relocate_ncol) #&gt; # A tibble: 6 × 8 #&gt; species island sex year bill_length_mm bill_depth_mm flipper_length_mm body_mass_g #&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen male 2007 39.1 18.7 181 3750 #&gt; 2 Adelie Torgersen female 2007 39.5 17.4 186 3800 #&gt; 3 Adelie Torgersen female 2007 40.3 18 195 3250 #&gt; 4 Adelie Torgersen &lt;NA&gt; 2007 NA NA NA NA #&gt; 5 Adelie Torgersen female 2007 36.7 19.3 193 3450 #&gt; 6 Adelie Torgersen male 2007 39.3 20.6 190 3650 5.8.5 rename() Podemos ainda renomear colunas facilmente com a função dplyr::rename(), onde primeiramente informamos o nome que queremos que a coluna tenha, seguido do operador = e a coluna do nosso dado (“nova_coluna = antiga_coluna”). Também podemos utilizar a função dplyr::rename_with(), que faz a mudança do nome em múltiplas colunas, que pode depender ou não de resultados booleanos. ## Renomear as colunas penguins_rename &lt;- penguins %&gt;% dplyr::rename(bill_length = bill_length_mm, bill_depth = bill_depth_mm, flipper_length = flipper_length_mm, body_mass = body_mass_g) head(penguins_rename) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length bill_depth flipper_length body_mass sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 ## mudar o nome de todas as colunas penguins_rename_with &lt;- penguins %&gt;% dplyr::rename_with(toupper) head(penguins_rename_with) #&gt; # A tibble: 6 × 8 #&gt; SPECIES ISLAND BILL_LENGTH_MM BILL_DEPTH_MM FLIPPER_LENGTH_MM BODY_MASS_G SEX YEAR #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 5.8.6 select() Outra operação bastante usual dentro da manipulação de dados tabulares é a seleção de colunas. Podemos fazer essa operação com a função dplyr::select(), que seleciona colunas pelo nome ou pela sua posição. Aqui há uma série de possibilidades de seleção de colunas, desde utilizar operadores como : para selecionar intervalos de colunas, ! para tomar o complemento (todas menos as listadas), além de funções como dplyr::starts_with(), dplyr::ends_with(), dplyr::contains() para procurar colunas com um padrão de texto. ## Selecionar colunas por posição penguins_select_position &lt;- penguins %&gt;% dplyr::select(3:6) head(penguins_select_position) #&gt; # A tibble: 6 × 4 #&gt; bill_length_mm bill_depth_mm flipper_length_mm body_mass_g #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 39.1 18.7 181 3750 #&gt; 2 39.5 17.4 186 3800 #&gt; 3 40.3 18 195 3250 #&gt; 4 NA NA NA NA #&gt; 5 36.7 19.3 193 3450 #&gt; 6 39.3 20.6 190 3650 ## Selecionar colunas por nomes penguins_select_names &lt;- penguins %&gt;% dplyr::select(bill_length_mm:body_mass_g) head(penguins_select_names) #&gt; # A tibble: 6 × 4 #&gt; bill_length_mm bill_depth_mm flipper_length_mm body_mass_g #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 39.1 18.7 181 3750 #&gt; 2 39.5 17.4 186 3800 #&gt; 3 40.3 18 195 3250 #&gt; 4 NA NA NA NA #&gt; 5 36.7 19.3 193 3450 #&gt; 6 39.3 20.6 190 3650 ## Selecionar colunas por padrão penguins_select_contains &lt;- penguins %&gt;% dplyr::select(contains(&quot;_mm&quot;)) head(penguins_select_contains) #&gt; # A tibble: 6 × 3 #&gt; bill_length_mm bill_depth_mm flipper_length_mm #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 39.1 18.7 181 #&gt; 2 39.5 17.4 186 #&gt; 3 40.3 18 195 #&gt; 4 NA NA NA #&gt; 5 36.7 19.3 193 #&gt; 6 39.3 20.6 190 5.8.7 pull() Quando usamos a função dplyr::select(), mesmo que para uma coluna, o retorno é sempre um tibble. Caso precisemos que essa coluna se torne um vetor dentro do encadeamento dos pipes, usamos a função dplyr::pull() que extrai uma única coluna como vetor. ## Coluna como vetor penguins_select_pull &lt;- penguins %&gt;% dplyr::pull(bill_length_mm) head(penguins_select_pull, 15) #&gt; [1] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6 5.8.8 mutate() Uma das operações mais úteis dentre as operações para colunas é adicionar ou atualizar os valores de colunas. Para essa operação, usaremos a função dplyr::mutate(). Podemos ainda usar os argumentos .before e .after para indicar onde a nova coluna deve ficar, além do parâmetro .keep com diversas possibilidades de manter colunas depois de usar a função dplyr::mutate(). Por fim, é fundamental destacar o uso das funções de replicação: dplyr::across(), dplyr::if_any() e dplyr::if_all(), para os quais a função fará alterações em múltiplas colunas de uma vez, dependendo de resultados booleanos. ## Adicionar colunas penguins_mutate &lt;- penguins %&gt;% dplyr::mutate(body_mass_kg = body_mass_g/1e3, .before = sex) head(penguins_mutate) #&gt; # A tibble: 6 × 9 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g body_mass_kg sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 3.75 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 3.8 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 3.25 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 3.45 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 3.65 male 2007 ## Modificar várias colunas penguins_mutate_across &lt;- penguins %&gt;% dplyr::mutate(across(where(is.factor), as.character)) head(penguins_mutate_across) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 5.8.9 arrange() Além de operações em colunas, podemos fazer operações em linhas. Vamos começar com a reordenação das linhas com base nos valores das colunas. Para essa operação, usamos a função dplyr::arrange(). Podemos reordenar por uma ou mais colunas de forma crescente ou de forma decrescente usando a função desc() ou o operador -. Da mesma forma que na função dplyr::mutate(), podemos usar as funções de replicação para ordenar as linhas para várias colunas de uma vez, dependendo de resultados booleanos. ## Reordenar linhas - crescente penguins_arrange &lt;- penguins %&gt;% dplyr::arrange(body_mass_g) head(penguins_arrange) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Chinstrap Dream 46.9 16.6 192 2700 female 2008 #&gt; 2 Adelie Biscoe 36.5 16.6 181 2850 female 2008 #&gt; 3 Adelie Biscoe 36.4 17.1 184 2850 female 2008 #&gt; 4 Adelie Biscoe 34.5 18.1 187 2900 female 2008 #&gt; 5 Adelie Dream 33.1 16.1 178 2900 female 2008 #&gt; 6 Adelie Torgersen 38.6 17 188 2900 female 2009 ## Reordenar linhas - decrescente penguins_arrange_desc &lt;- penguins %&gt;% dplyr::arrange(desc(body_mass_g)) head(penguins_arrange_desc) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Gentoo Biscoe 49.2 15.2 221 6300 male 2007 #&gt; 2 Gentoo Biscoe 59.6 17 230 6050 male 2007 #&gt; 3 Gentoo Biscoe 51.1 16.3 220 6000 male 2008 #&gt; 4 Gentoo Biscoe 48.8 16.2 222 6000 male 2009 #&gt; 5 Gentoo Biscoe 45.2 16.4 223 5950 male 2008 #&gt; 6 Gentoo Biscoe 49.8 15.9 229 5950 male 2009 ## Reordenar linhas - decrescente penguins_arrange_desc_m &lt;- penguins %&gt;% dplyr::arrange(-body_mass_g) head(penguins_arrange_desc_m) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Gentoo Biscoe 49.2 15.2 221 6300 male 2007 #&gt; 2 Gentoo Biscoe 59.6 17 230 6050 male 2007 #&gt; 3 Gentoo Biscoe 51.1 16.3 220 6000 male 2008 #&gt; 4 Gentoo Biscoe 48.8 16.2 222 6000 male 2009 #&gt; 5 Gentoo Biscoe 45.2 16.4 223 5950 male 2008 #&gt; 6 Gentoo Biscoe 49.8 15.9 229 5950 male 2009 ## Reordenar linhas - multiplas colunas penguins_arrange_across &lt;- penguins %&gt;% dplyr::arrange(across(where(is.numeric))) head(penguins_arrange_across) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Dream 32.1 15.5 188 3050 female 2009 #&gt; 2 Adelie Dream 33.1 16.1 178 2900 female 2008 #&gt; 3 Adelie Torgersen 33.5 19 190 3600 female 2008 #&gt; 4 Adelie Dream 34 17.1 185 3400 female 2008 #&gt; 5 Adelie Torgersen 34.1 18.1 193 3475 &lt;NA&gt; 2007 #&gt; 6 Adelie Torgersen 34.4 18.4 184 3325 female 2007 5.8.10 filter() Uma das principais e mais usuais operações que podemos realizar em linhas é a seleção de linhas através do filtro por valores de uma ou mais colunas, utilizando a função dplyr::filter(). Para realizar os filtros utilizaremos grande parte dos operadores relacionais e lógicos que listamos na Tabela 4.1, especialmente os lógicos para combinações de filtros em mais de uma coluna. Além desses operadores, podemos utilizar a função is.na() para filtros em elementos faltantes, e as funções dplyr::between() e dplyr::near() para filtros entre valores, e para valores próximos com certa tolerância, respectivamente. Por fim, podemos usar as funções de replicação para filtro das linhas para mais de uma coluna, dependendo de resultados booleanos. ## Filtrar linhas penguins_filter &lt;- penguins %&gt;% dplyr::filter(species == &quot;Adelie&quot;) head(penguins_filter) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 ## Filtrar linhas penguins_filter_two &lt;- penguins %&gt;% dplyr::filter(species == &quot;Adelie&quot; &amp; sex == &quot;female&quot;) head(penguins_filter_two) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 2 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 3 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 4 Adelie Torgersen 38.9 17.8 181 3625 female 2007 #&gt; 5 Adelie Torgersen 41.1 17.6 182 3200 female 2007 #&gt; 6 Adelie Torgersen 36.6 17.8 185 3700 female 2007 ## Filtrar linhas penguins_filter_in &lt;- penguins %&gt;% dplyr::filter(species %in% c(&quot;Adelie&quot;, &quot;Gentoo&quot;), sex == &quot;female&quot;) head(penguins_filter_in) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 2 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 3 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 4 Adelie Torgersen 38.9 17.8 181 3625 female 2007 #&gt; 5 Adelie Torgersen 41.1 17.6 182 3200 female 2007 #&gt; 6 Adelie Torgersen 36.6 17.8 185 3700 female 2007 ## Filtrar linhas - NA penguins_filter_na &lt;- penguins %&gt;% dplyr::filter(!is.na(sex) == TRUE) head(penguins_filter_na) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 5 Adelie Torgersen 39.3 20.6 190 3650 male 2007 #&gt; 6 Adelie Torgersen 38.9 17.8 181 3625 female 2007 ## Filtrar linhas - intervalos penguins_filter_between &lt;- penguins %&gt;% dplyr::filter(between(body_mass_g, 3000, 4000)) head(penguins_filter_between) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 5 Adelie Torgersen 39.3 20.6 190 3650 male 2007 #&gt; 6 Adelie Torgersen 38.9 17.8 181 3625 female 2007 ## Filtrar linhas por várias colunas penguins_filter_if &lt;- penguins %&gt;% dplyr::filter(if_all(where(is.integer), ~ . &gt; 200)) head(penguins_filter_if) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Dream 35.7 18 202 3550 female 2008 #&gt; 2 Adelie Dream 41.1 18.1 205 4300 male 2008 #&gt; 3 Adelie Dream 40.8 18.9 208 4300 male 2008 #&gt; 4 Adelie Biscoe 41 20 203 4725 male 2009 #&gt; 5 Adelie Torgersen 41.4 18.5 202 3875 male 2009 #&gt; 6 Adelie Torgersen 44.1 18 210 4000 male 2009 5.8.11 slice() Além da seleção de linhas por filtros, podemos fazer a seleção das linhas por intervalos, indicando quais linhas desejamos, usando a função dplyr::slice(), e informando o argumento n para o número da linha ou intervalo das linhas. Essa função possui variações no sufixo muito interessantes: dplyr::slice_head() e dplyr::slice_tail() seleciona as primeiras e últimas linhas, dplyr::slice_min() e dplyr::slice_max() seleciona linhas com os maiores e menores valores de uma coluna, e dplyr::slice_sample() seleciona linhas aleatoriamente. ## Seleciona linhas penguins_slice &lt;- penguins %&gt;% dplyr::slice(n = c(1, 3, 300:n())) head(penguins_slice) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 3 Chinstrap Dream 50.6 19.4 193 3800 male 2007 #&gt; 4 Chinstrap Dream 46.7 17.9 195 3300 female 2007 #&gt; 5 Chinstrap Dream 52 19 197 4150 male 2007 #&gt; 6 Chinstrap Dream 50.5 18.4 200 3400 female 2008 ## Seleciona linhas - head penguins_slice_head &lt;- penguins %&gt;% dplyr::slice_head(n = 5) head(penguins_slice_head) #&gt; # A tibble: 5 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 ## Seleciona linhas - max penguins_slice_max &lt;- penguins %&gt;% dplyr::slice_max(body_mass_g, n = 5) head(penguins_slice_max) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Gentoo Biscoe 49.2 15.2 221 6300 male 2007 #&gt; 2 Gentoo Biscoe 59.6 17 230 6050 male 2007 #&gt; 3 Gentoo Biscoe 51.1 16.3 220 6000 male 2008 #&gt; 4 Gentoo Biscoe 48.8 16.2 222 6000 male 2009 #&gt; 5 Gentoo Biscoe 45.2 16.4 223 5950 male 2008 #&gt; 6 Gentoo Biscoe 49.8 15.9 229 5950 male 2009 ## Seleciona linhas - sample penguins_slice_sample &lt;- penguins %&gt;% dplyr::slice_sample(n = 30) head(penguins_slice_sample) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Biscoe 41.3 21.1 195 4400 male 2008 #&gt; 2 Gentoo Biscoe 44.5 15.7 217 4875 &lt;NA&gt; 2009 #&gt; 3 Adelie Torgersen 41.4 18.5 202 3875 male 2009 #&gt; 4 Adelie Biscoe 37.6 17 185 3600 female 2008 #&gt; 5 Adelie Dream 36 17.9 190 3450 female 2007 #&gt; 6 Adelie Biscoe 35.7 16.9 185 3150 female 2008 5.8.12 distinct() A última operação que apresentaremos para linhas é a retirada de linhas com valores repetidos com base nos valores de colunas, utilizando a função dplyr::distinct(). Essa função por padrão retorna apenas a coluna utilizada para retirar as linhas com valores repetidos, sendo necessário acrescentar o argumento .keep_all = TRUE para retornar todas as colunas. Por fim, podemos usar as funções de replicação para retirar linhas com valores repetidos para mais de uma coluna, dependendo de resultados booleanos. ## Retirar linhas com valores repetidos penguins_distinct &lt;- penguins %&gt;% dplyr::distinct(body_mass_g) head(penguins_distinct) #&gt; # A tibble: 6 × 1 #&gt; body_mass_g #&gt; &lt;int&gt; #&gt; 1 3750 #&gt; 2 3800 #&gt; 3 3250 #&gt; 4 NA #&gt; 5 3450 #&gt; 6 3650 ## Retirar linhas com valores repetidos - manter as outras colunas penguins_distinct_keep_all &lt;- penguins %&gt;% dplyr::distinct(body_mass_g, .keep_all = TRUE) head(penguins_distinct_keep_all) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 ## Retirar linhas com valores repetidos para várias colunas penguins_distinct_keep_all_across &lt;- penguins %&gt;% dplyr::distinct(across(where(is.integer)), .keep_all = TRUE) head(penguins_distinct_keep_all_across) #&gt; # A tibble: 6 × 8 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 5.8.13 count() Agora entraremos no assunto de resumo das observações. Podemos fazer contagens resumos dos nossos dados, utilizando para isso a função dplyr::count(). Essa função contará valores de uma ou mais colunas, geralmente para variáveis categóricas, semelhante à função Base R table(), mas num contexto tidyverse. ## Contagens de valores para uma coluna penguins_count &lt;- penguins %&gt;% dplyr::count(species) penguins_count #&gt; # A tibble: 3 × 2 #&gt; species n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie 152 #&gt; 2 Chinstrap 68 #&gt; 3 Gentoo 124 ## Contagens de valores para mais de uma coluna penguins_count_two &lt;- penguins %&gt;% dplyr::count(species, island) penguins_count_two #&gt; # A tibble: 5 × 3 #&gt; species island n #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Biscoe 44 #&gt; 2 Adelie Dream 56 #&gt; 3 Adelie Torgersen 52 #&gt; 4 Chinstrap Dream 68 #&gt; 5 Gentoo Biscoe 124 5.8.14 group_by() Uma grande parte das operações feitas nos dados são realizadas em grupos definidos por valores de colunas ou variáveis categóricas. A função dplyr::group_by() transforma um tibble em um tibble agrupado, onde as operações são realizadas “por grupo.” Essa função é utilizada geralmente junto com a função dplyr::summarise(), que veremos logo em seguida. O agrupamento não altera a aparência dos dados (além de informar como estão agrupados). A função dplyr::ungroup() remove o agrupamento. Podemos ainda usar funções de replicação para fazer os agrupamentos para mais de uma coluna, dependendo de resultados booleanos. ## Agrupamento penguins_group_by &lt;- penguins %&gt;% dplyr::group_by(species) head(penguins_group_by) #&gt; # A tibble: 6 × 8 #&gt; # Groups: species [1] #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 ## Agrupamento de várias colunas penguins_group_by_across &lt;- penguins %&gt;% dplyr::group_by(across(where(is.factor))) head(penguins_group_by_across) #&gt; # A tibble: 6 × 8 #&gt; # Groups: species, island, sex [3] #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 5.8.15 summarise() Como dissemos, muitas vezes queremos resumir nossos dados, principalmente para ter uma noção geral das variáveis (colunas) ou mesmo começar a análise exploratória resumindo variáveis contínuas por grupos de variáveis categóricas. Dessa forma, ao utilizar a função dplyr::summarise() teremos um novo tibble com os dados resumidos, que é a agregação ou resumo dos dados através de funções. Da mesma forma que outras funções, podemos usar funções de replicação para resumir valores para mais de uma coluna, dependendo de resultados booleanos. ## Resumo penguins_summarise &lt;- penguins %&gt;% dplyr::group_by(species) %&gt;% dplyr::summarize(body_mass_g_mean = mean(body_mass_g, na.rm = TRUE), body_mass_g_sd = sd(body_mass_g, na.rm = TRUE)) penguins_summarise #&gt; # A tibble: 3 × 3 #&gt; species body_mass_g_mean body_mass_g_sd #&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Adelie 3701. 459. #&gt; 2 Chinstrap 3733. 384. #&gt; 3 Gentoo 5076. 504. ## Resumo para várias colunas penguins_summarise_across &lt;- penguins %&gt;% dplyr::group_by(species) %&gt;% dplyr::summarize(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) penguins_summarise_across #&gt; # A tibble: 3 × 6 #&gt; species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g year #&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Adelie 38.8 18.3 190. 3701. 2008. #&gt; 2 Chinstrap 48.8 18.4 196. 3733. 2008. #&gt; 3 Gentoo 47.5 15.0 217. 5076. 2008. 5.8.16 bind_rows() e bind_cols() Muitas vezes teremos de combinar duas ou mais tabelas de dados. Podemos utilizar as funções Base R rbind() e cbind(), como vimos. Entretanto, pode ser interessante avançar para as funções dplyr::bind_rows() e dplyr::bind_cols() do formato tidyverse. A ideia é muito semelhante: a primeira função combina dados por linhas e a segunda por colunas. Entretanto, há vantagens no uso dessas funções, como a identificação das linhas pelo argumento .id para a primeira função, e a conferência do nome das colunas pelo argumento .name_repair para a segunda função. ## Selecionar as linhas para dois tibbles penguins_01 &lt;- dplyr::slice(penguins, 1:5) penguins_02 &lt;- dplyr::slice(penguins, 51:55) ## Combinar as linhas penguins_bind_rows &lt;- dplyr::bind_rows(penguins_01, penguins_02, .id = &quot;id&quot;) head(penguins_bind_rows) #&gt; # A tibble: 6 × 9 #&gt; id species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year #&gt; &lt;chr&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 1 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 1 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 1 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 1 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; 6 2 Adelie Biscoe 39.6 17.7 186 3500 female 2008 ## Combinar as colunas penguins_bind_cols &lt;- dplyr::bind_cols(penguins_01, penguins_02, .name_repair = &quot;unique&quot;) head(penguins_bind_cols) #&gt; # A tibble: 5 × 16 #&gt; species...1 island...2 bill_length_mm...3 bill_depth_mm...4 flipper_length_mm.… body_mass_g...6 sex...7 year...8 #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 #&gt; # … with 8 more variables: species...9 &lt;fct&gt;, island...10 &lt;fct&gt;, bill_length_mm...11 &lt;dbl&gt;, #&gt; # bill_depth_mm...12 &lt;dbl&gt;, flipper_length_mm...13 &lt;int&gt;, body_mass_g...14 &lt;int&gt;, sex...15 &lt;fct&gt;, #&gt; # year...16 &lt;int&gt; 5.8.17 *_join() Finalmente, veremos o último conjunto de funções do pacote dplyr, a junção de tabelas. Nessa operação, fazemos a combinação de pares de conjunto de dados tabulares por uma ou mais colunas chaves. Há dois tipos de junções: junção de mutação e junção de filtragem. A junção de mutação primeiro combina as observações por suas chaves e, em seguida, copia as variáveis (colunas) de uma tabela para a outra. É fundamental destacar a importância da coluna chave, que é indicada pelo argumento by. Essa coluna deve conter elementos que sejam comuns às duas tabelas para que haja a combinação dos elementos. Existem quatro tipos de junções, que são realizadas pelas funções: dplyr::inner_join(), dplyr::left_join(), dplyr::full_join() e dplyr::right_join(), e que podem ser representadas na Figura 5.3. Figura 5.3: Diferentes tipos de joins, representados com um diagrama de Venn. Adaptado de: Wickham and Grolemund (2017). Considerando a nomenclatura de duas tabelas de dados por x e y, temos: inner_join(x, y): mantém apenas as observações em x e em y left_join(x, y): mantém todas as observações em x right_join(x, y): mantém todas as observações em y full_join(x, y): mantém todas as observações em x e em y Aqui, vamos demostrar apenas a função dplyr::left_join(), combinando um tibble de coordenadas geográficas das ilhas com o conjunto de dados do penguins. ## Adicionar uma coluna chave de ids penguin_islands &lt;- tibble( island = c(&quot;Torgersen&quot;, &quot;Biscoe&quot;, &quot;Dream&quot;, &quot;Alpha&quot;), longitude = c(-64.083333, -63.775636, -64.233333, -63), latitude = c(-64.766667, -64.818569, -64.733333, -64.316667)) ## Junção - left penguins_left_join &lt;- dplyr::left_join(penguins, penguin_islands, by = &quot;island&quot;) head(penguins_left_join) #&gt; # A tibble: 6 × 10 #&gt; species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year longitude latitude #&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 -64.1 -64.8 #&gt; 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 -64.1 -64.8 #&gt; 3 Adelie Torgersen 40.3 18 195 3250 female 2007 -64.1 -64.8 #&gt; 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 -64.1 -64.8 #&gt; 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 -64.1 -64.8 #&gt; 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 -64.1 -64.8 Já a junção de filtragem combina as observações da mesma maneira que as junções de mutação, mas afetam as observações (linhas), não as variáveis (colunas). Existem dois tipos. semi_join(x, y): mantém todas as observações em x que têm uma correspondência em y anti_join(x, y): elimina todas as observações em x que têm uma correspondência em y Semi-joins são úteis para corresponder tabelas de resumo filtradas de volta às linhas originais, removendo as linhas que não estavam antes do join. Anti-joins são úteis para diagnosticar incompatibilidades de junção, por exemplo, ao verificar os elementos que não combinam entre duas tabelas de dados. 5.8.18 Operações de conjuntos e comparação de dados Temos ainda operações de conjuntos e comparação de dados. union(x, y): retorna todas as linhas que aparecem em x, y ou mais dos conjuntos de dados interesect(x, y): retorna apenas as linhas que aparecem em x e em y setdiff(x, y): retorna as linhas que aparecem x, mas não em y setequal(x, y): retorna se x e y são iguais e quais suas diferenças Para se aprofundar no tema, recomendamos a leitura do Capítulo 13 Relational data de Wickham and Grolemund (2017). 5.9 stringr O pacote stringr fornece um conjunto de funções para a manipulação de caracteres ou strings. O pacote concentra-se nas funções de manipulação mais importantes e comumente usadas. Para funções mais específicas, recomenda-se usar o pacote stringi, que fornece um conjunto mais abrangente de funções. As funções do stringr podem ser agrupadas em algumas operações para tarefas específicas como correspondência de padrões, retirar e acrescentar espaços em branco, mudar maiúsculas e minúsculas, além de outras operações. Todas as funções deste pacote são listadas na página de referência do pacote. Demonstraremos algumas funções para algumas operações mais comuns, utilizando um vetor de um elemento, com o string “penguins.” Podemos explorar o comprimento de strings com a função stringr::str_length(). ## Comprimento stringr::str_length(string = &quot;penguins&quot;) #&gt; [1] 8 Extrair um string por sua posição usando a função stringr::str_sub() ou por um padrão com stringr::str_extract(). ## Extrair pela posição stringr::str_sub(string = &quot;penguins&quot;, end = 3) #&gt; [1] &quot;pen&quot; ## Extrair por padrão stringr::str_extract(string = &quot;penguins&quot;, pattern = &quot;p&quot;) #&gt; [1] &quot;p&quot; Substituir strings por outros strings com stringr::str_replace(). ## Substituir stringr::str_replace(string = &quot;penguins&quot;, pattern = &quot;i&quot;, replacement = &quot;y&quot;) #&gt; [1] &quot;penguyns&quot; Separar strings por um padrão com a função stringr::str_split(). ## Separar stringr::str_split(string = &quot;p-e-n-g-u-i-n-s&quot;, pattern = &quot;-&quot;, simplify = TRUE) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #&gt; [1,] &quot;p&quot; &quot;e&quot; &quot;n&quot; &quot;g&quot; &quot;u&quot; &quot;i&quot; &quot;n&quot; &quot;s&quot; Inserir espaços em brancos pela esquerda, direita ou ambos com a função stringr::str_pad(). ## Inserir espacos em branco stringr::str_pad(string = &quot;penguins&quot;, width = 10, side = &quot;left&quot;) #&gt; [1] &quot; penguins&quot; stringr::str_pad(string = &quot;penguins&quot;, width = 10, side = &quot;right&quot;) #&gt; [1] &quot;penguins &quot; stringr::str_pad(string = &quot;penguins&quot;, width = 10, side = &quot;both&quot;) #&gt; [1] &quot; penguins &quot; Também podemos remover espaços em branco da esquerda, direita ou ambos, utilizando stringr::str_trim(). ## Remover espacos em branco stringr::str_trim(string = &quot; penguins &quot;, side = &quot;left&quot;) #&gt; [1] &quot;penguins &quot; stringr::str_trim(string = &quot; penguins &quot;, side = &quot;right&quot;) #&gt; [1] &quot; penguins&quot; stringr::str_trim(string = &quot; penguins &quot;, side = &quot;both&quot;) #&gt; [1] &quot;penguins&quot; Podemos também alterar minúsculas e maiúsculas em diferentes posições do string, com várias funções. ## Alterar minúsculas e maiúsculas stringr::str_to_lower(string = &quot;Penguins&quot;) #&gt; [1] &quot;penguins&quot; stringr::str_to_upper(string = &quot;penguins&quot;) #&gt; [1] &quot;PENGUINS&quot; stringr::str_to_sentence(string = &quot;penGuins&quot;) #&gt; [1] &quot;Penguins&quot; stringr::str_to_title(string = &quot;penGuins&quot;) #&gt; [1] &quot;Penguins&quot; Podemos ainda ordenar os elementos de um vetor por ordem alfabética de forma crescente ou decrescente, usando stringr::str_sort(). ## Ordenar stringr::str_sort(x = letters) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; stringr::str_sort(x = letters, dec = TRUE) #&gt; [1] &quot;z&quot; &quot;y&quot; &quot;x&quot; &quot;w&quot; &quot;v&quot; &quot;u&quot; &quot;t&quot; &quot;s&quot; &quot;r&quot; &quot;q&quot; &quot;p&quot; &quot;o&quot; &quot;n&quot; &quot;m&quot; &quot;l&quot; &quot;k&quot; &quot;j&quot; &quot;i&quot; &quot;h&quot; &quot;g&quot; &quot;f&quot; &quot;e&quot; &quot;d&quot; &quot;c&quot; &quot;b&quot; &quot;a&quot; Podemos ainda utilizar essas funções em complemento com o pacote dplyr, para alterar os strings de colunas ou nome das colunas. ## Alterar valores das colunas penguins_stringr_valores &lt;- penguins %&gt;% dplyr::mutate(species = stringr::str_to_lower(species)) ## Alterar nome das colunas penguins_stringr_nomes &lt;- penguins %&gt;% dplyr::rename_with(stringr::str_to_title) Para se aprofundar no tema, recomendamos a leitura do Capítulo 14 Strings de Wickham and Grolemund (2017). 5.10 forcats O pacote forcats fornece um conjunto de ferramentas úteis para facilitar a manipulação de fatores. Como dito anteriormente, usamos fatores geralmente quando temos dados categóricos, que são variáveis que possuem um conjunto de valores fixos e conhecidos. As funções são utilizadas principalmente para: mudar a ordem dos níveis, mudar os valores dos níveis, adicionar e remover níveis, combinar múltiplos níveis, além de outras operações. Todas as funções deste pacote são listadas na página de referência do pacote. Vamos utilizar ainda os dados penguins e penguins_raw para exemplificar o uso do pacote forcats. ## Carregar o pacote palmerpenguins library(palmerpenguins) Primeiramente, vamos converter dados de string para fator, utilizando a função forcats::as_factor(). ## String forcats::as_factor(penguins_raw$Species) %&gt;% head() #&gt; [1] Adelie Penguin (Pygoscelis adeliae) Adelie Penguin (Pygoscelis adeliae) Adelie Penguin (Pygoscelis adeliae) #&gt; [4] Adelie Penguin (Pygoscelis adeliae) Adelie Penguin (Pygoscelis adeliae) Adelie Penguin (Pygoscelis adeliae) #&gt; 3 Levels: Adelie Penguin (Pygoscelis adeliae) ... Chinstrap penguin (Pygoscelis antarctica) Podemos facilmente mudar o nome dos níveis utilizando a função forcats::fct_recode(). ## Mudar o nome dos níveis forcats::fct_recode(penguins$species, a = &quot;Adelie&quot;, c = &quot;Chinstrap&quot;, g = &quot;Gentoo&quot;) %&gt;% head() #&gt; [1] a a a a a a #&gt; Levels: a c g Para inverter os níveis, usamos a função forcats::fct_rev(). ## Inverter os níveis forcats::fct_rev(penguins$species) %&gt;% head() #&gt; [1] Adelie Adelie Adelie Adelie Adelie Adelie #&gt; Levels: Gentoo Chinstrap Adelie Uma operação muito comum com fatores é mudar a ordem dos níveis. Quando precisamos especificar a ordem dos níveis, podemos fazer essa operação manualmente com a função forcats::fct_relevel(). ## Especificar a ordem dos níveis forcats::fct_relevel(penguins$species, &quot;Chinstrap&quot;, &quot;Gentoo&quot;, &quot;Adelie&quot;) %&gt;% head() #&gt; [1] Adelie Adelie Adelie Adelie Adelie Adelie #&gt; Levels: Chinstrap Gentoo Adelie Como vimos, a reordenação dos níveis pode ser feita manualmente. Mas existem outras formas automáticas de reordenação seguindo algumas regras, para as quais existem funções específicas. forcats::fct_inorder(): pela ordem em que aparecem pela primeira vez forcats::fct_infreq(): por número de observações com cada nível (decrescente, i.e., o maior primeiro) forcats::fct_inseq(): pelo valor numérico do nível ## Níveis pela ordem em que aparecem forcats::fct_inorder(penguins$species) %&gt;% head() #&gt; [1] Adelie Adelie Adelie Adelie Adelie Adelie #&gt; Levels: Adelie Gentoo Chinstrap ## Ordem (decrescente) de frequência forcats::fct_infreq(penguins$species) %&gt;% head() #&gt; [1] Adelie Adelie Adelie Adelie Adelie Adelie #&gt; Levels: Adelie Gentoo Chinstrap Por fim, podemos fazer a agregação de níveis raros em um nível utilizando a função forcats::fct_lump(). ## Agregação de níveis raros em um nível forcats::fct_lump(penguins$species) %&gt;% head() #&gt; [1] Adelie Adelie Adelie Adelie Adelie Adelie #&gt; Levels: Adelie Gentoo Other Podemos ainda utilizar essas funções em complemento com o pacote dplyr para fazer manipulações de fatores nas colunas de tibbles. ## Transformar várias colunas em fator penguins_raw_multi_factor &lt;- penguins_raw %&gt;% dplyr::mutate(across(where(is.character), forcats::as_factor)) Para se aprofundar no tema, recomendamos a leitura do Capítulo 15 Factors de Wickham and Grolemund (2017). 5.11 lubridate O pacote lubridate fornece um conjunto de funções para a manipulação de dados de data e horário. Dessa forma, esse pacote facilita a manipulação dessa classe de dado no R, pois geralmente esses dados não são intuitivos e mudam dependendo do tipo de objeto de data e horário. Além disso, os métodos que usam datas e horários devem levar em consideração fusos horários, anos bissextos, horários de verão, além de outras particularidades. Existem diversas funções nesse pacote, sendo as mesmas focadas em: transformações de data/horário, componentes, arredondamentos, durações, períodos, intervalos, além de muitas outras funções específicas. Todas as funções deste pacote são listadas na página de referência do pacote. Apesar de estar inserido no escopo do tidyverse, este pacote não é carregado com os demais, requisitando seu carregamento solo. ## Carregar library(lubridate) Existem três tipos de dados data/horário: Data: tempo em dias, meses e anos &lt;date&gt; Horário: tempo dentro de um dia &lt;time&gt; Data-horário: tempo em um instante (data mais tempo) &lt;dttm&gt; Para trabalhar exclusivamente com horários, podemos utilizar o pacote hms. É fundamental também destacar que algumas letras terão um significado temporal, sendo abreviações de diferentes períodos em inglês: year (ano), month (mês), weak (semana), day (dia), hour (hora), minute (minuto), e second (segundo). Para acessar a informação da data e horários atuais podemos utilizar as funções lubridate::today() e lubridate::now(). ## Extrair a data nesse instante lubridate::today() #&gt; [1] &quot;2021-12-02&quot; ## Extrair a data e tempo nesse instante lubridate::now() #&gt; [1] &quot;2021-12-02 10:04:59 -03&quot; Além dessas informações instantâneas, existem três maneiras de criar um dado de data/horário. De um string De componentes individuais de data e horário De um objeto de data/horário existente Os dados de data/horário geralmente estão no formato de strings. Podemos transformar os dados especificando a ordem dos seus componentes, ou seja, a ordem em que ano, mês e dia aparecem no string, usando as letras y (ano), m (mês) e d (dia) na mesma ordem, por exemplo, lubridate::dmy(). ## Strings e números para datas lubridate::dmy(&quot;03-03-2021&quot;) #&gt; [1] &quot;2021-03-03&quot; Essas funções também aceitam números sem aspas, além de serem muito versáteis e funcionarem em outros diversos formatos. ## Strings e números para datas lubridate::dmy(&quot;03-Mar-2021&quot;) lubridate::dmy(03032021) lubridate::dmy(&quot;03032021&quot;) lubridate::dmy(&quot;03/03/2021&quot;) lubridate::dmy(&quot;03.03.2021&quot;) Além da data, podemos especificar horários atrelados a essas datas. Para criar uma data com horário adicionamos um underscore (_) e os h (hora), m (minuto) e s (segundo) ao nome da função, além do argumento tz para especificar o fuso horário (tema tratado mais adiante nessa seção). ## Especificar horários e fuso horário lubridate::dmy_h(&quot;03-03-2021 13&quot;) #&gt; [1] &quot;2021-03-03 13:00:00 UTC&quot; lubridate::dmy_hm(&quot;03-03-2021 13:32&quot;) #&gt; [1] &quot;2021-03-03 13:32:00 UTC&quot; lubridate::dmy_hms(&quot;03-03-2021 13:32:01&quot;) #&gt; [1] &quot;2021-03-03 13:32:01 UTC&quot; lubridate::dmy_hms(&quot;03-03-2021 13:32:01&quot;, tz = &quot;America/Sao_Paulo&quot;) #&gt; [1] &quot;2021-03-03 13:32:01 -03&quot; Podemos ainda ter componentes individuais de data/horário em múltiplas colunas. Para realizar essa transformação, podemos usar as funções lubridate::make_date() e lubridate::make_datetime(). ## Dados com componentes individuais dados &lt;- tibble::tibble( ano = c(2021, 2021, 2021), mes = c(1, 2, 3), dia = c(12, 20, 31), hora = c(2, 14, 18), minuto = c(2, 44, 55)) ## Data de componentes individuais dados %&gt;% dplyr::mutate(data = lubridate::make_datetime(ano, mes, dia, hora, minuto)) #&gt; # A tibble: 3 × 6 #&gt; ano mes dia hora minuto data #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; #&gt; 1 2021 1 12 2 2 2021-01-12 02:02:00 #&gt; 2 2021 2 20 14 44 2021-02-20 14:44:00 #&gt; 3 2021 3 31 18 55 2021-03-31 18:55:00 Por fim, podemo criar datas modificando entre data/horário e data, utilizando as funções lubridate::as_datetime() e lubridate::as_date(). ## Data para data-horário lubridate::as_datetime(today()) #&gt; [1] &quot;2021-12-02 UTC&quot; ## Data-horário para data lubridate::as_date(now()) #&gt; [1] &quot;2021-12-02&quot; Uma vez que entendemos como podemos criar dados de data/horário, podemos explorar funções para acessar e definir componentes individuais. Para essa tarefa existe uma grande quantidade de funções para acessar de partes específicas de datas e horários. year(): acessa o ano month(): acessa o mês month(): acessa o dia yday(): acessa o dia do ano mday(): acessa o dia do mês wday(): acessa o dia da semana hour(): acessa as horas minute(): acessa os minutos second(): acessa os segundos ## Extrair lubridate::year(now()) #&gt; [1] 2021 lubridate::month(now()) #&gt; [1] 12 lubridate::month(now(), label = TRUE) #&gt; [1] Dec #&gt; Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; Oct &lt; Nov &lt; Dec lubridate::day(now()) #&gt; [1] 2 lubridate::wday(now()) #&gt; [1] 5 lubridate::wday(now(), label = TRUE) #&gt; [1] Thu #&gt; Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat lubridate::second(now()) #&gt; [1] 59.35088 Além de acessar componentes de datas e horários, podemos usar essas funções para fazer a inclusão de informações de datas e horários. ## Data data &lt;- dmy_hms(&quot;04-03-2021 01:04:56&quot;) ## Incluir lubridate::year(data) &lt;- 2020 lubridate::month(data) &lt;- 01 lubridate::hour(data) &lt;- 13 Mais convenientemente, podemos utilizar a função update() para alterar vários valores de uma vez. ## Incluir vários valores update(data, year = 2020, month = 1, mday = 1, hour = 1) #&gt; [1] &quot;2020-01-01 01:04:56 UTC&quot; Muitas vezes precisamos fazer operações com datas, como a aritmética com datas: subtração, adição e divisão. Para tanto, é preciso entender três classes importantes que representam intervalos de tempo. Durações: representam um número exato de segundos Períodos: representam unidades humanas como semanas e meses Intervalos: representam um ponto inicial e final Quando fazemos uma subtração de datas, criamos um objeto da classe difftime. Essa classe pode ser um pouco complicada de trabalhar, então dentro do lubridate, podemos usar funções que convertem essa classe em duração, da classe Duration. As durações sempre registram o intervalo de tempo em segundos, com alguma unidade de tempo maior entre parênteses. Há uma série de funções para tratar dessa classe. duration(): cria data em duração as.duration(): converte datas em duração dyears(): duração de anos dmonths(): duração de meses dweeks(): duração de semanas ddays(): duração de dias dhours(): duração de horas dminutes(): duração de minutos dseconds(): duração de segundos ## Subtração de datas tempo_estudando_r &lt;- lubridate::today() - lubridate::dmy(&quot;30-11-2011&quot;) ## Conversão para duração tempo_estudando_r_dur &lt;- lubridate::as.duration(tempo_estudando_r) ## Criando durações lubridate::duration(90, &quot;seconds&quot;) #&gt; [1] &quot;90s (~1.5 minutes)&quot; lubridate::duration(1.5, &quot;minutes&quot;) #&gt; [1] &quot;90s (~1.5 minutes)&quot; lubridate::duration(1, &quot;days&quot;) #&gt; [1] &quot;86400s (~1 days)&quot; ## Transformação da duração lubridate::dseconds(100) #&gt; [1] &quot;100s (~1.67 minutes)&quot; lubridate::dminutes(100) #&gt; [1] &quot;6000s (~1.67 hours)&quot; lubridate::dhours(100) #&gt; [1] &quot;360000s (~4.17 days)&quot; lubridate::ddays(100) #&gt; [1] &quot;8640000s (~14.29 weeks)&quot; lubridate::dweeks(100) #&gt; [1] &quot;60480000s (~1.92 years)&quot; lubridate::dyears(100) #&gt; [1] &quot;3155760000s (~100 years)&quot; Podemos ainda utilizar as durações para fazer operações aritméticas com datas como adição, subtração e multiplicação. ## Somando durações a datas lubridate::today() + lubridate::ddays(1) #&gt; [1] &quot;2021-12-03&quot; ## Subtraindo durações de datas lubridate::today() - lubridate::dyears(1) #&gt; [1] &quot;2020-12-01 18:00:00 UTC&quot; ## Multiplicando durações 2 * dyears(2) #&gt; [1] &quot;126230400s (~4 years)&quot; Além das durações, podemos usar períodos, que são extensões de tempo não fixados em segundos como as durações, mas flexíveis, com o tempo em dias, semanas, meses ou anos, permitindo uma interpretação mais intuitiva das datas. Novamente, há uma série de funções para realizar essas operações. period(): cria data em período as.period(): converte datas em período seconds(): período em segundos minutes(): período em minutos hours(): período em horas days(): período em dias weeks(): período em semanas months(): período em meses years(): período em anos ## Criando períodos period(c(90, 5), c(&quot;second&quot;, &quot;minute&quot;)) #&gt; [1] &quot;5M 90S&quot; period(c(3, 1, 2, 13, 1), c(&quot;second&quot;, &quot;minute&quot;, &quot;hour&quot;, &quot;day&quot;, &quot;week&quot;)) #&gt; [1] &quot;20d 2H 1M 3S&quot; ## Transformação de períodos lubridate::seconds(100) #&gt; [1] &quot;100S&quot; lubridate::minutes(100) #&gt; [1] &quot;100M 0S&quot; lubridate::hours(100) #&gt; [1] &quot;100H 0M 0S&quot; lubridate::days(100) #&gt; [1] &quot;100d 0H 0M 0S&quot; lubridate::weeks(100) #&gt; [1] &quot;700d 0H 0M 0S&quot; lubridate::years(100) #&gt; [1] &quot;100y 0m 0d 0H 0M 0S&quot; Além disso, podemos fazer operações com os períodos, somando e subtraindo. ## Somando datas lubridate::today() + lubridate::weeks(10) #&gt; [1] &quot;2022-02-10&quot; ## Subtraindo datas lubridate::today() - lubridate::weeks(10) #&gt; [1] &quot;2021-09-23&quot; ## Criando datas recorrentes lubridate::today() + lubridate::weeks(0:10) #&gt; [1] &quot;2021-12-02&quot; &quot;2021-12-09&quot; &quot;2021-12-16&quot; &quot;2021-12-23&quot; &quot;2021-12-30&quot; &quot;2022-01-06&quot; &quot;2022-01-13&quot; &quot;2022-01-20&quot; #&gt; [9] &quot;2022-01-27&quot; &quot;2022-02-03&quot; &quot;2022-02-10&quot; Por fim, intervalos são períodos de tempo limitados por duas datas, possuindo uma duração com um ponto de partida, que o faz preciso para determinar uma duração. Intervalos são objetos da classe Interval. Da mesma forma que para duração e períodos, há uma série de funções para realizar essas operações. interval(): cria data em intervalo %--%: cria data em intervalo as.interval(): converte datas em intervalo int_start(): acessa ou atribui data inicial de um intervalo int_end(): acessa ou atribui data final de um intervalo int_length(): comprimento de um intervalo em segundos int_flip(): inverte a ordem da data de início e da data de término em um intervalo int_shift(): desloca as datas de início e término de um intervalo int_aligns(): testa se dois intervalos compartilham um ponto final int_standardize(): garante que todos os intervalos sejam positivos int_diff(): retorna os intervalos que ocorrem entre os elementos de data/horário int_overlaps(): testa se dois intervalos se sobrepõem %within%: testa se o primeiro intervalo está contido no segundo ## Criando duas datas - início de estudos do R e nascimento do meu filho r_inicio &lt;- lubridate::dmy(&quot;30-11-2011&quot;) filho_nascimento &lt;- lubridate::dmy(&quot;26-09-2013&quot;) r_hoje &lt;- lubridate::today() ## Criando intervalos - interval r_intervalo &lt;- lubridate::interval(r_inicio, r_hoje) ## Criando intervalos - interval %--% filho_intervalo &lt;- filho_nascimento %--% lubridate::today() ## Operações com intervalos lubridate::int_start(r_intervalo) #&gt; [1] &quot;2011-11-30 UTC&quot; lubridate::int_end(r_intervalo) #&gt; [1] &quot;2021-12-02 UTC&quot; lubridate::int_length(r_intervalo) #&gt; [1] 315792000 lubridate::int_flip(r_intervalo) #&gt; [1] 2021-12-02 UTC--2011-11-30 UTC lubridate::int_shift(r_intervalo, duration(days = 30)) #&gt; [1] 2011-12-30 UTC--2022-01-01 UTC Uma operação de destaque é verificar a sobreposição entre dois intervalos. ## Verificar sobreposição - int_overlaps lubridate::int_overlaps(r_intervalo, filho_intervalo) #&gt; [1] TRUE ## Verificar se intervalo está contido r_intervalo %within% filho_intervalo #&gt; [1] FALSE filho_intervalo %within% r_intervalo #&gt; [1] TRUE Podemos ainda calcular quantos períodos existem dentro de um intervalo, utilizando as operações de / e %/%. ## Períodos dentro de um intervalo - anos r_intervalo / lubridate::years() #&gt; [1] 10.00548 r_intervalo %/% lubridate::years() #&gt; [1] 10 ## Períodos dentro de um intervalo - dias e semandas filho_intervalo / lubridate::days() #&gt; [1] 2989 filho_intervalo / lubridate::weeks() #&gt; [1] 427 Ainda podemos fazer transformações dos dados para períodos e ter todas as unidades de data e tempo que o intervalo compreende. ## Tempo total estudando R lubridate::as.period(r_intervalo) #&gt; [1] &quot;10y 0m 2d 0H 0M 0S&quot; ## Idade do meu filho lubridate::as.period(filho_intervalo) #&gt; [1] &quot;8y 2m 6d 0H 0M 0S&quot; Por fim, fusos horários tendem a ser um fator complicador quando precisamos analisar informações instantâneas de tempo (horário) de outras partes do planeta, ou mesmo fazer conversões dos horários. No lubridate há funções para ajudar nesse sentido. Para isso, podemos utilizar a função lubridate::with_tz(), e no argumento tzone informar o fuso horário para a transformação do horário. Podemos descobrir o fuso horário que o R está considerando com a função Sys.timezone(). ## Fuso horário no R Sys.timezone() #&gt; [1] &quot;America/Sao_Paulo&quot; No R há uma listagem dos nomes dos fusos horários que podemos utilizar no argumento tzone para diferentes fusos horários. ## Verificar os fuso horários length(OlsonNames()) #&gt; [1] 608 head(OlsonNames()) #&gt; [1] &quot;Africa/Abidjan&quot; &quot;Africa/Accra&quot; &quot;Africa/Addis_Ababa&quot; &quot;Africa/Algiers&quot; &quot;Africa/Asmara&quot; #&gt; [6] &quot;Africa/Asmera&quot; Podemos nos perguntar que horas são em outra parte do globo ou fazer as conversões facilmente no lubridate. ## Que horas são em... lubridate::with_tz(lubridate::now(), tzone = &quot;America/Sao_Paulo&quot;) #&gt; [1] &quot;2021-12-02 10:04:59 -03&quot; lubridate::with_tz(lubridate::now(), tzone = &quot;GMT&quot;) #&gt; [1] &quot;2021-12-02 13:04:59 GMT&quot; lubridate::with_tz(lubridate::now(), tzone = &quot;Europe/Berlin&quot;) #&gt; [1] &quot;2021-12-02 14:04:59 CET&quot; ## Altera o fuso sem mudar a hora lubridate::force_tz(lubridate::now(), tzone = &quot;GMT&quot;) #&gt; [1] &quot;2021-12-02 10:04:59 GMT&quot; Para se aprofundar no tema, recomendamos a leitura do Capítulo 16 Dates and times de Wickham and Grolemund (2017). 5.12 purrr O pacote purrr implementa a Programação Funcional no R, fornecendo um conjunto completo e consistente de ferramentas para trabalhar com funções e vetores. A programação funcional é um assunto bastante extenso, sendo mais conhecido no R pela família de funções purrr::map(), que permite substituir muitos loops for por um código mais sucinto e fácil de ler. Não focaremos aqui nas outras funções. Todas as funções deste pacote são listadas na página de referência do pacote. Um loop for pode ser entendido como uma iteração: um bloco de códigos é repetido mudando um contador de uma lista de possibilidades. Vamos exemplificar com uma iteração bem simples, onde imprimiremos no console os valores de 1 a 10, utilizando a função for(), um contador i em um vetor de dez números 1:10 que será iterado, no bloco de códigos definido entre {}, usando a função print() para imprimir os valores. A ideia é bastante simples: a função for() vai atribuir o primeiro valor da lista ao contador i, esse contador será utilizado em todo o bloco de códigos. Quando o bloco terminar, o segundo valor é atribuído ao contador i e entra no bloco de códigos, repetindo esse processo até que todos os elementos da lista tenham sido atribuídos ao contador. ## Loop for for(i in 1:10){ print(i) } #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 Com essa ideia em mente, a programação funcional utilizando a função purrr::map(). O mesmo for ficaria dessa forma. ## Loop for com map purrr::map(.x = 1:10, .f = print) #&gt; [1] 1 #&gt; [1] 2 #&gt; [1] 3 #&gt; [1] 4 #&gt; [1] 5 #&gt; [1] 6 #&gt; [1] 7 #&gt; [1] 8 #&gt; [1] 9 #&gt; [1] 10 #&gt; [[1]] #&gt; [1] 1 #&gt; #&gt; [[2]] #&gt; [1] 2 #&gt; #&gt; [[3]] #&gt; [1] 3 #&gt; #&gt; [[4]] #&gt; [1] 4 #&gt; #&gt; [[5]] #&gt; [1] 5 #&gt; #&gt; [[6]] #&gt; [1] 6 #&gt; #&gt; [[7]] #&gt; [1] 7 #&gt; #&gt; [[8]] #&gt; [1] 8 #&gt; #&gt; [[9]] #&gt; [1] 9 #&gt; #&gt; [[10]] #&gt; [1] 10 Nessa estrutura, temos: map(.x, .f) .x: um vetor, lista ou data frame .f: uma função Num outro exemplo, aplicaremos a função sum() para somar os valores de vários elementos de uma lista. ## Função map x &lt;- list(1:5, c(4, 5, 7), c(1, 1, 1), c(2, 2, 2, 2, 2)) purrr::map(x, sum) #&gt; [[1]] #&gt; [1] 15 #&gt; #&gt; [[2]] #&gt; [1] 16 #&gt; #&gt; [[3]] #&gt; [1] 3 #&gt; #&gt; [[4]] #&gt; [1] 10 Há diferente tipos de retornos da família purrr::map(). map(): retorna uma lista map_chr(): retorna um vetor de strings map_dbl(): retorna um vetor numérico (double) map_int(): retorna um vetor numérico (integer) map_lgl(): retorna um vetor lógico map_dfr(): retorna um data frame (por linhas) map_dfc(): retorna um data frame (por colunas) ## Variações da função map purrr::map_dbl(x, sum) #&gt; [1] 15 16 3 10 purrr::map_chr(x, paste, collapse = &quot; &quot;) #&gt; [1] &quot;1 2 3 4 5&quot; &quot;4 5 7&quot; &quot;1 1 1&quot; &quot;2 2 2 2 2&quot; Essas funcionalidades já eram conhecidas no Base R pelas funções da família apply: apply(), lapply(), sapply(), vapply(), mapply(), rapply() e tapply(). Essas funções formam a base de combinações mais complexas e ajudam a realizar operações com poucas linhas de código, para diferentes retornos. Temos ainda duas variantes da função map(): purrr::map2() e purrr::pmap(), para duas ou mais listas, respectivamente. Como vimos para a primeira função, existem várias variações do sufixo para modificar o retorno da função. ## Listas x &lt;- list(3, 5, 0, 1) y &lt;- list(3, 5, 0, 1) z &lt;- list(3, 5, 0, 1) ## Função map2 purrr::map2_dbl(x, y, prod) #&gt; [1] 9 25 0 1 ## Função pmap purrr::pmap_dbl(list(x, y, z), prod) #&gt; [1] 27 125 0 1 Essas funções podem ser usadas em conjunto para implementar rotinas de manipulação e análise de dados com poucas linhas de código, mas que não exploraremos em sua completude aqui. Listamos dois exemplos simples. ## Resumo dos dados penguins %&gt;% dplyr::select(where(is.numeric)) %&gt;% tidyr::drop_na() %&gt;% purrr::map_dbl(mean) #&gt; bill_length_mm bill_depth_mm flipper_length_mm body_mass_g year #&gt; 43.92193 17.15117 200.91520 4201.75439 2008.02924 ## Análise dos dados penguins %&gt;% dplyr::group_split(island, species) %&gt;% purrr::map(~ lm(bill_depth_mm ~ bill_length_mm, data = .x)) %&gt;% purrr::map(summary) %&gt;% purrr::map(&quot;r.squared&quot;) #&gt; [[1]] #&gt; [1] 0.2192052 #&gt; #&gt; [[2]] #&gt; [1] 0.4139429 #&gt; #&gt; [[3]] #&gt; [1] 0.2579242 #&gt; #&gt; [[4]] #&gt; [1] 0.4271096 #&gt; #&gt; [[5]] #&gt; [1] 0.06198376 Para se aprofundar no tema, recomendamos a leitura do Capítulo 21 Iteration de Wickham and Grolemund (2017). 5.13 Exercícios Reescreva as operações abaixo utilizando pipes %&gt;%. log10(cumsum(1:100)) sum(sqrt(abs(rnorm(100)))) sum(sort(sample(1:10, 10000, rep = TRUE))) Use a função download.file() e unzip() para baixar e extrair o arquivo do data paper de médios e grandes mamíferos: ATLANTIC MAMMALS. Em seguinda, importe para o R, usando a função readxl::read_excel(). Use a função tibble::glimpse() para ter uma noção geral dos dados importados no item anterior. Compare os dados de penguins (palmerpenguins::penguins_raw e palmerpenguins::penguins). Monte uma série de funções dos pacotes tidyr e dplyr para fazer limpar os dados e fazer com que o primeiro dado seja igual ao segundo. Usando os dados de penguins (palmerpenguins::penguins), calcule a correlação de Pearson entre comprimento e profundidade do bico para cada espécie e para todas as espécies. Compare os índices de correlação para exemplificar o Paradoxo de Simpsom. Oficialmente a pandemia de COVID-19 começou no Brasil com o primeiro caso no dia 26 de fevereiro de 2020. Calcule quantos anos, meses, dias, semanas, horas, minutos e segundos se passou desde então. Calcule também quanto tempo se passou até você ser vacinado. 5.14 Para se aprofundar Listamos a seguir livros que recomendamos para seguir com sua aprendizagem em R e tidyverse. Português Damiani A, Milz B, Lente C, Falbel D, Correa F, Trecenti J, Luduvice N, Amorim W. 2021. Ciência de Dados em R. [https://livro.curso-r.com/] Faria PD, Parga JPFA. 2020. Introdução à Linguagem R: seus fundamentos e sua prática. [https://www.researchgate.net/publication/345985082_Introducao_a_Linguagem_R_seus_fundamentos_e_sua_pratica] Oliveira PF, Guerra S, Mcdonnell, R. 2018. Ciência de dados com R – Introdução. IBPAD. [https://cdr.ibpad.com.br/] Inglês Grolemund G. 2017. The Essentials of Data Science: Knowledge Discovery Using R. Chapman and Hall/CRC. Holmes S, Huber W. 2019. Modern Statistics for Modern Biology. Cambridge University Press. [https://www.huber.embl.de/msmb/] Irizarry RA. 2019. Introduction to Data Science: Data Analysis and Prediction Algorithms with R. Chapman and Hall/CRC. [https://rafalab.github.io/dsbook/] Ismay C., Kim AY. 2019. Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman and Hall/CRC. [https://moderndive.com/] Peng DP. 2020. R Programming for Data Science. [https://bookdown.org/rdpeng/rprogdatascience/] Wickham H, Grolemund G. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media. [https://r4ds.had.co.nz/] Wright C, Ellis S, Hicks S &amp; Peng R D. 2021. Tidyverse Skills for Data Science in R. [https://jhudatascience.org/tidyversecourse/] Zumel N, Mount J. 2014. Practical Data Science with R Paperback. Manning. Referências "],["cap6.html", "Capítulo 6 Visualização de dados Pré-requisitos do capítulo 6.1 Contextualização 6.2 Principais pacotes 6.3 Grámatica dos gráficos 6.4 Tipos de gráficos 6.5 Finalização de gráficos para publicação 6.6 Para se aprofundar", " Capítulo 6 Visualização de dados Pré-requisitos do capítulo Pacotes e dados que serão utilizados nesse capítulo. ## Pacotes library(tidyverse) library(palmerpenguins) library(datasauRus) library(gridExtra) 6.1 Contextualização A visualização de dados através de gráficos frequentemente é a melhor forma de apresentar e interpretar as informações contidas em seus estudos, fazendo uma síntese para melhor entendimento de padrões. Geralmente, os gráficos são necessários em quase todas as análises estatísticas, além de enriquecer a argumentação e discussão de hipóteses levantadas para publicações, trabalhos de consultoria, TCCs, dissertações, teses, entre outros. Existem vários tipos de gráficos para representar os padrões em seus dados para diferentes finalidades. Esses diferentes tipos de gráficos podem até mesmo ser usados para representar o mesmo tipo de dado. Nesta seção, focaremos nos gráficos mais simples para representar uma ou duas variáveis (i.e., gráficos bidimensionais). Dependendo do tipo de variável (categórica ou contínua – veja os tipos de variáveis no Capítulo 3), os gráficos mais indicados para representar os dados mudam. De forma simplificada, os gráficos são representações dos nossos dados tabulares, de modo que os eixos representam as colunas e as feições (pontos, linhas, barras, caixas, etc.) representam as linhas. Comumente nos gráficos são representados uma ou duas colunas, quando muito três, em gráficos de três dimensões. Para mais colunas, partimos para dados agregados que podem ser vistos no capítulo de análise multivariada 9). Além disso, a utilização de mais de duas colunas pode estar relacionado com outras partes estéticas (e.g. aes() no pacote ggplot2) do gráfico como cor, forma ou tamanho de pontos, linhas ou outras feições. Dessa forma, dedicamos esse capítulo inteiramente a apresentar os principais conceitos, como a gramática de gráficos, e uma apresentação geral que pode funcionar como “um guia de bolso” de gráficos, uma vez que apresentamos os principais tipos de gráficos para análises ecológicas e estatísticas. Além disso, no último tópico focamos na finalização (ajustes finos) de gráficos para publicação. Este capítulo fornece a base conceitual necessária para entender a visualização gráfica apresentada nos Capítulos 7 a 15. Existe uma ampla gama de pacotes para fazer gráficos no R, sendo esse um ponto muito forte dessa linguagem. Além disso, essa grande disponibilidade de pacotes e funções permitem a visualização dos mais diferentes tipos de dados, o que torna a linguagem R detentora de alta praticidade, uma vez que a maior parte dos pacotes possui uma sintaxe relativamente simples para a apresentação de gráficos excelentes e de ótima qualidade. Mais adiante no Capítulo 15 @(cap15), ampliamos a discussão da visualização gráfica com ferramentas para visualização de dados geoespaciais no R. Este capítulo foi organizado em quatro partes: (i) principais pacotes, (ii) gramática dos gráficos, (iii) tipos de gráficos (um guia de bolso para visualização de vários gráficos no R), e (iv) edição de gráficos com qualidade para publicação. Apesar de apresentarmos diferentes pacotes com grande potencial para visualização gráfica, focaremos neste capítulo no pacote ggplot2, talvez o pacote mais comum e com maior gama de possibilidades de criação de excelentes gráficos. Usaremos os dados de medidas de pinguins chamados palmerpenguins para exemplificar as funções do ggplot2. Esses dados estão disponíveis no pacote palmerpenguins, que foram coletados e disponibilizados pela Dra. Kristen Gorman e pela Palmer Station, Antarctica LTER do Long Term Ecological Research Network. O pacote palmerpenguins contém dois conjuntos de dados: 1. penguins_raw que são os dados brutos e, 2. penguins uma versão simplificada dos dados brutos. Ambos contêm dados para 344 pinguins, de três espécies diferentes, coletados em três ilhas no arquipélago de Palmer, na Antártica. 6.2 Principais pacotes A seguir, apresentamos uma listagem dos principais pacotes para visualização de dados no R, além das principais funções desses pacotes. graphics: é o pacote default do R para produzir gráfios simples, porém útil para visualizações rápidas de quase todos as classes de objetos. Possui funções como: plot(), hist(), barplot(), boxplot(), abline(), points(), lines() e polygon(). Destacamos que a função plot() pode estar presente em diversos pacotes. ggplot2: pacote integrado ao tidyverse (Capítulo 5), possui uma sintaxe própria baseada na gramática de gráficos por camadas (layers), necessitando de funções específicas para objetos de classes diferentes, demandando geralmente mais tempo para a construção dos códigos. Possui funções como ggplot(), aes(), geom_*(), facet_*(), stats_*(), coord_*() e theme_*(), que são conectadas pelo operador +. ggplot2 extentions: conjunto de pacotes que adicionam diversas expansões ao pacote ggplot2. Exemplos: gganimate, GGally, patchwork e esquisse. visdat: Crie visualizações preliminares de dados exploratórios de um conjunto de dados inteiro para identificar problemas ou recursos inesperados usando ‘ggplot2.’ Possui diversas funções específicas: vis_dat() - visão geral dos dados, vis_miss() - visão de dados faltantes (NA), vis_compare() - visualiza a diferença entre dados. ggpubr: pacote que fornece funções simplificadas para criar e personalizar gráficos para publicação, baseados no ggplot2. Possui funções específicas: gghistogram(), ggdensity(), ggboxplot(), ggviolin(), ggbarplot() e ggscatter(). lattice: pacote para visualização de dados inspirado nos gráficos treliça (do inglês Trellis, geralmente para dados com muitas variáveis que geram uma matriz retangular de gráficos). Também possui funções específicas: xyplot(), histogram(), densityplot(), barchart(), bwplot() e dotplot(). O pacote latticeExtra disponibiliza algumas possibilidade a mais para esse pacote. plotly: pacote para criar gráficos interativos da web por meio da biblioteca gráfica de JavaScript de código aberto plotly.js. Também possui funções específicas: plot_ly(), add_histogram(), add_bars(), add_boxplot(), add_markers(), add_paths(), add_lines() e add_polygons(). 6.3 Grámatica dos gráficos No livro The Grammar of Graphics (Wilkinson and Wills (2005)) utiliza uma analogia da linguística para criar uma “gramática” para a visualização gráfica. Segundo ele, a língua se torna expressiva pelo fato da gramática criar um sistema de regras que tornam as declarações com significado conhecido. De maneira semelhante, a ideia da gramática dos gráficos cria regras para representação gráfica dos dados a partir de atributos estéticos (do inglês aesthetic) como cor, forma e tamanho que definem a geometria dos objetos, como pontos, linhas e barras (ggplot22016). Além disso, esta gramática reconhece que tais elementos podem ser organizados em camadas, tal como construímos um mapa com diferentes camadas como elevação, hidrografia, rodovias, limites políticos, etc. Inspirado pela gramática dos gráficos proposta por Wilkinson and Wills (2005), Hadley Wickham cria o pacote ggplot2, onde “gg” representa a contração de Grammar of Graphics (Wickham (2016b)). As camadas nesta gramática são organizadas da seguinte forma ((layered-grammar?)): Camada 1 - dados ggplot(): são as informações no formato data.frame que serão usadas nas diferentes camadas nas funções aes(), geom_*(), stat_*(), facet_*() e scale_*() Camada 2 - mapeamento aes(): atributos estéticos, determina que colunas do data.frame serão usadas para as representações geométricas, assim como tamanho, forma, cor, preenchimento e transparência Camada 3 - definição da geometria geom_*(): define o tipo de gráfico, como pontos, boxplots, violino, linhas, polígonos, entre outros Camada 4 - transformações estatísticas stat_*(): modificam, quando necessário, os dados que serão incluídos no gráfico, além de produzir estatísticas como regressões Camada 5 - sistema de coordenadas coords_*(): descreve como as coordenadas dos dados são mapeadas para o plano do gráfico Camada 6 - facetas facets_*(): especifica como a visualização dos elementos aes() são divididos em diferentes “janelas gráficas” Camada 7 - escala scale_*(): permite o controle das características visuais (cor, forma e tamanho) dos elementos declarados em aes() Camada 8 - temas theme*(): controla a aparência visual dos elementos do gráfico, como fontes, cores e legenda Em resumo, o mapeamento gráfico do ggplot2 segue a seguinte estrutura (Wickham and Grolemund (2017)): ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; + &lt;SCALE_FUNCTION&gt; + &lt;THEME_FUNCTION&gt; 6.4 Tipos de gráficos Nesta seção, listamos os principais gráficos e fazemos uma descrição de quantas colunas e o tipo de variável que eles representam. Histograma (do inglês histogram): distribuição de frequência de uma coluna para dados contínuos (cores diferentes podem representar espécies, populações ou grupos distintos) Gráfico de densidade (density plot): distribuição da densidade de uma coluna para dados contínuos (assim como no histograma, cores diferentes podem ser utilizadas para representar espécies, populações ou grupos distintos) Gráfico de dispersão (scatter plot) e gráfico de linha: relação entre valores de duas colunas para dados contínuos (X e Y) Diagrama de pontos (dot plot): distribuição da quantidade de valores agrupados de uma coluna para dados contínuos Gráfico de setores (pie chart e donut chart): representação da quantidade de valores de uma coluna para dados categóricos, geralmente em proporção ou porcentagem Gráfico de barras (bar plot): representação da quantidade de valores de uma ou mais colunas para dados categóricos Gráfico de caixa (box plot e violin plot): distribuição de valores contínuos de uma coluna (Y) para dois ou mais fatores categóricos de outra coluna (X) no formato de caixas e também no formato de “violinos” (considerando a variação) Gráfico pareado (pairs plot): relação entre valores de duas colunas para dados contínuos (X e Y), para colunas par a par Para facilitar a compreensão das regras da gramática dos dados, cada tipo de gráfico segue a mesma estrutura de organização, que respeita as camadas de informação descritas na seção anterior. Podemos perceber, portanto, que algumas camadas não são necessárias dependendo do tipo de gráfico ou do conjunto de dados que pretendemos analisar. Nos exemplos a seguir, a versão padrão se refere à representação determinada no “default” da função do pacote ggplot2. Desse modo, somente informamos as variáveis que serão utilizadas dentro de cada camada e a forma geométrica (i.e., tipo de gráfico) desejada. Porém, para cada tipo gráfico apresentamos funções e argumentos para ajustes finos e personalizados. 6.4.1 Histograma (histogram) O histograma é um gráfico extremamente popular, sendo bastante útil para visualizar a distribuição de variáveis contínuas. É bem provável que você já tenha visto um histograma quando aprendeu pela primeira vez a famosa distribuição normal. ## Dados dist_normal &lt;- data.frame(x = rnorm(10000, mean = 0, sd = 1)) ## Histograma de uma variável contínua ggplot(data = dist_normal, aes(x = x)) + geom_histogram() Neste histograma é possível entender que a maioria dos valores no objeto dist_normal estão próximos ao valor da média, i.e., 0. Em ecologia, os histogramas são utilizados para visualizar, por exemplo, a variação morfológica entre espécies (subespécies, gênero, famílias, etc.), variação de parâmetros populacionais entre diferentes espécies ou dentro da mesma espécie em diferentes localidades. 6.4.1.1 Versão padrão Vamos utilizar o conjunto de dados palmerpenguins para construir um histograma da distribuição da variável flipper_length_mm com a função geom_hitogram(). Esta função utiliza uma variável contínua no eixo x e a frequência de cada categoria de intervalo de valores no eixo y. O gráfico a seguir representa a frequência de uma variável (neste caso, a medida de todos os pinguins, independente da espécie). ## Histograma da coluna flipper_length_mm ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_histogram() 6.4.1.2 Definindo o número de classes Vamos utilizar o argumento bins para definir em quantas classes a variável x**` deve ser dividida. ## Histograma com 10 classes ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_histogram(bins = 10) + labs(title = &quot;10 classes&quot;) ## Histograma com 30 classes ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_histogram(bins = 30) + labs(title = &quot;30 classes&quot;) 6.4.1.3 Comparando múltiplas categorias Se quisermos comparar a distribuição de uma variável contínua entre diferentes categorias, podemos utilizar o argumento fill para colorir o gráfico. No exemplo abaixo, utilizamos cores diferentes para ilustrar a distribuição da variável x entre espécies diferentes (fill = species). ## Histograma com cores para diferentes categorias com sobreposição ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_histogram(alpha = .4) + labs(title = &quot;Com sobreposiçao&quot;) ## Histograma com cores para diferentes categorias sem sobreposição ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_histogram(position = &quot;dodge&quot;) + labs(title = &quot;Sem sobreposiçao&quot;) 6.4.1.4 Ajustes finos (versão personalizada) ## Histograma exemplo ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_histogram(alpha = .4, position = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(x = &quot;Comprimento da nadadeira (mm)&quot;, y = &quot;Frequência (%)&quot;, fill = &quot;Espécies&quot;) 6.4.1.5 Principais camadas utilizadas na função geom_histogram() aes() Eixo X (x): variável contínua (flipper_length_mm) Preenchimento (fill): variável categórica (species) que define as cores tendo como base o número de níveis dentro desta categoria geom() geom_histogram(): para que a variável contínua seja plotada como histograma Transparência das linhas e preenchimentos (alpha): 0.5 (varia de 0, transparência máxima, a 1, sem transparência) Posição das barras: o argumento position define se as barras devem ser inseridas de maneira sobreposta (position = \"identity\") ou não (position = \"dodge\") scale() scale_fill_manual(): para definir manualmente as cores theme() theme_bw(): para selecionar o tema com fundo branco labs(): para personalizar os títulos dos eixos X e Y, e da legenda 6.4.2 Gráfico de densidade (density plot) Nesta seção aprenderemos a criar um gráfico de densidade no R utilizando o ggplot2. Assim como o histograma, o gráfico de densidade é utilizado para visualizar a distribuição de uma variável contínua em intervalos. Esse gráfico é uma variação do histograma que utiliza Kernel Smoother e, além de ser muito útil para visualizar distribuições, pode ser usado para testar várias hipóteses ecológicas, como descrito no Capítulo 14. 6.4.2.1 Versão padrão Vamos utilizar o conjunto de dados palmerpenguins para plotar a distribuição da variável flipper_length_mm em um gráfico de densidade. Utilizaremos a função geom_density() para plotar uma variável no eixo x. ## Gráfico de densidade ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_density() Além da versão de densidade em linha, é possível utilizar o argumento fill para definir a cor de preenchimento do gráfico e o argumento alpha para definir a transparência do preenchimento. Utilizamos ainda o argumento color para definir a cor da linha. ## Argumento fill ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_density(fill = &quot;cyan4&quot;) ## Argumento fill, color e alpha ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_density(fill = &quot;cyan4&quot;, color = &quot;black&quot;, alpha = .4) 6.4.2.2 Comparando múltiplas categorias Em algumas situações queremos comparar a distribuição de uma variável contínua entre diferentes categorias. Dessa forma, podemos utilizar o argumento fill para colorir o gráfico. No exemplo abaixo, utilizamos cores diferentes para ilustrar a distribuição da variável x entre espécies diferentes (fill = species). ## O argumento fill preenche cada nível da coluna &quot;species&quot; (sem transparência: alpha = 1) ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_density() + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + labs(title = &quot;Sem transparência&quot;) ## Gráfico de densidade com cores para diferentes categorias com sobreposição ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_density(alpha = .4) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + labs(title = &quot;Com transparência&quot;) 6.4.2.3 Ajustes finos (versão personalizada) ## Gráfico de densidade exemplo ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_density(alpha = .4) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_x_continuous(breaks = seq(from = 160, to = 240, by = 10), limits = c(160, 240)) + scale_y_continuous(breaks = seq(from = 0, to = .07, by = .01)) + theme_bw(base_size = 16) + labs(x = &quot;Comprimento da nadadeira (mm)&quot;, y = &quot;Frequência&quot;, fill = &quot;Espécies&quot;) 6.4.2.4 Principais camadas utilizadas na função geom_density() aes() Eixo X (x): variável contínua (flipper_length_mm) Preenchimento (fill): variável categórica (species) que define as cores tendo como base o número de níveis dentro desta categoria geom() geom_density(): para que a variável contínua seja plotada como densidade Transparência das linhas e preenchimentos (alpha): 0.5 (varia de 0, transparência máxima, a 1, sem transparência) scale() scale_fill_manual(): para definir manualmente as cores de preferência do usuário scale_x_continuous() e scale_y_continuous(): determinam os limites (valores mínimos e máximos) para os dois eixos e, além disso, os intervalos entre os valores (breaks) theme() theme_bw(): para selecionar o tema com fundo branco labs(): para personalizar os títulos dos eixos X e Y, e da legenda 6.4.3 Diagrama de pontos (dot plot) Uma alternativa ao histograma e ao gráfico de densidade é o diagrama de pontos (Dot plot, apesar de ser relativamente menos usado em ecologia. 6.4.3.1 Versão padrão Vamos utilizar o conjunto de dados palmerpenguins para visualizar a distribuição da variável flipper_length_mm com o diagrama de pontos com a função geom_dotplot(). ## Gráfico de pontos ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_dotplot() 6.4.3.2 Comparando múltiplas categorias Assim como nas funções geom_histogram() e geom_density(), é possível comparar categorias na função geom_dotplot() utilizando o argumento fill, bem como os argumentos color, alpha e dotsize. ## O argumento fill preenche cada nível da coluna &quot;species&quot; (sem transparência: alpha = 1) ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_dotplot(dotsize = 1) ## Diagrama de pontos com cores para diferentes categorias com sobreposição ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_dotplot(dotsize = .7, color = &quot;black&quot;, alpha = .4) 6.4.3.3 Ajustes finos (versão personalizada) ## Diagrama de pontos exemplo ggplot(data = penguins, aes(x = flipper_length_mm, fill = species)) + geom_dotplot(color = &quot;black&quot;, alpha = .7, position = &quot;dodge&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_x_continuous(breaks = seq(from = 170, to = 240, by = 10), limits = c(170, 240)) + scale_y_continuous(breaks = seq(from = 0, to = 1.4, by = .2), limits = c(0, 1.4)) + theme_bw(base_size = 16) + labs(x = &quot;Comprimento da nadadeira (mm)&quot;, y = &quot;Frequência&quot;, fill = &quot;Espécies&quot;) Uma das limitações do diagrama de pontos é que a sobreposição dos pontos pode não permite a visualização apropriada desses valores sobrepostos entre diferentes grupos quando comparados. 6.4.3.4 Principais camadas utilizadas na função geom_dotplot() aes(): Eixo X (x): variável contínua (flipper_length_mm) Preenchimento (fill): variável categórica (species) que define as cores tendo como base o número de níveis dentro desta categoria geom(): geom_dotplot(): para que a variável contínua seja plotada como diagrama de pontos Transparência dos pontos (alpha): 0.5 (varia de 0, transparência máxima, a 1, sem transparência) Cor da borda do ponto (color): valor padrão (se não for especificado) é black Tamanho dos pontos (dotsize): valor padrão (se não for especificado) é 1 Posição dos pontos: o argumento position define se os pontos devem ser inseridos de maneira sobreposta (position = \"identity\") ou não (position = \"dodge\") scale(): scale_fill_manual() para definir manualmente as cores de preferência do usuário scale_x_continuous() e scale_y_continuous() determinam os limites (valor mínimo e máximo) para os dois eixos e, além disso, os intervalos entre os valores (breaks) theme(): theme_bw()para selecionar o tema com fundo branco labs() para personalizar os títulos dos eixos X e Y, e da legenda 6.4.4 Gráfico de barras (bar plot) O gráfico de barras é um dos mais usados em artigos e livros de ecologia, uma vez que permite comparar valores absolutos ou médios (combinados com alguma medida de variação como desvio padrão) de uma variável continua entre diferentes níveis de uma variável categórica. 6.4.4.1 Versão padrão O gráfico de barras utiliza retângulos para representar uma variável contínua ou a contagem de uma variável categórica, sendo que o comprimento dos retângulos é proporcional ao valor que ele representa. Por exemplo, é possível comparar qual a quantidade de indivíduos medidos para cada espécie de pinguim. ## Número de indivíduos coletados penguins_count &lt;- penguins %&gt;% dplyr::count(species) penguins_count #&gt; # A tibble: 3 × 2 #&gt; species n #&gt; &lt;fct&gt; &lt;int&gt; #&gt; 1 Adelie 152 #&gt; 2 Chinstrap 68 #&gt; 3 Gentoo 124 ## Gráfico de barras ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;) Além disso, é possível alterar as cores (color) e preenchimento (fill) das barras, bem como sua transparência (alpha) e largura (width), como demonstrado nos próximos quatro gráficos.1 ## Modificando o preenchimento ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;cyan4&quot;) ## Modificando a cor e o preenchimento ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;, color = &quot;cyan4&quot;, fill = &quot;white&quot;) ## Modificando a largura da barra = .75 ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;, width = .75) + labs(title = &quot;Largura = .75&quot;) ## Modificando a largura da barra = .25 ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;, width = .25) + labs(title = &quot;Largura = .25&quot;) Outra possibilidade para representação do gráfico de barras é inverter a direção das barras com a função coord_flip(). ## Barras vertical ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;, width = .6) ## Barras horizontal ggplot(data = penguins_count, aes(x = species, y = n)) + geom_bar(stat = &quot;identity&quot;, width = .6) + coord_flip() É possível utilizar variáveis categóricas para definir cores e preenchimento e ilustrar, por exemplo, tratamentos ou espécies diferentes com os argumentos fill e color. ## Gráfico de barras com preenchimento colorido ggplot(data = penguins_count, aes(x = species, y = n, fill = species)) + geom_bar(stat = &quot;identity&quot;) 6.4.4.2 Adicionando medidas de variação Em algumas comparações, utilizar somente os valores absolutos pode não ser a visualização mais apropriadas como, por exemplo, em desenhos de ANOVA (Capítulo 7). Desse modo, ao invés do valor máximo da barra representar o valor absoluto (e.g., número de indivíduos de uma espécie), ele vai representar o valor médio. Além disso, linhas adicionais (chamadas barras de erro) vão representar alguma medida de variação como desvio padrão, erro padrão, intervalo de confiança, entre outros. ## Calcular o desvio padrão por espécie penguins_media &lt;- penguins %&gt;% dplyr::group_by(species) %&gt;% dplyr::summarise(media = mean(flipper_length_mm, na.rm = TRUE), desvio = sd(flipper_length_mm, na.rm = TRUE)) ## Gráfico de barras com desvio padrão ggplot(data = penguins_media, aes(x = species, y = media, fill = species)) + geom_bar(stat = &quot;identity&quot;, alpha = .4) + geom_errorbar(aes(ymin = media-desvio, ymax = media+desvio), width = .1) + geom_point() 6.4.4.3 Ajustes finos (versão personalizada) ## Gráfico de barra exemplo ggplot(data = penguins_count, aes(x = species, y = n, fill = species)) + geom_bar(stat = &quot;identity&quot;) + geom_label(aes(label = n), fill = &quot;white&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(x = &quot;Espécies&quot;, y = &quot;Número de indivíduos&quot;, fill = &quot;Espécies&quot;) 6.4.5 Gráfico de setores (pie chart e donut chart) Além do gráfico de barras, o gráfico de setores representa uma alternativa para comparar a proporção entre categorias. Tais gráficos podem ser representados como pie charts ou donut charts, como demonstrado abaixo. No exemplo abaixo, utilizamos a mesma comparação realizada no item acima. Porém, os valores de contagem (número de indivíduos por espécie) devem ser transformados previamente em proporção. 6.4.5.1 Gráfico de setores (pie chart) ## Cálculo da proporção - pie penguins_prop &lt;- penguins %&gt;% dplyr::count(species) %&gt;% dplyr::mutate(prop = round(n/sum(n), 4)*100) ## Gráfico de setores ggplot(data = penguins_prop, aes(x = &quot;&quot;, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + geom_text(aes(label = paste0(prop, &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = .5), size = 8) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + coord_polar(&quot;y&quot;, start = 0) + theme_void() + labs(fill = &quot;Espécies&quot;) 6.4.5.2 Gráfico de setores (donut chart) ## Gráfico de setores - donut ggplot(data = penguins_prop, aes(x = 2, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;) + geom_text(aes(label = paste0(prop, &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = .5), size = 5) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + xlim(0, 2.5) + coord_polar(theta = &quot;y&quot;, start = 0) + theme_void() + theme(legend.position = c(.5, .5), legend.title = element_text(size = 20), legend.text = element_text(size = 15)) + labs(fill = &quot;Espécies&quot;) 6.4.5.3 Comparando gráficos de setores com gráfico de barras O mesmo conjunto de dados pode ser visualizado de diferentes formas. Não diferente, a comparação da proporção de ocorrências de diferentes categorias pode ser feita de várias maneiras. Abaixo, apresentamos a comparação da proporção de indivíduos por cada uma das três espécies dos dados penguins. ## Gráfico de barras - vertical g_bar_v &lt;- ggplot(data = penguins_prop, aes(x = species, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;) + geom_label(aes(label = prop), fill = &quot;white&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Gráfico de Barras (Vertical)&quot;, x = &quot;Espécies&quot;, y = &quot;Número de indivíduos&quot;, fill = &quot;Espécies&quot;) ## Gráfico de barras - horizontal g_bar_h &lt;- ggplot(data = penguins_prop, aes(x = species, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;) + geom_label(aes(label = prop), fill = &quot;white&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + coord_flip() + theme_bw() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Gráfico de Barras (Horizonal)&quot;, x = &quot;Espécies&quot;, y = &quot;Número de indivíduos&quot;, fill = &quot;Espécies&quot;) ## Gráfico de setores - pie g_pie &lt;- ggplot(data = penguins_prop, aes(x = &quot;&quot;, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + geom_text(aes(label = paste0(prop, &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = .5), size = 3) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + coord_polar(&quot;y&quot;, start = 0) + theme_void() + labs(title = &quot;Pie chart&quot;, fill = &quot;Espécies&quot;) ## Gráfico de setores - donut g_donut &lt;- ggplot(data = penguins_prop, aes(x = 2, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;) + geom_text(aes(label = paste0(prop, &quot;%&quot;)), color = &quot;white&quot;, position = position_stack(vjust = .5), size = 3) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + coord_polar(theta = &quot;y&quot;, start = 0) + xlim(0, 2.5) + theme_void() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Donut chart&quot;, fill = &quot;Espécies&quot;) ## Combinação dos gráfigos grid.arrange(g_bar_v, g_bar_h, g_pie, g_donut, nrow = 2) 6.4.5.4 Principais camadas utilizadas no gráfico de barras e de setores: geom_bar() aes() Eixo X (x): variável categórica (species) Eixo Y (y): variável contínua (flipper_length_mm) Preenchimento (fill): a variável categórica (species) define a cor do preenchimento e os níveis dentro desta categoria determinam o número de cores que devem ser indicadas no scale_fill_manual() geom() geom_bar(): para que as variáveis categóricas sejam plotadas como gráficos de barra ou setores Transparência das barras (alpha): 0.5 (varia de 0, transparência máxima, a 1, sem transparência) stat: é necessário usar o argumento identity quando os valores do eixo Y são adicionados pelo usuário geom_label(): forma geométrica que adiciona rótulo dos valores absolutos das barras por categoria (species) geom_errorbar(): ymine ymax delimitam os valores mínimos e máximos, respectivamente, das barras de erro. Tais valores são representados pelo valor da média menos (no caso do ymin) ou mais (no caso do ymax) o valor do intervalo de confiança, desvio ou erro padrão coord coord_polar(): sistema de coordenadas para gerar barras circulares sobrepostas (stacked) que são usadas nos gráficos de setores (pie chart e donut chart) o argumento start = 0 indica o local de início do gráfico que, neste caso, começa na “hora” 0 em um “relógio” de 12 horas scale() scale_fill_manual(): para definir manualmente as cores de preferência do usuário theme() theme_bw(): para selecionar o tema com fundo branco labs(): para personalizar os títulos dos eixos X e Y, e da legenda. 6.4.6 Gráfico de caixa (boxplot) O gráfico de caixa, também conhecido como boxplot, e amplamente utilizado nos artigos e livros de ecologia, é uma visualização gráfica que sintetiza informações importantes de dados contínuos como mediana e variação (Figura 6.1) para diferentes níveis de uma variável categórica. Figura 6.1: Estrutura e elementos do boxplot. 6.4.6.1 Versão padrão Vamos plotar uma variável contínua (flipper_length_mm) no eixo y em função de uma variável categórica no eixo x (species). A definição de qual coluna do bando de dados é a x e qual é a y é feita dentro do na função aes(). ## Gráfico de caixas das coluna flipper_length_mm e species ggplot(data = penguins, aes(y = flipper_length_mm, x = species)) + geom_boxplot() É possível destacar os pontos referentes aos outliers (se houver) com o argumento outlier.color. Caso tenha interesse, é possível também remover os outliers do gráfico. ## Destaque dos outliers ggplot(data = penguins, aes(y = flipper_length_mm, x = species)) + geom_boxplot(outlier.color = &quot;red&quot;) + labs(title = &quot;Outliers vermelhos&quot;) ## Remoção dos outliers ggplot(data = penguins, aes(y = flipper_length_mm, x = species)) + geom_boxplot(outlier.shape = NA) + labs(title = &quot;Outliers removidos&quot;) Outra opção para os gráficos do tipo boxplot é utilizar o argumento notch = TRUE para produzir diagramas de caixa entalhados (notched). Estes diagramas são úteis para inferir de forma aproximada se exite diferença significativa entre as medias dos grupos. ## Gráfico com caixa entalhadas ggplot(data = penguins, aes(y = flipper_length_mm, x = species)) + geom_boxplot(notch = TRUE) + labs(title = &quot;Caixas entalhadas&quot;) 6.4.6.2 Comparando múltiplas categorias No exemplo abaixo, utilizamos cores diferentes para ilustrar espécies diferentes através do argumento fill = species. ## Modificando o preenchimento ggplot(data = penguins, aes(y = flipper_length_mm, x = species, fill = species)) + geom_boxplot() 6.4.6.3 Combinando boxplot com pontos (jitter) Podemos ainda acrescentar pontos para mostrar a distribuição dos dados. ## Boxplot com jitters ggplot(data = penguins, aes(y = flipper_length_mm, x = species, fill = species)) + geom_boxplot() + geom_jitter(size = .5) 6.4.6.4 Gráfico de violino (violin plot) como alternativa ao boxplot Além das caixas no boxplot, podemos utilizar o formato de “violino” (gráfico de violino) para representar a variação dos dados contínuos para as categorias. A informação adicional ao boxplot que o gráfico de violino permite visualizar é a densidade e distribuição dos pontos, assim como apresentamos acima no gráfico de densidades geom_density(). A diferença é que a densidade é espelhada e, desse modo, podemos visualizar os intervalores dos dados com maior ou menor concentração de valores. ## Gráfico de violino ggplot(data = penguins, aes(y = flipper_length_mm, x = species, fill = species)) + geom_violin() + geom_jitter(size = .5) É possível também combinar boxplot e gráfico de violino em um único gráfico. ## Combinando o gráfico de violino com o de caixas ggplot(data = penguins, aes(y = flipper_length_mm, x = species, fill = species)) + geom_violin() + geom_boxplot(width = .1, fill = &quot;gray&quot;) 6.4.6.5 Ajustes finos (versão personalizada) ## Gráfico de caixas exemplo ggplot(data = penguins, aes(x = species, y = flipper_length_mm, fill = species)) + geom_boxplot(width = .5, show.legend = FALSE) + geom_jitter(alpha = .4, show.legend = FALSE, position = position_jitter(width = .15, seed = 0)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(x = &quot;Species&quot;, y = &quot;Flipper length (mm)&quot;) ## Gráfico de violino exemplo ggplot(data = penguins, aes(x = species, y = flipper_length_mm, fill = species)) + geom_violin(width = .5, show.legend = FALSE) + geom_jitter(alpha = .4, show.legend = FALSE, position = position_jitter(width = .15, seed = 0)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(title = &quot;Pontos com jitter&quot;, x = &quot;Species&quot;, y = &quot;Flipper length (mm)&quot;) ## Gráfico de caixas e violino exemplo ggplot(data = penguins, aes(x = species, y = flipper_length_mm, fill = species)) + geom_violin(width = .5, show.legend = FALSE) + geom_boxplot(width = .3, fill = &quot;gray&quot;, show.legend = FALSE) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(title = &quot;Pontos sem jitter&quot;, x = &quot;Species&quot;, y = &quot;Flipper length (mm)&quot;) 6.4.6.6 Principais camadas utilizadas no geom_boxplot()e geom_violin() aes() Eixo X (x): variável categórica (species) Eixo Y (y): variável contínua (flipper_length_mm) Preenchimento (fill): a variável categórica (species) define a cor do preenchimento e os níveis dentro desta categoria determinam o número de cores que devem ser indicadas no scale_fill_manual(). geom(): geom_boxplot(): para que as variáveis contínuas e categóricas sejam plotadas como gráficos de caixas ou violinos width: largura das barras ou dos pontos(valor padrão: width = 1) fill: pode definir uma cor padrão (caso não tenha utilizado o fill dentro do argumento aes()) como fill = \"gray\" notch: para utilizar a caixa entalhada o argumento deve ser notch = TRUE, a escolha padrão da função geom_boxplot() é notch = FALSE geom_violin(): assim como nas outras formas geométricas, é possível controlar largura, cor, preenchimento e transparências dos violinos geom_jitter(): esta função basicamente “agita” aleatoriamente os pontos para evitar a sobreposição de valores idênticos. Esta função produz a mesma representação se usar a função geom_point(position = \"jitter\") scale() scale_fill_manual(): para definir manualmente as cores de preferência do usuário theme() theme_bw(): para selecionar o tema com fundo branco labs(): para personalizar os títulos dos eixos X e Y, e da legenda 6.4.7 Gráfico de dispersão (scatter plot) O gráfico de dispersão (em inglês, scatter plot) é famoso na ecologia por ser a visualização preferida para prepresentar a relação entre área e riqueza de espécies. Neste gráfico, os eixos X e Y são representados por variáveis contínuas. Em especial, os gráficos de dispersão são usados para representar os resultados testados por análises estatísticas como regressão linear, ANCOVA, mantel, PCA, PCoA, nMDS entre outros (Capítulos 7, 8 e 9). 6.4.7.1 Versão padrão ## Gráfico de dispersão das coluna flipper_length_mm e bill_length_mm ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm)) + geom_point() 6.4.7.2 Definindo a cor, tamanho, forma e preenchimento dos pontos ## Cor e tamanho dos pontos ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm)) + geom_point(color = &quot;cyan4&quot;, size = 4) + labs(title = &quot;Sem transparência&quot;) ## Cor, tamanho dos pontos e transparência ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm)) + geom_point(color = &quot;cyan4&quot;, size = 4, alpha = .4) + labs(title = &quot;Com transparência&quot;) A forma dos pontos permite dois controles importantes: a forma em si (símbolos como círculo, quadrado, etc.) e a possibilidade de preenchimento da forma. A figura a seguir discrimina esses símbolos e o valor que deve ser utilizado para desenhar a forma preferida. É importante notar que os símbolos 21 a 25 possuem dois argumentos: (i) cor (que, na verdade, é a cor da borda do símbolo) e (ii) a cor que define o preenchimento do símbolo. O tipo de símbolo é definido pelo argumento shape. Figura 6.2: Tipos de símbolos disponíveis. Assim, é possível controlar cores, formas e preenchimento combinado os argumentos shape, fille color com a função scale_manual(). É importante notar que para os símbolos entre 15 e 20 só podemos controlar o argumento cor, enquanto os símbolos entre 21 e 25 podemos controlar a cor e o preenchimento. ## Formato e tamanho ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm)) + geom_point(shape = 1, size = 4) ## Formato e tamanho para espécies ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species)) + geom_point(shape = 19, size = 4) ## Formato e tamanho e cor ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, fill = species)) + geom_point(shape = 21, size = 4, color = &quot;black&quot;) 6.4.7.3 Definindo linhas de ajuste Quando usamos modelos estatísticos como, por exemplo, lm(), glm(), gam(), entre outros, podemos utilizar os valores preditos para demonstrar a relação entre as variáveis X e Y. No ggplot2 a função geom_smooth() faz esse ajuste com certa simplicidade. ## Linha de ajuste ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm)) + geom_point(shape = 20, size = 4, color = &quot;black&quot;) + geom_smooth(method = lm) 6.4.7.4 Ajustes finos (versão personalizada) ## Gráfico de dispersão exemplo ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) Além disso, podemos relacionar dados não tão usuais. Recomendamos a leitura do artigo de (matejka_same_2017?) que apresenta as armadilhas típicas que dados podem gerar quando evitamos de visualizá-los previamente. ## Regressão do dinossauro datasaurus_dozen %&gt;% dplyr::filter(dataset == &quot;dino&quot;) %&gt;% ggplot() + aes(x = x, y = y) + geom_point(colour = &quot;black&quot;, fill = &quot;black&quot;, size = 4, alpha = .7, shape = 21) + theme_bw() + theme(axis.title = element_text(size = 24), axis.text.x = element_text(size = 20), axis.text.y = element_text(size = 20)) 6.4.8 Visualização de múltiplos gráficos pareados Muitas vezes precisamos plotar a relação de mais de uma variável, e muitas vezes essas variáveis são de mais de um tipo (contínua, categórica, etc…). O gráfico mais indicado nesses casos é o gráfico pareado ((emerson_generalized_2013?)) que nos auxilia à ter uma visão geral do conjunto de dados e de suas interrelações. Esse gráfico também é chamado de pairs plot ou correlograma. 6.4.8.1 Gráfico pareado com variáveis contínuas A função ggpairs()do pacote GGally permite criar múltiplos gráficos pareados comparando as variáveis contínuas no seu conjunto de dados. Além de demonstrar gráficos de dispersão de cada par de variáveis, ela apresenta gráficos de densidade de cada variável individualmente e, além disso, os valores de correlação entre os pares analisados com ou sem uma potencial variável categórica (neste caso, species). ## Gráfico pareado com variáveis contínuas penguins %&gt;% dplyr::select(body_mass_g, ends_with(&quot;_mm&quot;)) %&gt;% GGally::ggpairs(aes(color = penguins$species)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw() 6.4.8.2 Gráfico pareado com vários tipos de variáveis Como alternativa, a função ggpairs() permite também incluir variáveis categóricas nas comparações. Neste caso, ela reconhece o tipo de gráfico (boxplot, dispersão, etc…) a partir da classe das variáveis. ## Gráfico pareado com variáveis contínuas e categóricas penguins %&gt;% dplyr::select(species, sex, body_mass_g, ends_with(&quot;_mm&quot;)) %&gt;% GGally::ggpairs(aes(color = species)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw() 6.4.9 Erros comuns dos usuários do ggplot2 e como evitá-los Abaixo, apresentamos uma lista não exaustiva dos erros mais comuns que cometemos (e vimos muitos usuários cometerem) ao fazer gráficos no ggplot2: Utilizar ajuste manual nas funções scale_shape_manual(), scale_color_manual() ou scale_fill_manual() sem indicar no argumento aes() as variáveis que devem definir cada um desses elementos gráficos Utilizar ajuste manual na função scale_size_manual() indicando uma variável categórica em vez de numérica Número de cores indicadas como valores no scale_fill_manual() ou scale_color_manual(): ao definir as cores de maneira personalizada (ou seja, não usando o padrão da função) é muito comum utilizarmos o número de cores usados por algum tutorial ou livro. Com frequência, o exemplo seguido e seus dados não possuem o mesmo número de cores. Deste modo, você pode usar códigos no R para ajudar a quantificar o número de cores necessárias. Por exemplo, para os dados penguins, o código a seguir indica o número de cores necessárias: length(levels(penguins\\$species)). Assim, será necessário indicar três cores diferentes dentro da função scale_*(). Função geom_smooth(): como falado, a função geom_smooth() é muito útil (e simples) para gerar as linhas de ajuste (best fit) típicas de modelos lineares e não lineares. Porém, fique alerta que ao usar, por exemplo, geom_smooth(method = lm), o modelo linear utilizado para testar sua predição foi o lm(). Se tiver utilizado glm()ou gam() o ajuste deve ser produzido a partir desses modelos. Uso incorreto da classe das variáveis: neste caso, o usuário utilizar uma variável numérica (por exemplo, 1, 2 e 3) como variável categórica. Neste caso, é preciso transformar a variável numérica em variável categóricas (antes de fazer o ggplot2 ou dentro do aes()). Veja exemplos abaixo: ## Figura incorreta, sem a transformação da variável year penguins %&gt;% ggplot(aes(x = year, y = bill_length_mm)) + geom_boxplot() + theme_bw() + labs(title = &quot;Figura incorreta&quot;) ## Figura correta, com transformação interna da variável year penguins %&gt;% ggplot(aes(x = factor(year), y = bill_length_mm)) + geom_boxplot() + theme_bw() + labs(title = &quot;Figura correta com transformação interna&quot;) ## Figura correta, com transformação prévia da variável year penguins %&gt;% mutate(year_f = as.factor(year)) %&gt;% ggplot(aes(x = year_f, y = bill_length_mm)) + geom_boxplot() + theme_bw() + labs(title = &quot;Figura correta com transformação prévia&quot;) 6.5 Finalização de gráficos para publicação 6.5.1 Posição, cores e fonte da legenda É possível controlar a posição, cores e fonte da legenda em diversos locais com alguns argumentos dentro da função theme(): legend.position: controla a posição na área do gráfico: top, right, bottom, left ou none. Além disso, é possível inserir a legenda internamento no gráfico indicando as posições nos eixos X e Y legend.box: determina as características do retângulo onde a legenda é inserida: legend.box.background (combinado com element_rect()) e legend.box.margin (combinado com margin()) legend.text: controla a cor e tamanho da legenda (as duas informações devem ser inseridas dentro da função element_text()) legend.title: personaliza a cor e tamanho da legenda também dentro da função element_text() ## Legenda acima ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + theme(legend.position = &quot;top&quot;) + labs(title = &quot;Legenda acima do gráfico&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) ## Leganda abaixo ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + theme(legend.position = &quot;bottom&quot;) + labs(title = &quot;Legenda abaixo do gráfico&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) ## Sem legenda ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Sem legenda&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) ## Legenda personalizada ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + theme(legend.position = &quot;right&quot;, legend.text = element_text(size = 14, colour = &quot;red&quot;), legend.title = element_text(face = &quot;bold&quot;), legend.box.background = element_rect(color=&quot;red&quot;, size=2), legend.margin = margin(6, 6, 6, 6)) + labs(title = &quot;Legenda personalizada&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) ## Legenda interna ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + theme(legend.position = c(.2, .8), legend.title = element_blank(), legend.key = element_blank(), legend.background = element_blank(), legend.text = element_text(size = 12, face = &quot;bold&quot;)) + labs(title = &quot;Legenda interna&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) 6.5.2 Elementos gráficos: eixo, fonte, gride O gráfico padronizado (sem edição extra) geralmente não traz elementos mínimos para publicação em revistas, livros ou periódicos. Além do controle da posição, cor e tamanho da legenda, é fundamental personalizar os seguintes elementos: eixo, fonte e gride. Eixos Variação: define limites mínimos e máximos para os eixos X (xlim()) e Y (ylim()) Intervalo: define o valor intervalo entre os números dos eixos X e Y ## Nome dos eixos ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + ylim(170, 230) + xlim(30, 60) + labs(title = &quot;Nome dos eixos&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) ## Intervalo dos eixos ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + scale_x_continuous(limits = c(30, 60), breaks = seq(30, 60, 2)) + labs(title = &quot;Intervalo dos eixos&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) Fonte dos eixos X e Y Tipo Tamanho Cor Face (itálico, negrito, etc.) Ângulo ## Cor e fonte dos eixos ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + theme(axis.title.x = element_text(face = &quot;bold&quot;, size = 20, colour = &quot;cyan4&quot;), axis.text.x = element_text(size = 14), axis.title.y = element_text(face = &quot;bold&quot;, size = 20, colour = &quot;cyan4&quot;), axis.text.y = element_text(size = 14)) + labs(title = &quot;Cor e fonte dos eixos&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) ## Intervalo e ângulos do texto dos eixos ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + scale_x_continuous(limits = c(20, 60), breaks = seq(20, 60, 2)) + theme(axis.title.x = element_text(face = &quot;bold&quot;, size = 20, colour = &quot;cyan4&quot;), axis.text.x = element_text(size = 14, angle = 45), axis.title.y = element_text(face = &quot;bold&quot;, size = 20, colour = &quot;cyan4&quot;), axis.text.y = element_text(size = 14)) + labs(title = &quot;Intervalo e ângulos do texto dos eixos&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) Gride Linhas de grade principais (panel.grid.major) Linhas de grade secundárias (panel.grid.minor) Borda do gráfico (panel.border) ## Linhas de grade principais ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + scale_x_continuous(limits = c(30, 60), breaks = seq(30, 60, 5)) + theme(axis.title.x = element_text(face = &quot;bold&quot;, size = 16), axis.text.x = element_text(size = 12), axis.title.y = element_text(face = &quot;bold&quot;, size = 16), axis.text.y = element_text(size = 12), panel.grid.minor = element_blank()) + labs(title = &quot;Linhas de grade principais&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) ## Retirar linhas de grade ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + scale_x_continuous(limits = c(30, 60), breaks = seq(30, 60, 5)) + theme(axis.title.x = element_text(face = &quot;bold&quot;, size = 16), axis.text.x = element_text(size = 12), axis.title.y = element_text(face = &quot;bold&quot;, size = 16), axis.text.y = element_text(size = 12), panel.grid.minor = element_blank(), panel.grid.major = element_blank()) + labs(title = &quot;Retirar linhas de grade&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) ## Borda do gráfico ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = 0.5) + scale_x_continuous(limits = c(30, 60), breaks = seq(30, 60, 5)) + theme(axis.title.x = element_text(face = &quot;bold&quot;, size = 16), axis.text.x = element_text(size = 12), axis.title.y = element_text(face = &quot;bold&quot;, size = 16), axis.text.y = element_text(size = 12), panel.grid.minor = element_blank(), panel.grid.major = element_blank(), panel.border = element_rect(size = 2, colour = &quot;black&quot;, fill = NA)) + labs(title = &quot;Borda do gráfico&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) ## Borda do gráfico ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .4) + scale_x_continuous(limits = c(30, 60), breaks = seq(30, 60, 5)) + theme(axis.title.x = element_text(face = &quot;bold&quot;, size = 16), axis.text.x = element_text(size = 12), axis.title.y = element_text(face = &quot;bold&quot;, size = 16), axis.text.y = element_text(size = 12), panel.grid.minor = element_blank(), panel.grid.major = element_blank(), axis.line = element_line(size = 1)) + labs(title = &quot;Borda do gráfico&quot;, x = &quot;Eixo X&quot;, y = &quot;Eixo Y&quot;) 6.5.3 Temas personalizados ggtheme() Existem vários temas criados dentro do universo ggtheme() que podem facilitar Existem vários temas criados dentro do universo ggtheme() que podem facilitar a escolha de um modelo com ótima qualidade para publicação. Abaixo, demonstramos os modelos mais utilizados. ## theme_gray ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_gray(base_size = 16) + labs(title = &quot;theme_gray()&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) ## theme_bw() ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_bw(base_size = 16) + labs(title = &quot;theme_bw()&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) ## theme_classic() ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_classic(base_size = 16) + labs(title = &quot;theme_classic()&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) 6.5.4 Criando seu próprio theme_custom() Por fim, é possível criar um tema personalizado como uma função. Assim, o usuário pode controlar todos os elementos gráficos em um único código. O maior benefício de personalizar uma função é que não será necessário fazer os ajustes finos em todos os gráficos que tiver construindo, o que pode representar grande economia de tempo e linhas de código ## Criar uma função com os ajustes finos theme_book &lt;- function(){ # Defina uma fonte font &lt;- &quot;Times&quot; # Digite names(pdfFonts()) no console do R para ver a lista de fontes disponíveis theme( # Defina elementos do gride panel.grid.major = element_line(colour = &quot;#d3d3d3&quot;), panel.grid.minor = element_blank(), axis.ticks = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = .5), # Defina elementos textuais # Título plot.title = element_text( family = font, # Fonte size = 20, # Tamanho da fonte face = &#39;bold&#39;, # Tipo de fonte hjust = 0, # Alinhamento horizontal vjust = 2), # Alinhamento vertical # Subtítulo plot.subtitle = element_text( family = font, # Fonte size = 14), # Tamanho da fonte # Rúbrica plot.caption = element_text( family = font, # Fonte size = 10, # Tamanho da fonte hjust = 1), # Alinhamento horizontal # Título dos eixos axis.title = element_text( family = font, # Fonte size = 14), # Tamanho da fonte # Texto dos eixos axis.text = element_text( family = font, # Fonte size = 14) # Tamanho da fonte )} ## Gráfico usando a função de tema criada ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme_book() + labs(title = &quot;Tema personalizado&quot;, x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;, caption = &quot;Fonte = palmerpinguins&quot;) 6.5.5 Exportando dados com alta qualidade com a função ggsave() O último passo para construir gráficos com qualidade de publicação é exportar em um formato específico, como png, pdf ou svg (entre outros). A função ggsave() não só permite que você tenha o controle sobre o formato, mas também sobre a qualidade e tamanho desejados com os seguintes argumentos: width: largura do gráfico height: altura do gráfico units: unidade de medida (cm, mm) do gráfico para definir largura e tamanho dpi: resolução ou qualidade da imagem, medida em pontos por polegada (dots per inch) (padrão = 300) ## Gráfico g1 &lt;- ggplot(data = penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = species, shape = species)) + geom_point(size = 4, alpha = .7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_shape_manual(values = c(19, 15, 17)) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;purple&quot;, &quot;cyan4&quot;)) + theme(legend.position = c(.1, .1), legend.title = element_blank(), legend.key = element_blank(), legend.background = element_blank()) + theme_book() + labs(x = &quot;Comprimento do bico (mm)&quot;, y = &quot;Profundidade do bico (mm)&quot;, color = &quot;Espécies&quot;, shape = &quot;Espécies&quot;) g1 Podemos exportar esse gráfico de diferentes formas. ## Exportar no formato PDF ggsave(filname = &quot;g1.pdf&quot;, plot = g1, width = 15, height = 15, dpi =300, units = &quot;cm&quot;) ## Exportar no formato PNG ggsave(filname = &quot;g1.png&quot;, plot = g1, width = 15, height = 15, dpi =300, units = &quot;cm&quot;) ## Exportar no formato SVG ggsave(filname = &quot;g1.svg&quot;, plot = g1, width = 15, height = 15, dpi =300, units = &quot;cm&quot;) 6.6 Para se aprofundar 6.6.1 Livros Chang W. 2018. R Graphics Cookbook. [http://www.cookbook-r.com/Graphs/] Healy K. 2019. Data Visualization: a practical introduction. Princeton University Press. [https://socviz.co/´] Kabacoff R. 2020. Data Visualization with R. [https://rkabacoff.github.io/datavis/] Rahlf T. 2019. Data Visualisation with R: 111 Examples. 2ed. Springer. [http://www.datavisualisation-r.com/] Sievert C. 2019. Interactive web-based data visualization with R, plotly, and shiny. Chapman &amp; Hall/CRC. [https://plotly-r.com/] Wickham H. 2016. ggplot2: elegant graphics for data analysis. Springer. [https://ggplot2-book.org/] Wilke C O. 2019. Fundamentals of Data Visualization. O’Reilly Media. [https://clauswilke.com/dataviz/] Wilkinson L, Wills D, Rope D, Norton A, Dubbs R. 2005. The Grammar of Graphics. Springer. 6.6.2 Links The Data Visualisation Catalogue The R Graph Gallery From Data to Viz Data Viz Project QuickChart Chart.js drawdata.xyz Referências "],["cap7.html", "Capítulo 7 Modelos lineares 7.1 Teste T (de Student) para duas amostras independentes 7.2 Teste T para amostras pareadas 7.3 Correlação de Pearson 7.4 Regressão Linear Simples 7.5 Regressão Linear Múltipla 7.6 Análises de Variância (ANOVA) 7.7 ANOVA de um fator 7.8 ANOVA com dois fatores ou ANOVA fatorial 7.9 ANOVA em blocos aleatorizados 7.10 Análise de covariância (ANCOVA)", " Capítulo 7 Modelos lineares Pré-requisitos do capítulo ## Pacotes library(ecodados) library(car) library(ggplot2) library(ggpubr) library(ggforce) library(lsmeans) library(lmtest) library(sjPlot) ## Dados necessários CRC_PN_macho &lt;- ecodados::teste_t_var_igual CRC_LP_femea &lt;- ecodados::teste_t_var_diferente Pareado &lt;- ecodados::teste_t_pareado correlacao_arbustos &lt;- ecodados::correlacao dados_regressao &lt;- ecodados::regressoes dados_regressao_mul &lt;- ecodados::regressoes dados_anova_simples &lt;- ecodados::anova_simples dados_dois_fatores &lt;- ecodados::anova_dois_fatores dados_dois_fatores_interacao &lt;- ecodados::anova_dois_fatores dados_dois_fatores_interacao2 &lt;- ecodados::anova_dois_fatores_interacao2 dados_bloco &lt;- ecodados::anova_bloco dados_ancova &lt;- ecodados::ancova 📝 Importante Estatísticas frequentistas como as que serão abordadas neste capítulo são baseadas em testes estatísticos (e.g. F, t, 𝛘2, etc…), que são resultados númericos do teste, e um valor de probabilidade (valor de P) que é associado com o teste estatístico (Nicholas J. Gotelli and Ellison 2012). O valor de P mede a probabilidade que os valores observados ou mais extremos seriam encontrados caso a hipótese nula seja verdadeira (veja @{cap3}). Ao longo do livro usaremos o critério convencional de rejeitar a hipótese nula quando P &lt; 0.05. Contudo, sugerimos a leitura destes artigos (White et al. 2013; Barber and Ogle 2014; Burnham and Anderson 2014b; Murtaugh 2014; Halsey 2019) que discutemas limitações e problemas associados ao valor de P . 7.1 Teste T (de Student) para duas amostras independentes Uma das perguntas mais comuns em estatística é saber se há diferença entre as médias de dois grupos ou tratamentos. Para responder a esta pergunta, William Sealy Gosset, químico da cervejaria Guinness em 1908, desenvolveu o Teste T que é uma estátistica que segue uma distribuição t de Student para rejeitar ou não uma hipótese nula de médias iguais entre os grupos. \\[ t = \\frac{(\\bar{X}_1 - \\bar{X}_2)}{\\sqrt{\\frac{2S^2_p}{n}}}\\] Onde: \\(\\bar{X}\\)1 - \\(\\bar{X}\\)2 = diferença entre as médias de duas amostras, S2p = desvio padrão das amostras, n = tamanho das amostras. Premissas do Teste t : As amostras devem ser independentes; As unidades amostrais são selecionadas aleatoriamente; Distribuição normal (gaussiana) dos resíduos. Observação: Zar (2010) indica que o Test T é robusto mesmo com moderada violação da normalidade, principalmente se o tamanho amostral for alto. Homogeneidade da variância. Observação: Caso as variâncias não sejam homogêneas, isso deve ser informado na linha de comando, pois o denominador da fórmula acima será corrigido. Avaliação das premissas: Uma das maneiras de avaliarmos as premissas de normalidade e homogeneidade da variância relacionadas às análises do teste T, ANOVA e regressões lineares simples e múltiplas é o uso da inspeção gráfica da distribuição dos resíduos (Figura 1) (Zuur, Ieno, and Elphick 2009a). A homegeneidade da variância utiliza um gráfico dos resíduos pelos valores preditos (Figura 1A). A distribuição dos resíduos será homogênea se não observarmos nenhum padrão na distribuição dos pontos (i.e. forma em V, U ou funil). A normalidade dos resíduos utiliza um gráfico de quantis-quantis (QQ-plots). A distribuição dos resíduos será normal se os pontos estiverem próximos à reta (Figure 1B). Inspeção gráfica da homogeneidade da variância (A) e normalidade (B) dos resíduos. Os símbolos verdes indicam que os gráficos em que os resíduos apresentam distribuição homogênea e normal, enquanto os símbolos vermelhos indicam os gráficos em que os resíduos violam as premissas do teste.   7.1.0.1 Exemplo prático 1 - Teste T para duas amostras com variâncias iguais Explicação dos dados Neste exemplo avaliaremos o comprimento rostro-cloacal (CRC em milímetros) de machos de Physalaemus nattereri (Anura:Leptodactylidae) amostrados em diferentes estações do ano com armadilhas de interceptação e queda na Região Noroeste do estado de São Paulo (da Silva and Rossa-Feres 2010). Pergunta: O CRC dos machos de P. nattereri é maior na estação chuvosa do que na estação seca? Predições O CRC dos machos será maior na estação chuvosa porque há uma vantangem seletiva para os indivíduos maiores durante a atividade reprodutiva. Variáveis Variáveis resposta e preditoras Dataframe com os indivíduos (unidade amostral) nas linhas e CRC (mm - variável resposta contínua) e estação (variável preditora categórica) como colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Vamos olhar os dados usando a função head head(CRC_PN_macho) #&gt; CRC Estacao #&gt; 1 3.82 Chuvosa #&gt; 2 3.57 Chuvosa #&gt; 3 3.67 Chuvosa #&gt; 4 3.72 Chuvosa #&gt; 5 3.75 Chuvosa #&gt; 6 3.83 Chuvosa Vamos verificar a normalidade dos resíduos usando o QQ-plot. ## Teste de normalidade residuos &lt;- lm(CRC ~ Estacao, data = CRC_PN_macho) qqPlot(residuos) #&gt; [1] 22 26 Os pontos estão próximos a reta indicando que a distribuição dos resíduos é normal (Figura 1). Outra possibilidade é usar os testes de Shapiro-Wilk e Levene para verificar a normalidade e a homogeneidade da variância respectivamente. 📝 Importante Hipótese nula destes testes é que a distribuição é normal ou homogênea: Valor de p &lt; 0.05 significa que os dados não apresentam distribuição normal ou homogênea; valor de p &gt; 0.05 significa que os dados apresentam distribuição normal ou homogênea. # Teste de Shapiro shapiro.test (CRC_PN_macho$CRC) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: CRC_PN_macho$CRC #&gt; W = 0.95559, p-value = 0.05417 Teste de Levene para homogeneidade de variância. ## Teste de homogeneidade de variância leveneTest(CRC ~ Estacao, data = CRC_PN_macho) #&gt; Levene&#39;s Test for Homogeneity of Variance (center = median) #&gt; Df F value Pr(&gt;F) #&gt; group 1 1.1677 0.2852 #&gt; 49 Percebam que a distribuição dos resíduos foi normal e homogênea na inspeção gráfica, assim como nos testes de Shapiro e Levene, respectivamente. Agora podemos realizar a análise sabendo que os dados seguem as premissas requeridas pelo test T. Vamos para os comandos da análise do Teste T amostrans indenpendentes e variâncias iguais. ## Análise Teste T t.test(CRC ~ Estacao, data = CRC_PN_macho, var.equal = TRUE) #&gt; #&gt; Two Sample t-test #&gt; #&gt; data: CRC by Estacao #&gt; t = 4.1524, df = 49, p-value = 0.000131 #&gt; alternative hypothesis: true difference in means between group Chuvosa and group Seca is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 0.2242132 0.6447619 #&gt; sample estimates: #&gt; mean in group Chuvosa mean in group Seca #&gt; 3.695357 3.260870 Quatro valores devem ser apresentados ao leitores: i ) estatística do teste - representada por t = 4,15; ii) valor de significancia - representado por p-value = 0,0001; iii) graus de liberdade - representado por df = 49; e iv) diferença entre as médias. Veja abaixo como descrever os resultados no seu trabalho. Visualizar os resultados em gráfico. ## Gráfico ggplot(data = CRC_PN_macho, aes(x = Estacao, y = CRC, color = Estacao)) + labs(x = &quot;Estações&quot;, y = &quot;CRC (mm) - P. nattereri&quot;) + geom_boxplot(fill = c(&quot;darkorange&quot;, &quot;cyan4&quot;), color = &quot;black&quot;, outlier.shape = NA) + geom_jitter(shape = 16, position = position_jitter(0.1), cex = 5, alpha = 0.7) + scale_color_manual(values = c(&quot;black&quot;, &quot;black&quot;)) + tema_livro() + theme(legend.position = &quot;none&quot;) Interpretação dos resultados Neste exemplo, rejeitamos a hipótese nula de que as médias do CRC dos machos entre as estações seca e chuvosa são iguais. Os resultados mostram que os machos de P. nattereri coletados na estação chuvosa foram em média 0,43 mm maiores do que os coletados na estação seca (t49 = 4,15, P &lt; 0,001).   7.1.0.2 Exemplo prático 2 - Teste T para duas amostras independentes com variâncias diferentes Explicação dos dados Neste exemplo, avaliaremos o comprimento rostro-cloacal (CRC - milímetros) de fêmeas de Leptodactylus podicipinus amostradas em diferentes estações do ano com armadilhas de interceptação e queda na Região Noroeste do estado de São Paulo (da Silva and Rossa-Feres 2010). Observação: Os dados foram alterados em relação a publicação original para se enquadrarem no exemplo de amostras com variâncias diferentes. Pergunta: O CRC das fêmeas de L. podicipinus é maior na estação chuvosa do que na estação seca? Predições O CRC das fêmeas será maior na estação chuvosa porque há uma vantangem seletiva para os indivíduos maiores durante a atividade reprodutiva. Variáveis Variáveis resposta e preditoras Dataframe com os indivíduos (unidade amostral) nas linhas e CRC (mm - variável resposta contínua) e estação (variável preditora categórica) como colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Olhar os dados usando a funçãohead head(CRC_LP_femea) #&gt; CRC Estacao #&gt; 1 2.72 Chuvosa #&gt; 2 2.10 Chuvosa #&gt; 3 3.42 Chuvosa #&gt; 4 1.50 Chuvosa #&gt; 5 3.90 Chuvosa #&gt; 6 4.00 Chuvosa Vamos avaliar as premissas do teste. Començando com o teste de normalidade. ## Teste de normalidade usando QQ-plot residuos_LP &lt;- lm(CRC ~ Estacao, data = CRC_LP_femea) qqPlot(residuos_LP) #&gt; [1] 4 6 Os resíduos apresentam distribuição normal. Agora vamos avaliar a homogeneidade da variância. # Teste de homogeneidade da variância leveneTest(CRC ~ Estacao, data = CRC_LP_femea) #&gt; Levene&#39;s Test for Homogeneity of Variance (center = median) #&gt; Df F value Pr(&gt;F) #&gt; group 1 9.8527 0.01053 * #&gt; 10 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Os resíduos não apresentam distribuição homogênea. Portanto, vamos realizazr o teste T com variâncias diferentes. Para isso, use o argumento var.equal = FALSE t.test(CRC ~ Estacao, data = CRC_LP_femea, var.equal = FALSE) #&gt; #&gt; Welch Two Sample t-test #&gt; #&gt; data: CRC by Estacao #&gt; t = -1.7633, df = 6.4998, p-value = 0.1245 #&gt; alternative hypothesis: true difference in means between group Chuvosa and group Seca is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -1.5489301 0.2375016 #&gt; sample estimates: #&gt; mean in group Chuvosa mean in group Seca #&gt; 2.834286 3.490000 Neste exemplo, não rejeitamos a hipótese nula e consideramos que as médias do CRC das fêmeas entre as estações seca e chuvosa são iguais (t6,49 = 1,76, P = 0,12). Visualizar os resultados em gráfico. ## Gráfico ggplot(data = CRC_LP_femea, aes(x = Estacao, y = CRC, color = Estacao)) + labs(x = &quot;Estações&quot;, y = &quot;CRC (mm) - L. podicipinus&quot;, size = 15) + geom_boxplot(fill=c(&quot;darkorange&quot;, &quot;cyan4&quot;), color=&quot;black&quot;, outlier.shape = NA) + geom_jitter(shape = 16, position=position_jitter(0.2), cex = 5, alpha = 0.7) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;)) + tema_livro() + theme(legend.position = &quot;none&quot;) Interpretação dos resultados Os resultados mostram que as fêmeas de L. podicipinus coletadas na estação chuvosa não são maiores do que as fêmeas coletadas na estação seca, apesar de possuirem maior variância, o que pode ser biologicamente interessante.   7.2 Teste T para amostras pareadas O Teste T Pareado é uma estatística que usa dados medidos duas vezes na mesma unidade amostral, resultando em pares de observações para cada amostra (amostras pareadas). Ele determina se a diferença da média entre duas observações é zero. \\[ t = \\frac{\\bar{d}}{S_{\\bar{d}}}\\] Onde: \\(\\bar{d}\\) = média da diferença das medidas pareadas. Observe que o teste não usa as medidas originais, e sim, a diferença para cada par, S\\(\\bar{d}\\) = erro padrão da diferença das medidas pareadas. Premissas do Teste t para amostras pareadas: As unidades amostrais são selecionadas aleatoriamente; As observações não são independentes; Distribuição normal (gaussiana) dos valores da diferença para cada par.   7.2.0.1 Exemplo prático 1 - Teste T para amostras pareadas Explicação dos dados Neste exemplo avaliaremos a diferença na riqueza de espécies de artrópodes registradas em 27 localidades. Todas as localidades foram amostradas duas vezes. A primeira amostragem foi realizada na localidade antes da pertubação e a segunda amostragem foi realizada após a localidade ter sofrido uma queimada. Portanto, existe uma dependência temporal uma vez que amostramos a mesma localidade antes e depois da queimada. Pergunta: A riqueza de espécies de artrópodes é prejudicada pelas queimadas? Predições A riqueza de espécies de artrópodes será maior antes da queimada devido a extinção local das espécies. Variáveis Variáveis resposta e preditoras Dataframe com as localidades nas linhas e riqueza de espécies (variável resposta contínua) e estado (Pre-queimada ou Pós-queimada - variável preditora categórica) da localidade nas colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Olhando os dados com a função head head(Pareado) #&gt; Areas Riqueza Estado #&gt; 1 1 92 Pre-Queimada #&gt; 2 2 74 Pre-Queimada #&gt; 3 3 96 Pre-Queimada #&gt; 4 4 89 Pre-Queimada #&gt; 5 5 76 Pre-Queimada #&gt; 6 6 80 Pre-Queimada Cálculo do Teste T com amostras pareadas. ## Análise Teste T Pareado # O uso do [] é para selecionar dentro do vetor/coluna *Riqueza* os 27 # primeiros números [1:27] que representam as localidades antes da # queimada e os últimos 27 números [28:54] que representam as mesmas # localidades pós-queimada. t.test(Pareado$Riqueza[1:27], Pareado$Riqueza[28:54], paired = TRUE) #&gt; #&gt; Paired t-test #&gt; #&gt; data: Pareado$Riqueza[1:27] and Pareado$Riqueza[28:54] #&gt; t = 7.5788, df = 26, p-value = 4.803e-08 #&gt; alternative hypothesis: true difference in means is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 32.47117 56.63994 #&gt; sample estimates: #&gt; mean of the differences #&gt; 44.55556 Neste exemplo, rejeitamos a hipótese nula de que a riqueza de espécies de artrópodes é igual antes e depois da queimada (t26 = 7,57, P &lt; 0,001). Visualizar os resultados em gráfico. ## Gráfico ggpaired(Pareado, x = &quot;Estado&quot;, y = &quot;Riqueza&quot;, color = &quot;Estado&quot;, line.color = &quot;gray&quot;, line.size = 0.8, palette = c(&quot;darkorange&quot;, &quot;cyan4&quot;), width = 0.8, point.size = 4, xlab = &quot;Estado das localidades&quot;, ylab = &quot;Riqueza de Espécies&quot;) + expand_limits(y=c(0,150)) + tema_livro() Interpretação dos resultados Os resultados mostram que as localidades após as queimadas apresentam em média 44,5 espécies de artrópodes a menos do que antes das queimadas.   7.3 Correlação de Pearson É um teste que mede a força relativa da relação linear entre duas variáveis contínuas (X e Y). Importante ressaltar que a análise de correlação não assume que a variável X influencie a variável Y ou que exista uma relação de causa e efeito entre elas (Zar 2010). A análise é definida em termos da variância de X, a variância de Y, e a covariância de X e Y (i.e. como elas variam juntas). \\[ r = \\frac{\\sum{XY} - \\frac{\\sum{X} \\sum{Y}}{n}}{\\sqrt{\\left(\\sum{X^2} - \\frac{\\sum{X}^2}{n}\\right)\\left(\\sum{Y^2} - \\frac{\\sum{Y}^2}{n}\\right)}} \\] Onde: r = coeficiente de correlação que indica a força da relação linear entre as duas variáveis. Seu limite de valores está entre -1 \\(\\leq\\) r \\(\\le\\) 1. A correlação positiva indica que o aumento no valor de uma das variáveis é acompanhado pelo aumento no valor da outra variável. A correlação negativa indica que o aumento no valor de uma das variáveis é acompanhado pela diminuição no valor da outra variável. Se r é igual a zero, não existe correlação entre as variáveis (Figura 2). Premissas da Correlação de Person: As amostras devem ser independentes e pareadas (i.e. as duas variáveis devem ser medidas na mesma unidade amostral); As unidades amostrais são selecionadas aleatoriamente; A relação entre as variáveis tem que ser linear. Exemplo de correlações negativa (A), positiva (B) e nula (C) e variáveis que não apresentam relações lineares entre si (D-E).   7.3.0.1 Exemplo prático 1 - Correlação de Pearson Explicação dos dados Neste exemplo, avaliaremos a correlação entre a altura do tronco e o tamanho da raiz medidos em 35 indivíduos de uma espécie vegetal arbustiva. Pergunta: Existe correlação entre a altura do tronco e o tamanho da raiz dos arbustos? Predições A altura do tronco é positivamente correlacionada com o tamanho da raiz. Variáveis Variáveis Dataframe com os indivíduos (unidade amostral) nas linhas e altura do tronco e tamanho da raiz (duas variáveis tem que ser contínuas) como colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Vamos plhar os dados com a função head. head(correlacao_arbustos) #&gt; Tamanho_raiz Tamanho_tronco #&gt; 1 10.177049 19.54383 #&gt; 2 6.622634 17.13558 #&gt; 3 7.773629 19.50681 #&gt; 4 11.055257 21.57085 #&gt; 5 4.487274 13.22763 #&gt; 6 11.190216 21.62902 Cálculo do Teste de Correlação de Pearson. Para outros testes de correlação como Kendall ou Spearman é só alterar na # linha de comando a opção *method* e inserir o teste desejado. ## Correção de Person cor.test(correlacao_arbustos$Tamanho_raiz, correlacao_arbustos$Tamanho_tronco, method = &quot;pearson&quot;) #&gt; #&gt; Pearson&#39;s product-moment correlation #&gt; #&gt; data: correlacao_arbustos$Tamanho_raiz and correlacao_arbustos$Tamanho_tronco #&gt; t = 11.49, df = 33, p-value = 4.474e-13 #&gt; alternative hypothesis: true correlation is not equal to 0 #&gt; 95 percent confidence interval: #&gt; 0.7995083 0.9457816 #&gt; sample estimates: #&gt; cor #&gt; 0.8944449 Neste exemplo, rejeitamos a hipótese nula de que as variáveis não são correlacionadas (r = 0.89, P &lt; 0,001). Visualizar os resultados em gráfico. ## Gráfico ggplot(data = correlacao_arbustos, aes(x = Tamanho_raiz, y = Tamanho_tronco)) + labs(x = &quot;Tamanho da raiz&quot;, y = &quot;Altura do tronco&quot;) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;, alpha = 0.7) + geom_text(x = 14, y = 14, label = &quot;r = 0.89, P &lt; 0.001&quot;, color = &quot;black&quot;, size = 5) + tema_livro() + theme(legend.position = &quot;none&quot;) + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;, linetype =&quot;dashed&quot;) 📝 Importante: a linha de tendência tracejada no gráfico é apenas para ilustrar a relação positiva entre as variáveis. Ela não é gerada pela análise de correlação. Interpretação dos resultados Os resultados mostram que o aumento na altura dos arbutos é acompanhado pelo aumento no tamanho da raiz.   7.4 Regressão Linear Simples A regressão linear simples é usada para analisar a relação entre uma variável preditora (plotada no eixo-X) e uma variável resposta (plotada no eixo-Y). As duas variáveis devem ser contínuas. Diferente das correlações, a regressão assume uma relação de causa e efeito entre as variáveis. O valor da variável preditora (X) causa, direta ou indiretamente, o valor da variável resposta (Y). Assim, Y é uma função linear de X: \\[ Y = \\beta_0 + \\beta_{1}X_i + \\epsilon_i \\] Onde: \\(\\beta_0\\) = intercepto (intercept) que representa o valor da função quando X = 0, \\(\\beta_{1}\\) = inclinação (slope) que mede a mudança na variável Y para cada mudança de unidade da variável X. \\(\\epsilon_{1}\\) = erro aleatório referente à variável Y que não pode ser explicado pela variável X. Premissas da Regressão Linear Simples: As amostras devem ser independentes; As unidades amostrais são selecionadas aleatoriamente; Distribuição normal (gaussiana) dos resíduos; Homogeneidade da variância.   7.4.0.1 Exemplo prático 1 - Regressão linear simples Explicação dos dados Neste exemplo, avaliaremos a relação entre o gradiente de temperatura média anual (°C) e o tamanho médio do comprimento rostro-cloacal (CRC em mm) de populações de Dendropsophus minutus (Anura:Hylidae) amostradas em 109 localidades no Brasil (Boaratti and da Silva 2015). Pergunta: Há relação de dependência entre o tamanho do CRC das populações e a temperatura das localidades onde os indivíduos ocorrem? Predições O CRC das populações serão menores em localidades mais quentes do que em localidades mais frias de acordo com a Hipótese do balanço de calor (Olalla-Tárraga and Rodríguez 2007). Variáveis Variáveis resposta e preditoras Dataframe com as populações (unidade amostral) nas linhas e CRC (variável resposta) médio (mm) e temperatura média anual (variável preditora) como colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Olhando os dados com a função head head(dados_regressao) #&gt; Municipio CRC Temperatura Precipitacao #&gt; 1 Acorizal 22.98816 24.13000 1228.2 #&gt; 2 Alpinopolis 22.91788 20.09417 1487.6 #&gt; 3 Alto_Paraiso 21.97629 21.86167 1812.4 #&gt; 4 Americana 23.32453 20.28333 1266.2 #&gt; 5 Apiacas 22.83651 25.47333 2154.0 #&gt; 6 Arianopolis 20.86989 20.12167 1269.2 Vamos calcular a regressão linear simples. ## Regressão simples modelo_regressao &lt;- lm(CRC ~ Temperatura, data = dados_regressao) Antes de vermos os resultados, vamos verificar a normalidade e homogeneidade das variâncias ## Verificar as premissas do teste par(mfrow = c(2, 2), oma = c(0, 0, 2, 0)) plot(modelo_regressao) dev.off() # volta a configuração dos gráficos para o formato padrão #&gt; null device #&gt; 1 Os gráficos Residuals vs Fitted, Scale-Location, e Residual vs Leverage estão relacionados com a homogeneidade da variância. Nestes gráficos, esperamos ver os pontos dispersos no espaço sem padrões com formatos em U ou funil. Podemos observar que tanto a normalidade como a homogeneidade do resíduos estão dentro dos padrões esperados. Vamos ver os resultados da regressão simples usando as funções anova e summary. A função anova retorna uma tabela contendo o grau de liberdade (df), soma dos quadrados, valor de F e o valor de P. ## Resultados usando a função anova anova(modelo_regressao) #&gt; Analysis of Variance Table #&gt; #&gt; Response: CRC #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Temperatura 1 80.931 80.931 38.92 9.011e-09 *** #&gt; Residuals 107 222.500 2.079 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 A função summary retorna uma tabela contendo o valor do intercepto, inclinação da reta (slope) e o coeficiente de determinação (R2) que indica a proporção da variação na variável Y que pode ser atribuída à variação na variável X. Percebam que a parte final dos resultados apresentados no summary, são os mesmo apresentados pela função anova. # Resultados usando a função summary summary(modelo_regressao) #&gt; #&gt; Call: #&gt; lm(formula = CRC ~ Temperatura, data = dados_regressao) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.4535 -0.7784 0.0888 0.9168 3.1868 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 16.23467 0.91368 17.768 &lt; 2e-16 *** #&gt; Temperatura 0.26905 0.04313 6.239 9.01e-09 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.442 on 107 degrees of freedom #&gt; Multiple R-squared: 0.2667, Adjusted R-squared: 0.2599 #&gt; F-statistic: 38.92 on 1 and 107 DF, p-value: 9.011e-09 Vamos visualizar os resultados em gráfico. ## Gráfico ggplot(data = dados_regressao, aes(x = Temperatura, y = CRC)) + labs(x = &quot;Temperatura média anual (°C)&quot;, y = &quot;Comprimento rostro-cloacal (mm)&quot;) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;, alpha = 0.7) + tema_livro() + theme(legend.position = &quot;none&quot;) + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) Interpretação dos resultados Neste exemplo, rejeitamos a hipótese nula de que não existe relação entre o tamanho do CRC das populações de D. minutus e a temperatura da localidade onde elas ocorrem (F1,107 = 38,92, P &lt; 0,001). Os resultados mostram que o tamanho do CRC das populações tem uma relação positiva com a temperatura das localidades. Assim, populações de D. minutus em localidades mais quentes apresentam maior CRC do que as populações em localidades mais frias.   7.5 Regressão Linear Múltipla A regressão linear múltipla é uma extensão da regressão linear simples. Ela é usada quando queremos determinar o valor da variável resposta (Y) com base nos valores de duas ou mais variáveis preditoras (X1, X2, Xn). \\[ Y = \\beta_0 + \\beta_{1}X_1 + \\beta_{n}X_n + \\epsilon_i \\] Onde: \\(\\beta_0\\) = intercepto (intercept) que representa o valor da função quando X = 0; \\(\\beta_{n}\\) = inclinação (slope) que mede a mudança na variável Y para cada mudança de unidade das variáveis Xn; \\(\\epsilon_{1}\\) = erro aleatório referente a variável Y que não pode ser explicado pelas variáveis preditoras. Premissas da Regressão Linear Múltipla: As amostras devem ser independentes; As unidades amostrais são selecionadas aleatoriamente; Distribuição normal (gaussiana) dos resíduos; Homogeneidade da variância.   7.5.0.1 Exemplo prático 1 - Regressão linear múltipla Explicação dos dados Utilizaremos o mesmo exemplo da regressão linear simples. Contudo, além do gradiente de temperatura média anual (°C), incluiremos o gradiente de precipitação anual (mm) como outra variável preditora do tamanho médio do comprimento rostro-cloacal (CRC em mm) de populações de Dendropsophus minutus (Anura:Hylidae) amostradas em 109 localidades no Brasil (Boaratti and da Silva 2015). Pergunta: O tamanho do CRC das populações de D. minutus é influênciado pela temperatura e precipitação das localidades onde os indivíduos ocorrem? Predições O CRC das populações serão menores em localidades com clima quente e chuvoso do que em localidades com clima frio e seco. Variáveis Variáveis resposta e preditoras Dataframe com as populações (unidade amostral) nas linhas e CRC (variável resposta) médio (mm) e temperatura e precipitação (variáveis preditoras) como colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Olhando os dados usando a função head head(dados_regressao_mul) #&gt; Municipio CRC Temperatura Precipitacao #&gt; 1 Acorizal 22.98816 24.13000 1228.2 #&gt; 2 Alpinopolis 22.91788 20.09417 1487.6 #&gt; 3 Alto_Paraiso 21.97629 21.86167 1812.4 #&gt; 4 Americana 23.32453 20.28333 1266.2 #&gt; 5 Apiacas 22.83651 25.47333 2154.0 #&gt; 6 Arianopolis 20.86989 20.12167 1269.2 Comandos para o modelo de regressão múltipla. ## Regressão múltipla modelo_regressao_mul &lt;- lm(CRC ~ Temperatura + Precipitacao, data = dados_regressao_mul) 📝 Importante Multicolinearidade ocorre quando as variáveis preditoras são correlacionadas. Essa correlação é um problema porque as variáveis preditoras deveriam ser independentes. O Fator de Inflação da Variância (VIF) é um teste que identifica a correlação entre as variáveis e mostra a força dessa correlação. Alguns autores consideram valores de VIF acima de 10 como fortemente correlacionadas, outros mais conservadores consideram o valor de 3. Vamos analisar se as variáveis apresentam multicolinearidade. # Multicolinearidade vif(modelo_regressao_mul) #&gt; Temperatura Precipitacao #&gt; 1.041265 1.041265 Os valores são menores que 3 indicando que não há multicolinearidade. Agora vamos verificar as premissas de normalidade e homogeneidade das variâncias. ## Normalidade e homogeneidade par(mfrow = c(2, 2), oma = c(0, 0, 2, 0)) plot(modelo_regressao_mul) dev.off() #&gt; null device #&gt; 1 Os resíduos apresentam distribuição normal e variâncias homogêneas. Podemos ver os resultados da análise. ## Regressão múltipla summary(modelo_regressao_mul) #&gt; #&gt; Call: #&gt; lm(formula = CRC ~ Temperatura + Precipitacao, data = dados_regressao_mul) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.4351 -0.8026 0.0140 0.9420 3.4300 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 16.7162571 1.0108674 16.537 &lt; 2e-16 *** #&gt; Temperatura 0.2787445 0.0439601 6.341 5.71e-09 *** #&gt; Precipitacao -0.0004270 0.0003852 -1.108 0.27 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.44 on 106 degrees of freedom #&gt; Multiple R-squared: 0.2751, Adjusted R-squared: 0.2614 #&gt; F-statistic: 20.12 on 2 and 106 DF, p-value: 3.927e-08 Percebam que a temperatura tem uma relação significativa e positiva com o tamanho do CRC das populações (P &lt; 0.001), enquanto que a precipitação não apresenta relação com o CRC (P = 0.27). Neste caso, é interessante saber se um modelo mais simples (e.g. contendo apenas temperatura) explicaria a distribuição tão bem ou melhor do que este modelo mais complexo considerando duas variáveis (temperatura e precipitação). Para isso, podemos utilizar a Likelihood Ratio Test (LRT) para comparar modelos. A LRT compara dois modelos aninhados, testando se os parâmetros do modelo mais complexo diferem significativamente do modelo mais simples. Em outras palavras, ele testa se há necessidade de se incluir uma variável extra no modelo para explicar os dados. ## Criando os modelos aninhados modelo_regressao_mul &lt;- lm(CRC ~ Temperatura + Precipitacao, data = dados_regressao_mul) modelo_regressao &lt;- lm(CRC ~ Temperatura, data = dados_regressao_mul) ## Likelihood Ratio Test (LRT) lrtest(modelo_regressao_mul, modelo_regressao) #&gt; Likelihood ratio test #&gt; #&gt; Model 1: CRC ~ Temperatura + Precipitacao #&gt; Model 2: CRC ~ Temperatura #&gt; #Df LogLik Df Chisq Pr(&gt;Chisq) #&gt; 1 4 -192.93 #&gt; 2 3 -193.55 -1 1.2558 0.2624 📝 Importante Hipótese nula é que o modelo mais simples é o melhor Valor de p &lt; 0.05 rejeita a hipótese nula e o modelo mais complexo é o melhor; valor de p &gt; 0.05 não rejeita a hipótese nula e o modelo mais simples é o melhor. ## Comparando com o modelo somente com o intercepto # Criando um modelo sem variáveis, só o intercepto. modelo_intercepto &lt;- lm(CRC ~ 1, data = dados_regressao_mul) lrtest(modelo_regressao, modelo_intercepto) #&gt; Likelihood ratio test #&gt; #&gt; Model 1: CRC ~ Temperatura #&gt; Model 2: CRC ~ 1 #&gt; #Df LogLik Df Chisq Pr(&gt;Chisq) #&gt; 1 3 -193.55 #&gt; 2 2 -210.46 -1 33.815 6.061e-09 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Interpretação dos resultados Neste exemplo, a precipitação não está associada com a variação no tamanho do CRC das populações de D. minutus. Por outro lado, a temperatura explicou 26% da variação do tamanho do CRC das populações.   7.6 Análises de Variância (ANOVA) ANOVA refere-se a uma variedade de delineamentos experimentais nos quais a variável preditora é categórica e a variável resposta é contínua (Nicholas J. Gotelli and Ellison 2012). Exemplos desses delineamentos experimentais são: ANOVA de um fator, ANOVA de dois fatores, ANOVA em blocos aleatorizados, ANOVA de medidas repetidas e ANOVA split-splot. De forma geral, a ANOVA é um teste estatístico usado para comparar a média entre grupos amostrados independentemente. Para isso, o teste leva em conta, além das médias dos grupos, a variação dos dados dentro e entre os grupos. Neste capítulo, iremos demonstrar as linhas de comandos para alguns dos principais delineamentos experimentais. Premissas da ANOVA: As amostras devem ser independentes. Observação: ANOVA de medidas repetidas e ANOVA split-plot são designs experimentais que apresentam dependência entre as amostras, mas controlam esse depedência nas suas formulações matemátcas; As unidades amostrais são selecionadas aleatoriamente; Distribuição normal (gaussiana) dos resíduos; Homogeneidade da variância.   7.7 ANOVA de um fator Este teste considera delineamentos experimentais com apenas um fator (ou tratamento) que pode ser composto por três ou mais grupos (ou níveis). 7.7.0.1 Exemplo prático 1 - Anova de um fator Explicação dos dados Neste exemplo, avaliaremos se o adubo X-2020 disponibilizado recentemente no mercado melhora o crescimento dos indivíduos de Coffea arabica como divulgado pela empresa responsável pela venda do produto. Para isso, foi realizado um experimento com indivíduos de C. arabica cultivados em três grupos: i) grupo controle onde os indivíduos não receberam adubação, ii) grupo onde os indivíduos receberam a adição do adubo tradicional mais utilizado pelos produtores de C. arabica, e iii) grupo onde os indivíduos receberam a adição do adubo X-2020. Pergunta: O crescimento dos indivíduos de C. arabica é melhorado pela adição do adubo X-2020? Predições O crescimento dos indivíduos de C. arabica será maior no grupo que recebeu o adubo X-2020. Variáveis Variáveis resposta e preditoras Dataframe com as plantas (unidade amostral) nas linhas e o crescimento dos indivíduos de C. arabica (variável resposta) e os tratamentos (variável preditora) nas colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variável preditora e resposta nas colunas. 7.7.1 Análise Olhando os dados e criando o modelo para Anova de um fator. head(dados_anova_simples) #&gt; Crescimento Tratamento #&gt; 1 7.190 Controle #&gt; 2 6.758 Controle #&gt; 3 6.101 Controle #&gt; 4 4.758 Controle #&gt; 5 6.542 Controle #&gt; 6 7.667 Controle ## Análise ANOVA de um fator Modelo_anova &lt;- aov(Crescimento ~ Tratamento, data = dados_anova_simples) Vamos verificar a normalidade e homogeneidade da variância usando os testes de Shapiro-Wilk e bartett.test respectivamente. ## Normalidade shapiro.test(dados_anova_simples$Crescimento[1:12]) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: dados_anova_simples$Crescimento[1:12] #&gt; W = 0.96731, p-value = 0.8806 shapiro.test(dados_anova_simples$Crescimento[13:24]) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: dados_anova_simples$Crescimento[13:24] #&gt; W = 0.87324, p-value = 0.07184 shapiro.test(dados_anova_simples$Crescimento[25:36]) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: dados_anova_simples$Crescimento[25:36] #&gt; W = 0.9294, p-value = 0.3738 ## Normalidade bartlett.test(Crescimento ~ Tratamento, data = dados_anova_simples) #&gt; #&gt; Bartlett test of homogeneity of variances #&gt; #&gt; data: Crescimento by Tratamento #&gt; Bartlett&#39;s K-squared = 0.61835, df = 2, p-value = 0.7341 Os resíduos apresentam distribuição normal e variância homogêneas. Vamos ver os resultados da análise. ## Resultados anova anova(Modelo_anova) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Crescimento #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Tratamento 2 340.32 170.160 77.989 3.124e-13 *** #&gt; Residuals 33 72.00 2.182 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que o resultado da ANOVA (Pr(&gt;F) &lt; 0.001) indica que devemos rejeitar a hipótese nula que não há diferença entre as médias dos grupos. Contudo, os resultados não mostram quais são os grupos que apresentam diferenças. Para isso, temos que realizar testes de comparações múltiplas post-hoc para detectar os grupos que apresentam diferenças significativas entre as médias. 📝 Importante Os testes post-hoc só devem ser utilizados quando rejeitamos a hipótese nula (P &lt; 0.05) no teste da ANOVA. ## Diferenças entre os tratamentos # Teste de Tuckey&#39;s honest significant difference TukeyHSD(Modelo_anova) #&gt; Tukey multiple comparisons of means #&gt; 95% family-wise confidence level #&gt; #&gt; Fit: aov(formula = Crescimento ~ Tratamento, data = dados_anova_simples) #&gt; #&gt; $Tratamento #&gt; diff lwr upr p adj #&gt; Adubo_X-2020-Adubo_Tradicional 0.04991667 -1.429784 1.529617 0.9962299 #&gt; Controle-Adubo_Tradicional -6.49716667 -7.976867 -5.017466 0.0000000 #&gt; Controle-Adubo_X-2020 -6.54708333 -8.026784 -5.067383 0.0000000 Visualizar os resultados em gráfico. # Reordenando a ordem que os grupos irão aparecer no gráfico dados_anova_simples$Tratamento &lt;- factor(dados_anova_simples$Tratamento , levels=c(&quot;Controle&quot;, &quot;Adubo_Tradicional&quot;, &quot;Adubo_X-2020&quot;)) # Gráfico ggplot(data = dados_anova_simples, aes(x = Tratamento, y = Crescimento, color = Tratamento)) + labs(x = &quot;Adubação&quot;, y = &quot;Crescimento Coffea arabica (cm)&quot;, size = 20) + geom_boxplot(fill = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;), color = &quot;black&quot;, show.legend = FALSE, alpha = 0.4) + geom_jitter(shape = 16, position = position_jitter(0.1), cex = 4, alpha = 0.7) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_y_continuous(limits = c(0, 20), breaks = c(0, 5, 10, 15, 20)) + geom_text(x = 1, y = 12, label = &quot;ab&quot;, color = &quot;black&quot;, size = 5) + geom_text(x = 2, y = 17, label = &quot;a&quot;, color = &quot;black&quot;, size = 5) + geom_text(x = 3, y = 17, label = &quot;b&quot;, color = &quot;black&quot;, size = 5) + scale_x_discrete(labels = c(&quot;Sem adubo&quot;,&quot;Tradicional&quot;,&quot;X-2020&quot;)) + tema_livro() + theme(legend.position = &quot;none&quot;) Interpretação dos resultados Neste exemplo, os indivíduos de C. arabica que receberam adubação (tradicional e X-2020) apresentaram maior crescimento do que os indivíduos que não receberam adubação. Contudo, diferente do que foi divulgado pela empresa, o adubo X-2020 não apresentou melhor desempenho que o adubo tradicional já utilizado pelos produtores.   7.8 ANOVA com dois fatores ou ANOVA fatorial Este teste considera delineamentos amostrais com dois fatores (ou tratamentos) que podem ser compostos por dois ou mais grupos (ou níveis). Esta análise tem uma vantagem, pois permite avaliar o efeito da interação entre os fatores na variável resposta. Quando a interação está presente, o impacto de um fator depende do nível (ou grupo) do outro fator. 7.8.0.1 Exemplo prático 1 - ANOVA com dois fatores Explicação dos dados Neste exemplo, avaliaremos se o tempo que o corpo leva para eliminar uma droga utilizada em exames de ressonância magnética está relacionado com o sistema XY de determinação do sexo e/ou com a idade dos pacientes. Para isso, foi realizado um experimento com 40 pacientes distribuídos da seguinte maneira: i) 10 indivíduos XX - jovens, ii) 10 indivíduos XX - idosas, iii) 10 indivíduos XY - jovens, e iv) 10 indivíduos XY - idosos. Pergunta: O tempo de eliminação da droga é dependente do sistema XY de determinação do sexo e idade dos pacientes? Predições O tempo de eliminação da droga vai ser mais rápido nas pacientes XX e jovens. Variáveis Variáveis resposta e preditoras Dataframe com os pacientes (unidade amostral) nas linhas e o tempo de eliminação da droga (variável resposta) e os tratamentos sexo e idade dos pacientes (variáveis preditoras) nas colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e as variáveis preditoras e respostas nas colunas. 7.8.1 Análise Olhando os dados usando a função head head(dados_dois_fatores) #&gt; Tempo Pessoas Idade #&gt; 1 18.952 XX Jovem #&gt; 2 16.513 XX Jovem #&gt; 3 17.981 XX Jovem #&gt; 4 21.371 XX Jovem #&gt; 5 14.470 XX Jovem #&gt; 6 19.130 XX Jovem Comandos da ANOVA com dois fatores. ## Análise Anova de dois fatores # A interação entre os fatores é representada por * Modelo1 &lt;- aov(Tempo ~ Pessoas * Idade, data = dados_dois_fatores) # Olhando os resultados anova(Modelo1) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Tempo #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pessoas 1 716.72 716.72 178.8538 1.56e-15 *** #&gt; Idade 1 1663.73 1663.73 415.1724 &lt; 2.2e-16 *** #&gt; Pessoas:Idade 1 4.77 4.77 1.1903 0.2825 #&gt; Residuals 36 144.26 4.01 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que a interação não apresenta um efeito significativo (P &gt; 0.05). Assim, iremos retirar a interação e verificar, usando Likelihood Ratio Test, se o modelo mais simples é melhor. # Criando modelo sem interação. Modelo2 &lt;- aov(Tempo ~ Pessoas + Idade, data = dados_dois_fatores) ## LRT lrtest(Modelo1, Modelo2) #&gt; Likelihood ratio test #&gt; #&gt; Model 1: Tempo ~ Pessoas * Idade #&gt; Model 2: Tempo ~ Pessoas + Idade #&gt; #Df LogLik Df Chisq Pr(&gt;Chisq) #&gt; 1 5 -82.413 #&gt; 2 4 -83.063 -1 1.3012 0.254 A interação não é importante. Então podemos seguir com o modelo mais simples. Vamos verficiar a normalidade e homogeneidade da variância. # Verificando as premissas do teste. par(mfrow = c(2, 2), oma = c(0, 0, 2, 0)) plot(Modelo2) dev.off() #&gt; null device #&gt; 1 Dois pontos estão fugindo da reta e chamam atenção sobre a normalidade da distribuição dos resíduos. A homogeneidade da variância está adequada. Por enquanto, vamos seguir a análise, mas veja o ?? para entender como lidar como modelos que os resíduos não apresentam distribuição normal. # Resultados do modelo anova(Modelo2) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Tempo #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pessoas 1 716.72 716.72 177.94 1.041e-15 *** #&gt; Idade 1 1663.73 1663.73 413.05 &lt; 2.2e-16 *** #&gt; Residuals 37 149.03 4.03 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que o resultado da ANOVA (Pr(&gt;F) &lt; 0.001) indica que devemos rejeitar a hipótese nula de que não há diferença entre as médias dos sistema XY e idade dos pacientes. Neste caso, não precisamos realizar testes de comparações múltiplas post-hoc porque os fatores apresentam apenas dois níveis. Contudo, se no seu delineamento experimental um dos fatores apresentar três ou mais níveis, você deverá utilizar os testes de comparações post-hoc para determinar as diferenças entre os grupos. Visualizar os resultados em gráfico. Interpretação dos resultados Neste exemplo, o sistema XY de determinação do sexo e a idade dos pacientes têm um efeito no tempo de eliminação da droga do organismo. Os pacientes XX e jovens apresentaram eliminação mais rápida da droga do que pacientes XY e idosos.   7.8.1.1 Exemplo prático 2 - ANOVA com dois fatores com efeito da interação Explicação dos dados Neste exemplo, usaremos os mesmos dados do exemplo anterior. Neste caso, alteramos os dados para que a interação seja significativa. head(dados_dois_fatores_interacao) #&gt; Tempo Pessoas Idade #&gt; 1 18.952 XX Jovem #&gt; 2 16.513 XX Jovem #&gt; 3 17.981 XX Jovem #&gt; 4 21.371 XX Jovem #&gt; 5 14.470 XX Jovem #&gt; 6 19.130 XX Jovem ## Análise ANOVA com dois fatores Modelo_interacao1 &lt;- aov(Tempo ~ Pessoas * Idade, data = dados_dois_fatores_interacao) ## Olhando os resultados anova(Modelo_interacao1) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Tempo #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pessoas 1 716.72 716.72 178.8538 1.56e-15 *** #&gt; Idade 1 1663.73 1663.73 415.1724 &lt; 2.2e-16 *** #&gt; Pessoas:Idade 1 4.77 4.77 1.1903 0.2825 #&gt; Residuals 36 144.26 4.01 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que a interação é significativa (P &lt; 0.05). Agora nossa interpretação precisa ser baseada na interação entre os fatores. Vamos visualizar os resultados em gráfico. ## Gráfico ggplot(data = dados_dois_fatores_interacao, aes(y = Tempo, x = Pessoas, color = Idade)) + geom_boxplot() + stat_summary(fun = mean, geom =&quot;point&quot;, aes(group = Idade, x = Pessoas), color = &quot;black&quot;, position = position_dodge(0.7), size = 4) + geom_link(aes(x = 0.8, y = 31, xend = 1.8, yend = 40), color = &quot;darkorange&quot;, lwd = 1.3, linetype = 2) + geom_link(aes(x = 1.2, y = 28.5, xend = 2.2, yend = 26.5), color = &quot;cyan4&quot;, lwd = 1.3, linetype = 2) + labs(x = &quot;Sistema XY de determinação do sexo&quot;, y = &quot;Tempo (horas) para eliminar a droga&quot;) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;, &quot;darkorange&quot;, &quot;cyan4&quot;)) + scale_y_continuous(limits = c(10, 50), breaks = c(10, 20, 30, 40, 50)) + tema_livro() Interpretação dos resultados Percebam que para saber a resposta do fator idade (jovem ou idoso) na eliminação da droga, você precisa saber com qual pessoa (XX ou XY) ele está associado. Isso porque a resposta de um fator, depende do outro fator. Jovens eliminam a droga do corpo mais rápido nas pessoas XY, enquanto os idosos eliminam a droga mais rápido nas pessoas XX.   7.8.1.2 Exemplo prático 3 - ANOVA com dois fatores com efeito da interação Explicação dos dados Neste exemplo, usaremos os mesmos dados do exemplo anterior. Entretanto, alteramos os dados para que a interação seja significativa. # Olhando os dados head(dados_dois_fatores_interacao2) #&gt; Tempo Pessoas Idade #&gt; 1 18.952 XX Jovem #&gt; 2 16.513 XX Jovem #&gt; 3 17.981 XX Jovem #&gt; 4 21.371 XX Jovem #&gt; 5 14.470 XX Jovem #&gt; 6 19.130 XX Jovem ## Análise anova de dois fatores Modelo_interacao2 &lt;- aov(Tempo ~ Pessoas * Idade, data = dados_dois_fatores_interacao2) ## Olhando os resultados anova(Modelo_interacao2) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Tempo #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pessoas 1 716.72 716.72 178.8538 1.56e-15 *** #&gt; Idade 1 4.77 4.77 1.1903 0.2825 #&gt; Pessoas:Idade 1 1663.73 1663.73 415.1724 &lt; 2.2e-16 *** #&gt; Residuals 36 144.26 4.01 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que a interação é significativa (P &lt; 0.05), mas a idade não é significativa. Nossa interpretação precisa ser baseada na interação entre os fatores. Vamos visualizar os resultados em gráfico. ## Gráfico ggplot(data = dados_dois_fatores_interacao2, aes(y = Tempo, x = Pessoas, color = Idade)) + geom_boxplot() + stat_summary(fun = mean, geom =&quot;point&quot;, aes(group = Idade, x = Pessoas), color = &quot;black&quot;, position = position_dodge(0.7), size = 4) + geom_link(aes(x = 0.8, y = 31, xend = 1.8, yend = 27), color = &quot;darkorange&quot;, lwd = 1.3, linetype = 2) + geom_link(aes(x = 1.2, y = 19, xend = 2.2, yend = 41), color = &quot;cyan4&quot;, lwd = 1.3, linetype = 2) + labs(x = &quot;Sistema XY de determinação do sexo&quot;, y = &quot;Tempo (horas) para eliminar a droga&quot;) + scale_color_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;, &quot;darkorange&quot;, &quot;cyan4&quot;)) + scale_y_continuous(limits = c(10, 50), breaks = c(10, 20, 30, 40, 50)) + tema_livro() Interpretação dos resultados Percebam que as linhas se cruzam. Esse é um exemplo clássico de interação. Novamente, para saber a resposta do fator idade (jovem ou idoso), você precisa saber com qual pessoa (XX ou XY) ele está associado. Jovens são mais rápidos para eliminarem a droga em pessoas XX, enquanto os idosos são mais rápidos para eliminarem a droga nas pessoas XY.   7.9 ANOVA em blocos aleatorizados No delineamento experimental com blocos aleatorizados, cada fator é agrupado em blocos, com réplicas de cada nível do fator representado em cada bloco (Nicholas J. Gotelli and Ellison 2012). O bloco é uma área ou período de tempo dentro do qual as condições ambientais são relativamente homogêneas. O objetivo do uso dos blocos é controlar fontes de variações indesejadas na variável dependente que não são de interesse do pesquisador. Desta maneira, podemos retirar dos resíduos os efeitos das variações indesejadas que não são do nosso interesse, e testar com maior poder estatístico os efeitos dos tratamentos de interesse. Importante, os blocos devem ser arranjados de forma que as condições ambientais sejam mais similares dentro dos blocos do que entre os blocos.   7.9.0.1 Exemplo prático 1 - ANOVA em blocos aleatorizados Explicação dos dados Neste exemplo, avaliaremos a riqueza de espécies de anuros amostradas em poças artificiais instaladas a diferentes distâncias de seis fragmentos florestais no sudeste do Brasil (da Silva et al. 2011). Os fragmentos florestais apresentam diferenças entre si que não são do interesse do pesquisador. Por isso, eles foram incluídos como blocos nas análises. As poças artificiais foram instaladas em todos os fragmentos florestais com base no seguinte delineamento experimental (da Silva et al. 2011): i) quatro poças no interior do fragmento a 100 m de distância da borda do fragmento; ii) quatro poças no interior no fragmento a 50 m de distância da borda do fragmento; iii) quatro poças na borda do fragmento; iv) quatro poças na matriz de pastagem a 50 m de distância da borda do fragmento; e v) quatro poças na matriz de pastagem a 100 m de distância da borda do fragmento. Percebam que todos os tratamentos foram instalados em todos os blocos. Pergunta: A distância da poça artifical ao fragmento florestal influencia a riqueza de espécies anuros? Predições Poças na borda do fragmento florestal apresentarão maior riqueza de espécies do que poças distantes da borda. Variáveis Variáveis resposta e preditoras Dataframe com as poças (unidade amostral) nas linhas e a riqueza de espécies (variável reposta), distância dos fragmentos florestais (variável preditora categórica) e fragmentos florestais (blocos) nas colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. Análise Olhando os dados usando a função head. head(dados_bloco) #&gt; Riqueza Blocos Pocas #&gt; 1 90 A Int-50m #&gt; 2 95 A Int-100m #&gt; 3 107 A Borda #&gt; 4 92 A Mat-50m #&gt; 5 89 A Mat-100m #&gt; 6 92 B Int-50m Há duas formas de incluir os efeitos dos blocos nos modelos. ## Análise Anova em blocos aleatorizados model_bloco1 &lt;- aov(Riqueza ~ Pocas + Blocos, data = dados_bloco) summary(model_bloco1) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pocas 4 1504 376.1 2.907 0.0478 * #&gt; Blocos 5 1089 217.8 1.683 0.1846 #&gt; Residuals 20 2588 129.4 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 model_bloco2 &lt;- aov(Riqueza ~ Pocas + Error(Blocos), data = dados_bloco) summary(model_bloco2) #&gt; #&gt; Error: Blocos #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Residuals 5 1089 217.8 #&gt; #&gt; Error: Within #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pocas 4 1504 376.1 2.907 0.0478 * #&gt; Residuals 20 2588 129.4 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que as duas formas apresentam os mesmos resultados para o efeito #’ da distância das poças que é o fator de interesse no estudo. Lembre-se que nos delineamentos experimentais em bloco, o pesquisador não está interessado no efeito do bloco, mas sim em controlar a variação associada a ele. O que não pode acontecer é ignorar o efeito do bloco que é incorporado pelos resíduos quando não informado no modelo. Veja abaixo a forma errada de analisar delineamento experimental com blocos. ## Forma errada de análisar Anova em blocos modelo_errado &lt;- aov(Riqueza ~ Pocas, data = dados_bloco) anova(modelo_errado) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Riqueza #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Pocas 4 1504.5 376.12 2.5576 0.06359 . #&gt; Residuals 25 3676.5 147.06 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 O resultado da ANOVA (Pr(&gt;F) &lt; 0.001) indica que devemos rejeitar a hipótese nula que não há diferença entre as médias dos grupos. Contudo, os resultados não mostram quais são os grupos que apresentam diferenças. Para isso, temos que realizar testes de comparações múltiplas post-hoc para detectar os grupos que apresentam diferenças significativas entre as médias. ## Teste de Tuckey&#39;s honest significant difference pairs(lsmeans(model_bloco1, &quot;Pocas&quot;), adjust = &quot;tukey&quot;) #&gt; contrast estimate SE df t.ratio p.value #&gt; Borda - (Int-100m) 16.000 6.57 20 2.436 0.1463 #&gt; Borda - (Int-50m) 19.833 6.57 20 3.020 0.0472 #&gt; Borda - (Mat-100m) 15.833 6.57 20 2.411 0.1531 #&gt; Borda - (Mat-50m) 8.167 6.57 20 1.244 0.7269 #&gt; (Int-100m) - (Int-50m) 3.833 6.57 20 0.584 0.9760 #&gt; (Int-100m) - (Mat-100m) -0.167 6.57 20 -0.025 1.0000 #&gt; (Int-100m) - (Mat-50m) -7.833 6.57 20 -1.193 0.7553 #&gt; (Int-50m) - (Mat-100m) -4.000 6.57 20 -0.609 0.9720 #&gt; (Int-50m) - (Mat-50m) -11.667 6.57 20 -1.777 0.4135 #&gt; (Mat-100m) - (Mat-50m) -7.667 6.57 20 -1.167 0.7692 #&gt; #&gt; Results are averaged over the levels of: Blocos #&gt; P value adjustment: tukey method for comparing a family of 5 estimates Visualizar os resultados em gráfico. # Reordenando a ordem que os grupos irão aparecer no gráfico. dados_bloco$Pocas &lt;- factor(dados_bloco$Pocas, levels = c(&quot;Int-100m&quot;, &quot;Int-50m&quot;, &quot;Borda&quot;, &quot;Mat-50m&quot;, &quot;Mat-100m&quot;)) ## Gráfico ggplot(data = dados_bloco, aes(x = Pocas, y = Riqueza)) + labs(x = &quot;Poças artificiais&quot;, y = &quot;Riqueza de espécies de anuros&quot;) + geom_boxplot(color = &quot;black&quot;, show.legend = FALSE, alpha = 0.4) + geom_jitter(shape = 16, position = position_jitter(0.1), cex = 4, alpha = 0.7) + scale_x_discrete(labels = c(&quot;-100m&quot;,&quot;-50m&quot;,&quot;Borda&quot;, &quot;50m&quot;, &quot;100m&quot;)) + tema_livro() + theme(legend.position = &quot;none&quot;) Interpretação dos resultados Neste exemplo, rejeitamos a hipótese nula de que a distância das poças artificiais até as bordas dos fragmentos florestais não influência a riqueza de espécies de anuros. As poças artificiais instaladas nas bordas dos fragmentos florestais apresentaram maior riqueza de espécies do que as poças distantes.   7.10 Análise de covariância (ANCOVA) A ANCOVA pode ser compreendida como uma extensão da ANOVA com a adição de variável contínua (covariável) medida em todas as unidades amostrais (Nicholas J. Gotelli and Ellison 2012). A ideia é que a covariável também afete os valores da variável resposta. Não incluir a covariável irá fazer com que a variação não explicada pelo modelo concentre-se nos resíduos. Incluindo a covariável, o tamanho do resíduo é menor, e o teste para avaliar as diferenças nos tratamentos, que é o interesse do pesquisador, terá mais poder estatístico.   7.10.0.1 Exemplo prático 1 - ANCOVA Explicação dos dados Neste exemplo, avaliaremos o efeito da herbivoria na biomassa dos frutos de uma espécie de árvore na Mata Atlântica. O delineamento experimental permitiu que alguns indivíduos sofressem herbivoria e outros não. Os pesquisadores também mediram o tamanho da raiz dos indíviduos para inseri-la como uma covariável no modelo. Pergunta: A herbivoria diminiu a biomassa dos frutos? Predições Os indivíduos que sofreram herbivoria irão produzir frutos com menor biomassa do que os indivíduos sem herbivoria. Variáveis Variáveis resposta e preditoras Dataframe com as indivíduos da espécie de planta (unidade amostral) nas linhas e a biomassa dos frutos (variável resposta), herbivoria (variável preditora categórica) e tamanho da raiz (covariável contínua) nas colunas. Checklist Verificar se o seu dataframe está com as unidades amostrais nas linhas e variáveis preditoras e respostas nas colunas. 7.10.1 Análise Olhando os dados usando a função head head(dados_ancova) #&gt; Raiz Biomassa Herbivoria #&gt; 1 6.225 59.77 Sem_herb #&gt; 2 6.487 60.98 Sem_herb #&gt; 3 4.919 14.73 Sem_herb #&gt; 4 5.130 19.28 Sem_herb #&gt; 5 5.417 34.25 Sem_herb #&gt; 6 5.359 35.53 Sem_herb Cálculo da ANCOVA. ## Ancova modelo_ancova &lt;- lm(Biomassa ~ Herbivoria * Raiz, data = dados_ancova) # Verificando as premissas da Anova. plot_grid(plot_model(modelo_ancova, type = &quot;diag&quot;)) As premissas da anova estão adequadas. Vamos olhar os resultados do modelo. ## Resultados do modelo anova(modelo_ancova) #&gt; Analysis of Variance Table #&gt; #&gt; Response: Biomassa #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Herbivoria 1 1941.9 1941.9 35.101 8.764e-07 *** #&gt; Raiz 1 17434.1 17434.1 315.124 &lt; 2.2e-16 *** #&gt; Herbivoria:Raiz 1 136.7 136.7 2.471 0.1247 #&gt; Residuals 36 1991.7 55.3 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Percebam que o resultado da ANCOVA (Pr(&gt;F) &lt; 0.001) indica que tanto a herbivoria como o tamanho da raiz (covariável) têm efeitos significativos na biomassa dos frutos. Contudo, a interação entre as variáveis não foi signigicativa. Vamos usar o Likelihood ratio test (LRT) para ver se podemos seguir com um modelo mais simples (sem interação). ## Criando modelo sem interação modelo_ancova2 &lt;- lm(Biomassa ~ Herbivoria + Raiz, data = dados_ancova) ## Likelihood Rate Test lrtest(modelo_ancova, modelo_ancova2) #&gt; Likelihood ratio test #&gt; #&gt; Model 1: Biomassa ~ Herbivoria * Raiz #&gt; Model 2: Biomassa ~ Herbivoria + Raiz #&gt; #Df LogLik Df Chisq Pr(&gt;Chisq) #&gt; 1 5 -134.91 #&gt; 2 4 -136.24 -1 2.6554 0.1032 A interação não é importante. Seguiremos com o modelo mais simples. Visualizar os resultados em gráfico. ## Gráfico ggplot(data = dados_ancova, aes(x = Raiz, y = Biomassa, fill = Herbivoria)) + labs(x = &quot;Tamanho da raiz (cm)&quot;, y = &quot;Biomassa dos frutos (g)&quot;) + geom_point(size = 4, shape = 21, alpha = 0.7) + tema_livro() + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;), labels = c(&quot;Com herbivoria&quot;, &quot;Sem herbivoria&quot;)) + geom_smooth(aes(color = Herbivoria), method = &quot;lm&quot;, show.legend = FALSE) Interpretação dos resultados Neste exemplo, o tamanho da raiz (covariável) tem uma relação positiva com a biomassa dos frutos. Quanto maior o tamanho da raiz, maior a biomassa dos frutos. Usando a ANCOVA e controlando o efeito da covariável, percebemos que a herbivoria também afeta a biomassa dos frutos. Os indivíduos com mesmo tamanho de raiz que não sofreram herbivoria produziram frutos com maior biomassa do que os indivíduos com herbivoria.   7.10.2 Para se aprofundar Recomendamos aos interessados os livros: i) Zar (2010) Biostatiscal analysis; ii) Gotelli &amp; Ellison (2012) A primer of ecological statistics; e iii) Quinn &amp; Keough (2002) Experimental design and data analysis for biologists. Referências "],["cap8.html", "Capítulo 8 Análises univariadas (modelos lineares mistos generalizados) 8.1 Introdução 8.2 Como um GLM funciona? 8.3 Como escolher a distribuição correta para seus dados? 8.4 Dados de contagem: a distribuição de Poisson 8.5 Dados de contagem: modelos quasi-likelihood 8.6 Dados de contagem: a distribuição Binomial 8.7 Análise com dados de incidência 8.8 Dados de contagem com excesso de zeros 8.9 Dados ordinais: os modelos cumulative link 8.10 Dados contínuos: distribuição beta 8.11 Leituras recomendadas", " Capítulo 8 Análises univariadas (modelos lineares mistos generalizados) Pré-requisitos do capítulo library(ecodados) library(visdat) library(tidyverse) library(lattice) library(RVAideMemoire) library(DHARMa) library(performance) library(MuMIn) library(piecewiseSEM) library(MASS) library(ggExtra) library(sciplot) library(emmeans) library(sjPlot) library(bbmle) library(glmmTMB) library(ordinal) library(car) 8.1 Introdução No capítulo anterior descrevemos sobre os modelos lineares (também chamados de Modelos Lineares Gerais) que podem ser descritos pelo mesmo modelo matemático de uma equação da reta do tipo: \\[ Y_i = \\a + \\b*x_i + \\erro \\] no qual o que difere uma regressão linear de uma análise de variância é a natureza do elemento xi, variável contínua para regressão, variável categórica no caso da ANOVA (que é codificada numa matriz design para desenhos mais complexos). Nesse sentido, o que todos esses métodos têm em comum é a variável resposta Y que é um vetor numérico contínuo. Outro elemento em comum desses métodos é a distribuição de frequência do erro. Se quiser mais detalhes como sobre modelos lineares podem ser escritos na forma de matrizes, consulte a introdução de (Fox, Negrete-Yankelevich, and Sosa 2015). Todos os modelos lineares assumem que a distribuição do erro seja Gaussiana (ou Normal). Isso de certa forma limita o tipo de dado que pode ser usado como variável resposta por estas análises. Por exemplo, dados de contagem (e.g., riqueza e abundância de espécies), frequência (e.g., frequência de ocorrência, porcentagem de cobertura vegetal), incidência (e.g., presença ou ausência de uma espécie) ou proporção (e.g., números de animais infectados a cada 1000 animais) não são adequados para serem utilizados como variáveis resposta em modelos lineares. Uma prática comum quando nossos dados não são Normais é transformar por log ou raiz quadrada. No entanto, para dados de contagem isso não é recomendado (veja (O’Hara and Kotze 2010), (Ives 2015), (Warton 2018)). Nestes casos devemos recorrer a um conjunto de modelos chamados Modelos Lineares Generalizados (GLM). Nestes modelos, o usuário especifica a distribuição de frequência que deseja utilizar para modelar a variável resposta. Esta distribuição de frequência deve pertencer à família exponencial, que inclui a distribuição de Poisson, Gaussiana, Binomial, Binomial Negativa, Gamma, Bernoulli e Beta. Ainda é possível utilizar Cumulative Link Models para modelar dados ordinais (fatores cuja ordem dos elementos importa, tais como muito baixo, baixo, alto e muito alto). Abaixo vamos ver um pouco sobre como um GLM funciona e exemplos com cada uma destas distribuições. 8.2 Como um GLM funciona? Diferentemente do modelo linear, um GLM estima os parâmetros por meio de Máxima Verossimilhança (ML) ao invés dos mínimos quadrados comuns (OLS). Portanto, um GLM relaciona a distribuição da variável resposta aos preditores lineares por meio de uma função de ligação. Por exemplo, no caso da distribuição de Poisson usa-se uma ligação logarítmica (também chamada de log link) que garante que o valores ajustados são sempre não negativos. Portanto, um GLM é composto por esses 3 componentes: função de distribuição, preditor linear e função de ligação. A função de distribuição é uma hipótese sobre a distribuição da variável resposta Yi. Isso também define a média e a variância de Yi. Já a função de ligação define a relação entre o valor médio de Yi e da parte sistemática. Esta é também chamada de ligação entre a média e a parte sistemática do modelo. Existem três tipos de função de ligação: •Identity link, que é definido por g(µ)= μ, e modela a média ou valor esperado de Y. Usado em modelos lineares padrão. •Log link, que é g(μ)=log(μ), e modela o log da média. É usado para dados de contagem (que não podem assumir valores negativos) em modelos log-linear •Logit link, que é g(μ)=log[μ /(1-μ )], e é usado para dados binários e regressão logística Logo, um modelo linear pode ser visto como um caso particular de um GLM em que utiliza distribuição Gaussiana, com identity link 8.3 Como escolher a distribuição correta para seus dados? 8.3.1 Para dados contínuos Se Y é uma variável contínua, a sua distribuição de probabilidade deve ser normal. Nesses casos as distribuições recomendadas são a Gaussiana (Normal) ou Gamma. Para essas distribuições, o parâmetro de dispersão é estimado separadamente da média e é às vezes, chamado de nuisance parameter. Uma particularidade da distribuição Gamma é que ela só aceita valores contínuos positivos. 8.3.2 Para dados de contagem Se Y é binário (e.g., vivo ou morto), a distribuição de probabilidade deve ser binomial. Se Y é uma contagem (e.g., abundância ou riqueza de espécies), então a distribuição de probabilidade deve ser Poisson ou Binomial Negativa. Existem também correções dessas distribuições quando apresentam sobredispersão, tais como quasi-Poisson ou quasi-Negative binomial. Falaremos delas no momento certo. Para distribuições tais como binomial e Poisson, a variância deve ser igual à media e o parâmetro de dispersão é sempre 1. Na maioria dos dados ecológicos esse pressuposto não é cumprido, veremos estratégias para lidar com isso logo à frente. As funções Ord_plot e goodfit do pacote vcd podem auxiliar na escolha da distribuição para dados de contagem. 8.4 Dados de contagem: a distribuição de Poisson Para casos em que estamos interessados em quantificar uma variável discreta, ou seja, uma variável positiva, representada sempre por números inteiros, contendo um número finito de possibilidades, devemos utilizar a distribuição de Poisson. Esta distribuição é peculiar por ser descrita apenas por um parâmetro livre (\\(\\lambda\\)). Isso quer dizer que tanto a média quanto a variância dos dados são descritos por um único parâmetro, o que implica em dizer que a média e a variância têm de ser iguais. Vamos ver um exemplo com dados reais. 8.4.0.1 Exemplo 1 Explicação dos dados Neste exemplo iremos utilizar dados de riqueza de anfíbios anuros coletados em 40 poças, açudes e brejos ao redor de fragmentos florestais no Noroeste Paulista (Prado and Rossa-Feres 2014). Os autores mediram seis variáveis em escala local e outras três em escala de paisagem. Pergunta A distância linear para o corpo d’água mais próximo influencia a abundância total de espécies de anuros? Predições Corpos d’água mais conectados permitem que indivíduos dispersem entre eles com maior facilidade, suportando melhor dinâmicas de metapopulações. Portanto, espero que poças que estejam mais conectadas entre si tenham maior riqueza total de sapos. Variáveis • Variável reposta: riqueza de sapos em 40 poças. • Variável preditora: distância da poça focal para a mais próxima na escala da paisagem Checklist • Verificar se o seu dataframe está com as unidades amostrais nas linhas (neste caso poças) e variáveis nas colunas. Antes de começar com a análise, vamos primeiro explorar os dados. head(fragmentos) #&gt; locality site Riqueza_obs Riqueza_HB Bsc Dne Dnm Dnn Dns Hal Hra Lfu Lla Lpo Eun Pce Pcu Pfa1 Ppa Sfm Sfv #&gt; 1 MAC MacAc1 3 6 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 #&gt; 2 MAC MacAc2 11 13 1 0 1 1 0 0 1 1 0 1 0 0 1 1 1 1 0 #&gt; 3 MAC MacAc3 10 12 1 0 0 0 0 0 1 1 0 1 1 0 1 1 0 1 1 #&gt; 4 MAC MacAc4 10 13 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 1 0 #&gt; 5 MAC MacAc5 3 6 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 #&gt; 6 MAC MacBr1 9 12 0 0 0 1 0 1 1 1 1 0 1 0 1 1 0 0 0 #&gt; Ebi Esp hydrop hydrop2 vegcov nveg fish area area2 depth forcov forcov2 #&gt; 1 0 1 -2.553590 -2.23573 -1.461851 -1.965130 -1.508310 -2.418270 -1.884470 -1.232668 -0.604596 -0.672774 #&gt; 2 1 0 0.573255 0.60630 -1.145775 -0.158114 0.646419 0.147353 0.019560 0.821168 -0.020849 -0.152952 #&gt; 3 0 0 0.573255 0.60630 -0.987737 -1.061622 -1.508310 -0.564022 -0.699829 -0.704539 -0.013816 -0.146124 #&gt; 4 0 0 0.573255 0.60630 0.908718 -0.158114 0.646419 -0.348279 -0.497176 0.821168 -0.171663 -0.296136 #&gt; 5 0 0 -2.553590 -2.23573 -1.461851 -1.965130 -1.508310 -2.315159 -1.844802 -1.306019 0.203364 0.071358 #&gt; 6 0 1 0.573255 0.60630 1.382832 -0.158114 -1.508310 -0.601947 -0.734057 -1.306019 0.203364 0.071358 #&gt; forcov10 dfrag dfrag2 dwater dwater2 X Y #&gt; 1 -6.045965 0.410084 0.166782 1.198175 1.166645 -49.9376 -20.7408 #&gt; 2 -0.208489 -0.097045 -0.381401 0.970207 0.864035 -49.9353 -20.7410 #&gt; 3 -0.138159 -1.242271 -1.059858 -0.121245 -0.299232 -49.9348 -20.7419 #&gt; 4 -1.716633 -1.242271 -1.059858 -0.087507 -0.270350 -49.9334 -20.7462 #&gt; 5 2.033643 -0.471888 -0.688845 0.162610 -0.042156 -49.9270 -20.7453 #&gt; 6 2.033643 -1.242271 -1.059858 -0.121245 -0.299232 -49.9271 -20.7451 glimpse(fragmentos) #&gt; Rows: 40 #&gt; Columns: 40 #&gt; $ locality &lt;chr&gt; &quot;MAC&quot;, &quot;MAC&quot;, &quot;MAC&quot;, &quot;MAC&quot;, &quot;MAC&quot;, &quot;MAC&quot;, &quot;NOV&quot;, &quot;NOV&quot;, &quot;NOV&quot;, &quot;NOV&quot;, &quot;PIN&quot;, &quot;PIN&quot;, &quot;PIN&quot;, … #&gt; $ site &lt;chr&gt; &quot;MacAc1&quot;, &quot;MacAc2&quot;, &quot;MacAc3&quot;, &quot;MacAc4&quot;, &quot;MacAc5&quot;, &quot;MacBr1&quot;, &quot;NovBr1&quot;, &quot;NovBr2&quot;, &quot;NovRe2&quot;, &quot;… #&gt; $ Riqueza_obs &lt;int&gt; 3, 11, 10, 10, 3, 9, 2, 8, 9, 8, 6, 4, 8, 8, 6, 17, 15, 13, 8, 10, 12, 14, 14, 12, 8, 4, 10… #&gt; $ Riqueza_HB &lt;int&gt; 6, 13, 12, 13, 6, 12, 5, 11, 12, 11, 8, 7, 10, 11, 9, 18, 17, 15, 11, 13, 14, 16, 16, 13, 1… #&gt; $ Bsc &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0… #&gt; $ Dne &lt;int&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1… #&gt; $ Dnm &lt;int&gt; 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1… #&gt; $ Dnn &lt;int&gt; 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1… #&gt; $ Dns &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1… #&gt; $ Hal &lt;int&gt; 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0… #&gt; $ Hra &lt;int&gt; 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1… #&gt; $ Lfu &lt;int&gt; 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1… #&gt; $ Lla &lt;int&gt; 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0… #&gt; $ Lpo &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1… #&gt; $ Eun &lt;int&gt; 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0… #&gt; $ Pce &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1… #&gt; $ Pcu &lt;int&gt; 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #&gt; $ Pfa1 &lt;int&gt; 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0… #&gt; $ Ppa &lt;int&gt; 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1… #&gt; $ Sfm &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1… #&gt; $ Sfv &lt;int&gt; 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1… #&gt; $ Ebi &lt;int&gt; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1… #&gt; $ Esp &lt;int&gt; 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0… #&gt; $ hydrop &lt;dbl&gt; -2.553590, 0.573255, 0.573255, 0.573255, -2.553590, 0.573255, 0.573255, 0.573255, 0.573255,… #&gt; $ hydrop2 &lt;dbl&gt; -2.235730, 0.606300, 0.606300, 0.606300, -2.235730, 0.606300, 0.606300, 0.606300, 0.606300,… #&gt; $ vegcov &lt;dbl&gt; -1.461851, -1.145775, -0.987737, 0.908718, -1.461851, 1.382832, 1.382832, 1.698908, -0.8296… #&gt; $ nveg &lt;dbl&gt; -1.965130, -0.158114, -1.061622, -0.158114, -1.965130, -0.158114, 0.745394, 1.648902, 0.745… #&gt; $ fish &lt;dbl&gt; -1.508310, 0.646419, -1.508310, 0.646419, -1.508310, -1.508310, 0.646419, 0.646419, 0.64641… #&gt; $ area &lt;dbl&gt; -2.418270, 0.147353, -0.564022, -0.348279, -2.315159, -0.601947, 1.556190, -0.255774, 0.875… #&gt; $ area2 &lt;dbl&gt; -1.884470, 0.019560, -0.699829, -0.497176, -1.844802, -0.734057, 1.877820, -0.406145, 0.907… #&gt; $ depth &lt;dbl&gt; -1.232668, 0.821168, -0.704539, 0.821168, -1.306019, -1.306019, -0.645858, -0.205750, 1.554… #&gt; $ forcov &lt;dbl&gt; -0.604596, -0.020849, -0.013816, -0.171663, 0.203364, 0.203364, 0.562496, -0.157193, -0.793… #&gt; $ forcov2 &lt;dbl&gt; -0.672774, -0.152952, -0.146124, -0.296136, 0.071358, 0.071358, 0.459151, -0.282666, -0.820… #&gt; $ forcov10 &lt;dbl&gt; -6.045965, -0.208489, -0.138159, -1.716633, 2.033643, 2.033643, 5.624958, -1.571928, -7.932… #&gt; $ dfrag &lt;dbl&gt; 0.410084, -0.097045, -1.242271, -1.242271, -0.471888, -1.242271, 1.307931, 1.557264, 0.4798… #&gt; $ dfrag2 &lt;dbl&gt; 0.166782, -0.381401, -1.059858, -1.059858, -0.688845, -1.059858, 1.510271, 1.967926, 0.2541… #&gt; $ dwater &lt;dbl&gt; 1.198175, 0.970207, -0.121245, -0.087507, 0.162610, -0.121245, -0.087507, -1.355308, 0.1135… #&gt; $ dwater2 &lt;dbl&gt; 1.166645, 0.864035, -0.299232, -0.270350, -0.042156, -0.299232, -0.270350, -1.045428, -0.08… #&gt; $ X &lt;dbl&gt; -49.9376, -49.9353, -49.9348, -49.9334, -49.9270, -49.9271, -49.2742, -49.3303, -49.3084, -… #&gt; $ Y &lt;dbl&gt; -20.7408, -20.7410, -20.7419, -20.7462, -20.7453, -20.7451, -21.5187, -21.5282, -21.5024, -… Percebam que o data frame contém 40 colunas. Neste conjunto de dados as variáveis preditoras já estão padronizadas com média 0 e desvio padrão 1. As variáveis com “2” indicam variáveis quadráticas (podem ser usadas para se testar relações não lineares). Também temos a riqueza observada e a estimada (Riqueza_HB) e as coordenadas geográficas (X e Y). Vamos agora explorar os dados e ver como é a relação entre riqueza e distância para a poça mais próxima. Sempre é recomendado visualizar os dados antes de efetivamente os modelar para se ter uma idéia da relação entre as variáveis: # ------------------------------------------------------------------------- ggplot(fragmentos, aes(dfrag, Riqueza_obs))+ geom_point(size=4, alpha = 0.7)+ stat_smooth(method = &quot;lm&quot;) Aqui vemos que há de fato uma relação linear positiva entre as duas variáveis. A partir de agora vamos sempre usar uma mesma estrutura para realizar nossos exercícios de modelagem: Primeiro vamos especificar o modelo; Depois realizar a diagnose; Por último realizar inferência a partir do nosso modelo. 8.4.0.1.1 Modelagem O primeiro argumento da função glmé uma fórmula, em que na parte esquerda temos a variável resposta seguida do símbolo ~ (lê-se: modelado em função de) seguido pelas variáveis preditoras. Aqui podemos usar uma ou mais variáveis e testar o seu efeito aditivo (usando o sinal de +) ou a interação entre elas (usando o sinal de *). Um bom resumo sobre como especificar o seu modelo pode ser encontrada aqui neste blog. Aqui optamos por um modelo bem simples modelando a riqueza de anfíbios apenas em função da distância para o fragmento mais próximo. mod_pois &lt;- glm(Riqueza_obs~dfrag, family = poisson(link = &quot;log&quot;), data = fragmentos) Assim como modelos lineares que vimos no Capítulo 6, GLMs com distribuição de Poisson requerem que se teste os pressupostos, incluindo sobredispersão e inflação de zeros. 8.4.0.1.2 Diagnose básica dos resíduos do modelo Iremos realizar três diagnoses básicas dos GLMs, avaliando diferentes aspectos do modelo: Heterogeneidade da variância e normalidade dos resíduos Overdispersion Zero-inflation Vamos começar avaliando as heterogeneidade da variância e normalidade dos resíduos: plotresid(mod_pois, shapiro = TRUE)#SÓ O PLOT DE RESÍDUOS par(mfrow=c(2,2)) plot(mod_pois)#TODOS OS 4 PLOTS par(mfrow=c(1,1)) Aqui vemos quatro gráficos. Na primeira coluna temos dois gráficos dos valores preditos (brutos ou padronizados pela raiz quadrada) contra os resíduos. Eles medem desvio em relação à homogeneidade de variância. Os quatro gráficos não devem ter nenhum padrão aparente, ou seja, os pontos devem cair em cima da linha pontilhada. Neste caso, vemos que as linhas vermelhas (que indicam a tendência dos dados) estão praticamente retas seguindo a linha pontilhada, sugerindo que não exista heterogeneidade de variância dos resíduos. O gráfico superior direito é o plot de quantis que mede desvios da normalidade. No gráfico inferior direito, os valores extremos são todos aqueles que estejam a mais de uma unidade da distância de Cook (linha pontilhada vermelha). Também não temos problemas com esse pressuposto do modelo aqui. Vemos que nos quatro plots alguns dados, 1, 7 e 30 (referem-se às linhas do data.frame) aparecem identificados, pois apresentam ligeiro desvio da normalidade e estão distantes da média. No entanto, não é algo para nos preocuparmos pois não são valores muito extremos. Portanto, a diagnose indicou que o modelo com Poisson parece ser adequado para modelar estes dados, ao menos em termos de homogeneidade de variância. 8.4.0.1.3 Diagnose avançada Alguns pacotes permitem calcular outros aspectos do modelo que facilitam a diagnose, ou seja, se podemos de fato confiar nos parâmetros estimados por eles, incluindo valores de significância. Um pressuposto importante dos modelos de contagem (incluindo Poisson) é a overdispersion (sobredispersão). Vejamos como o pacote DHARMa funciona: simulationOutput &lt;- simulateResiduals(fittedModel = mod_pois, plot = TRUE) O plot claramente indica que há problema com overdispersion, mas não em termos de desvios de normalidade (KS test) ou outlier, já que apenas o primeiro foi significativo (aparece em vermelho). 8.4.0.1.4 Detectando e lidando com overdispersion O que é sobredispersão (ou overdispersion)? Ela ocorre quando a variância observada é muito maior do que aquela predita pelo modelo. Para modelos que utilizam a distribuição de Poisson, isso ocorre quando a variância aumenta com a média. Lembre-se de que esta distribuição tem apenas um único parâmetro para descrever tanto a média quanto a variância (\\(\\lambda\\)). Portanto, a variância tem de ser igual à média. No entanto, se a variância nos dados observados for muito maior do que a média, dizemos que há sobredispersão nos dados. Existem duas formas de diagnosticar overdispersion que estão implementadas na maioria dos pacotes. Aqui vamos demonstrá-las usando as funções check_overdispersion e testDispersion disponíveis nos pacotes performance e DHARMa, respectivamente. A função testDispersion do DHARMa utiliza um método de aleatorização dos resíduos para determinar se há overdispersion nos dados, cuja vantagem é que aborda diretamente a variação nos dados, ao invés de medir o ajuste do modelo em si, com outros testes. par(mfrow=c(1,1)) testDispersion(mod_pois)#modelo tem overdispersion #&gt; #&gt; DHARMa nonparametric dispersion test via sd of residuals fitted vs. simulated #&gt; #&gt; data: simulationOutput #&gt; dispersion = 1.6489, p-value &lt; 2.2e-16 #&gt; alternative hypothesis: two.sided Aqui temos um gráfico e o resultado novamente do teste de overdispersion (que já aparecia no gráfico anterior) mostrando que de fato há overdispersion: perceba que o valor de P é significativo. O gráfico nos motra em preto a distribuição dos resíduos aleatorizados e a linha vermelha o valor observado da estatística. Já que a linha está bem à direita da distribuição, isso indica overdispersion, se estivese à esquerda seria o caso de underdispersion. Agora vamos utilizar a função check_overdisperion que utiliza uma distribuição qui-quadradado e o valor de dispersion ratio para testar a presença de overdispersion no modelo. Esse teste também pode ser feito com a função acima ao se especificar o argumento type=\"PearsonChisq\" check_overdispersion(mod_pois)#modelo tem overdispersion #&gt; # Overdispersion test #&gt; #&gt; dispersion ratio = 1.657 #&gt; Pearson&#39;s Chi-Squared = 62.951 #&gt; p-value = 0.007 Quando este resultado é significativo, como vimos na última linha acima, isso indica overdispersion. summary(mod_pois) #&gt; #&gt; Call: #&gt; glm(formula = Riqueza_obs ~ dfrag, family = poisson(link = &quot;log&quot;), #&gt; data = fragmentos) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.3467 -0.9110 0.0942 0.8336 2.2773 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 2.3051 0.0500 46.101 &lt;2e-16 *** #&gt; dfrag 0.0718 0.0507 1.416 0.157 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for poisson family taken to be 1) #&gt; #&gt; Null deviance: 70.868 on 39 degrees of freedom #&gt; Residual deviance: 68.856 on 38 degrees of freedom #&gt; AIC: 235.29 #&gt; #&gt; Number of Fisher Scoring iterations: 4 Na parte de baixo do output da função summary também podemos calcular o dispersion parameter dividindo o residual deviance pelos graus de liberdade dos resíduos. Esta é outra maneira fácil e rápida de detectar overdispersion. Neste exemplo temos que Dispersion parameter = 1.8119903. Quando esse valor é próximo de 1 isso sugere que não há overdispersion. No entanto, se ele for maior que 1.5 isso sugere que o modelo sofre de overdispersion e que devemos usar outra distribuição, tal como a distribuição binomial negativa. Além disso, uma outra forma de diagnosticar o modelo podemos é calcular os resíduos de Pearson (resíduos normalizados), que é basicamente a raiz quadrada da variância da variável resposta. 8.4.0.1.5 Inflação de zeros Qualquer das formas mostradas acima de diagnosticar overdispersion pode ser usada na maioria das vezes, com exceção de dados com muitos zeros (pouca variância). Por isso devemos também testar se o nosso modelo sofre de inflação de zeros. Vejamos como isso funciona usando as funções check_zeroinflation no pacote performanace e testZeroInflation no pacote DHARMa: check_zeroinflation(mod_pois)#para diagnosticar se o modelo sofre de zero inflation #&gt; Model has no observed zeros in the response variable. #&gt; NULL e no DHARMa testZeroInflation(mod_pois) # para testar se existe zero inflation #&gt; #&gt; DHARMa zero-inflation test via comparison to expected zeros with simulation under H0 = fitted model #&gt; #&gt; data: simulationOutput #&gt; ratioObsSim = NaN, p-value = 1 #&gt; alternative hypothesis: two.sided Tanto a função do DHARMa quanto do performance conseguiram detectar que o modelo tem problemas com overdispersion, ou sobre dispersão, mas isso não é causado pelo excesso de zeros. Como já dissemos acima, no caso da distribuição Poisson, tanto a média quanto a variância são modeladas pelo mesmo parâmetro (\\(\\lambda\\)). Isso faz com que esta distribuição não seja muito útil para modelar dados de contagem em que haja muita variância em torno da média. Esse infelizmente é o caso da grande maioria dos dados ecológicos. Por estes motivos não podemos fazer inferência com este modelo porque os parâmetros estimados não são confiáveis. Mas vejamos como seria feita essa inferência caso este modelo fosse adequado. 8.4.0.1.6 Inferência Aqui iremos apresentar várias funções para calcular o coeficiente de determinação (R2). No caso de GLM(M)s, não há um consenso sobre como se calcula este coeficiente, havendo várias propostas que utilizam maneiras diferentes de estimar a heterogeneidade de variância e covariância entre observações dos resíduos, veja (Nakagawa, Johnson, and Schielzeth 2017) e (Ives 2015) para maiores detalhes, assim como o help das respectivas funções. ## Coeficientes estimados pelo modelo summary(mod_pois) #&gt; #&gt; Call: #&gt; glm(formula = Riqueza_obs ~ dfrag, family = poisson(link = &quot;log&quot;), #&gt; data = fragmentos) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.3467 -0.9110 0.0942 0.8336 2.2773 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 2.3051 0.0500 46.101 &lt;2e-16 *** #&gt; dfrag 0.0718 0.0507 1.416 0.157 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for poisson family taken to be 1) #&gt; #&gt; Null deviance: 70.868 on 39 degrees of freedom #&gt; Residual deviance: 68.856 on 38 degrees of freedom #&gt; AIC: 235.29 #&gt; #&gt; Number of Fisher Scoring iterations: 4 ## Calculando o R2 do modelo r.squaredGLMM(mod_pois) #&gt; R2m R2c #&gt; delta 0.04925800 0.04925800 #&gt; lognormal 0.05154558 0.05154558 #&gt; trigamma 0.04696308 0.04696308 rsquared(mod_pois) #&gt; Response family link method R.squared #&gt; 1 Riqueza_obs poisson log nagelkerke 0.04919844 r2(mod_pois) #&gt; # R2 for Generalized Linear Regression #&gt; Nagelkerke&#39;s R2: 0.059 Podemos ver que os valores de R2 são bem baixos (em torno de 4 - 5%), independente do método que usamos pra calculá-lo. 8.4.0.1.7 Plot do modelo predito a1 &lt;- ggplot(fragmentos, aes(dfrag, Riqueza_obs))+ geom_point(cex = 4,alpha = 0.7)+ geom_smooth(method = &quot;glm&quot;, formula = y~x, method.args = list(family =&quot;poisson&quot;), se=TRUE)+ labs(x=&quot;Distância para o fragmento mais próximo&quot;, y=&quot;Riqueza observada&quot;) ggMarginal(a1, fill=&quot;red&quot;) 📝 Importante Aqui vemos que há uma leve tendência na relação positiva entre distância para o fragmento mais próximo e a riqueza de anfíbios observada. No entanto, há uma grande dispersão nos dados ao redor da reta do modelo, fazendo com que a relação não seja de fato significativa e tenhamos um R2 bem baixo. Caso pudéssemos confiar nos parâmetros deste modelo poderíamos dizer que existe uma leve tendência a um aumento da riqueza observada de anfíbios anuros à medida que aumenta a distância da poça para o fragmento mais próximo. 8.4.1 O que causa a overdispersion? Existem dois conjuntos de causas: aparente ou real. As causas aparentes são geradas pela má especificação do modelo, tais como: 1. não inclusão de covariáveis ou interações no modelo; presença de outliers na variável resposta, efeitos não lineares da covariável (X2, X3…); escolha errada da função de ligação (link function). As causas reais incluem: variância maior que a média; muitos zeros; agregação de observações; correlação entre observações (não independência). 8.4.2 O que fazer se seu modelo tiver overdispersion? Depois de tentar corrigir possíveis más especificações, como as listadas acima, existem duas alternativas: usar outra distribuição, tal como Binomial negativa caso o dispersion parameter seja maior que 15 ou 20; ou Usar um modelo com correção de erro da sobredispersão, caso 1.5 &lt; dispersion &gt; 15. Vejamos agora as características da distribuição Binomial negativa. Geralmente, dados de contagem em estudos ecológicos não seguem uma distribuição Poisson, pois há muita dispersão (variância) nos dados. Logo, o pressuposto da distribuição Poisson, i.e., de que a média e variância são descritas por um mesmo parâmetro (\\(\\lambda\\)) é quebrado. Como vimos, overdispersion (ou sobredispersão) é um problema comum ao analisar dados ecológicos e deve necessariamente ser diagnosticado no modelo. Uma maneira de lidar com esse tipo de problema é utilizar uma outra distribuição diferente da Poisson. A binomial negativa pode ser entendida como uma mistura da distibuição Poisson e Gamma, ou seja, ela aceita dados de contagem que sejam positivos, mas sem zero. A grande vantagem desta distribuição é que, diferentemente da Poisson, ela tem um parâmetro para modelar a média (\\(\\lambda\\)) e outro para modelar a variância (k). Logo, ela permite modelar dados em que a média é diferente da variância. Vejamos um exemplo. Aqui vamos continuar com estes dados para ver como o modelo se comporta com essa nova distribuição especificada. Para isso vamos utilizar a função glm.nb do pacote MASS: 8.4.2.1 Modelagem mod_nb &lt;- glm.nb(Riqueza_obs~dfrag, data = fragmentos) 8.4.2.1.1 Diagnose resíduos Assim como fizemos com o modelo com Poisson, vamos agora diagnosticar os resíduos: par(mfrow=c(2,2)) plot(mod_nb) par(mfrow=c(1,1)) (chat &lt;- deviance(mod_nb) / df.residual(mod_nb))#DISPERSION PARAMETER #&gt; [1] 1.126184 Compare estes gráficos com os do modelo anterior com distribuição Poisson. Eles são praticamente idênticos, ou seja, o modelo com Poisson já não tinha heterogeneidade de variância nem problemas com normalidade dos resíduos. Agora vejamos se o problema com overdispersion foi resolvido: simulationOutput &lt;- simulateResiduals(fittedModel = mod_nb, plot = TRUE) Na diagnose do modelo pelo DHARMa vemos que bastou mudar a distribuição de probabilidade que o problema de overdispersion foi resolvido (nenhum teste foi significativo no quadro da esquerda), e como já sabíamos, não há problemas com heterogeneidade de variância (plot da direita mostrando a tendência entre o predito e resíduos pra cada quantil), nem de outliers. O dispersion parameter é mais próximo de 1 do que no modelo com Poisson. Agora sim podemos levar em conta o R2 … 8.4.2.1.2 Inferência rsquared(mod_nb) #&gt; Response family link method R.squared #&gt; 1 Riqueza_obs Negative Binomial(14.7068) log nagelkerke 0.02935674 …que parece um pouco menor do que anteriormente. Perceba que aqui utilizamos somente uma das funções apresentadas anteriormente, já que se trata de um modelo GLM com binomial negativa, calculamos o R2 pelo método de Nagelkerke. 8.4.2.1.3 Interpretação dos resultados summary(mod_nb) #&gt; #&gt; Call: #&gt; glm.nb(formula = Riqueza_obs ~ dfrag, data = fragmentos, init.theta = 14.70679964, #&gt; link = log) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -2.7569 -0.7068 0.0694 0.6194 1.6546 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 2.30504 0.06481 35.567 &lt;2e-16 *** #&gt; dfrag 0.07248 0.06571 1.103 0.27 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for Negative Binomial(14.7068) family taken to be 1) #&gt; #&gt; Null deviance: 44.002 on 39 degrees of freedom #&gt; Residual deviance: 42.795 on 38 degrees of freedom #&gt; AIC: 231.68 #&gt; #&gt; Number of Fisher Scoring iterations: 1 #&gt; #&gt; #&gt; Theta: 14.71 #&gt; Std. Err.: 8.62 #&gt; #&gt; 2 x log-likelihood: -225.68 📝 Importante Aqui vemos que o resultado em termos de valor de P não mudou, ou seja, a distância par ao fragmento mais próximo não foi significativo. Mas vejam que o coeficiente (slope) mudou um pouco, antes era 0.0718 (SE=0.0507) e com binomial negativa passa a ser 0.07248 (SE=0.06571). 8.4.2.1.4 Plot do modelo predito ggplot(fragmentos, aes(dfrag, Riqueza_obs))+ geom_point(size=4, alpha=0.7)+ geom_smooth(method = &quot;glm.nb&quot;, formula = y~x, se=TRUE)+ labs(x=&quot;Distância para o fragmento mais próximo&quot;, y=&quot;Riqueza observada&quot;) Aqui vemos que a reta predita pelo modelo é muito similar ao que tivemos com o Poisson. No entanto, agora que sabemos que este modelo com binomial negativa foi corretamente especificado e podemos confiar nos parâmetros estimados. 8.5 Dados de contagem: modelos quasi-likelihood Como dissemos acima, uma outra alternativa para ajustar modelos GLM a dados de contagem são os chamados “quasi-likelihood,” tais como quasi-Poisson e quasi-binomial. Dependendo do valor do dispersion parameter, pode ser útil escolher este tipo de modelo. No entanto, eles vêm com uma desvantagem: não é possível calcular o valor de Akaike Information Criterion (AIC) porque estes modelos não retornam um valor de likelihood (verosimilhança). Este parâmetro é comumente utilizado em abordagens estatísticas de teoria da informação para selecionar o melhor modelo que se ajusta aos dados. Neste caso, precisamos utilizar outras funções disponíveis nos pacotes MuMIn, AICcmodavg, e bbmle para calcular o QAIC. Para mais detalhes sobre esses modelos, veja o vignette sobre o assunto do pacote bbmle. 8.5.0.1 Análise Aqui vamos apenas exemplificar como um modelo com distribuição quasi-poisson pode ser especificado. mod_quasipois &lt;- glm(Riqueza_obs~dfrag, family = quasipoisson(link = &quot;log&quot;), data = fragmentos) 8.5.0.1.1 Diagnose dos resíduos A função resid não leva em conta a sobredispersão e temos de calcular manualmente o parâmetro de dispersão e inclui-lo no plot. Portanto, não podemos realizar a diagnose de modelos quasi-Poisson apenas com a função plot como fazíamos até então. Então, calculamos primeiramente os resíduos de Pearson e depois dividindo-o pela raiz quadrada do parâmetro de dispersão, veja abaixo: EP &lt;- resid(mod_quasipois, type = &quot;pearson&quot;) ED &lt;- resid(mod_quasipois, type = &quot;deviance&quot;) mu &lt;- predict(mod_quasipois, type = &quot;response&quot;) E &lt;- fragmentos$Riqueza_obs - mu EP2 &lt;- E / sqrt(1.65662 * mu)#dispersion parameter da quasipoisson op &lt;- par(mfrow = c(2, 2)) plot(x = mu, y = E, main = &quot;Response residuals&quot;) plot(x = mu, y = EP, main = &quot;Pearson residuals&quot;) plot(x = mu, y = EP2, main = &quot;Pearson residuals scaled&quot;) plot(x = mu, y = ED, main = &quot;Deviance residuals&quot;) par(op) par(mfrow=c(1,1)) Aqui vemos que não existe um padrão claro nos resíduos, muito similar ao que tínhamos anteriormente. Devido às limitações de distribuições “quasi” e dado que já temos um modelo adequado com binomial negativa, sugerimos interpretar apenas o modelo anterior com binomial negativa. 8.6 Dados de contagem: a distribuição Binomial Quando temos dados de proporção (e.g., número de doentes por 1000 habitantes) ou incidência (i.e., presença ou ausência), a distribuição mais adequada para modelar os dados é a distribuição binomial. No entanto, temos que especificar o modelo de acordo com o tipo dos dados no argumento formula. Vejamos dois exemplos: 8.6.1 Análise com dados de proporção Neste exemplo vamos ver como podemos modelar a proporção de células sanguíneas em função do tipo de tratamento. Explicação dos dados Este conjunto de dados foi coletado por (Franco-Belussi, De Oliveira, and Sköld 2018). Os autores utilizaram um desenho experimental típico de uma 2x5 ANOVA fatorial (ou two-way ANOVA) em que temos dois tratamentos (fatores): pigmentação do girino com dois níveis (Yes e No) e Tempo de exposição com cinco níveis (controle sem UV, 6 h, 12 h, 18 h e 24 h de exposição à UV). Pergunta A melanina proteje girinos contra os efeitos da radiação ultravioleta? Predições Como a melanina participa do sistema imune inato, ela desempenharia um papel na resposta do organismo à radiação UV, auxiliando as células imunes a combater os seus efeitos deletérios. Variáveis • Variável resposta: Contagem diferencial de eosinófilos – Dataframe com 10 girinos em cada tratamento, totalizando 50 girinos glimpse(uv_cells) #&gt; Rows: 50 #&gt; Columns: 8 #&gt; $ UV &lt;chr&gt; &quot;1.CT&quot;, &quot;1.CT&quot;, &quot;1.CT&quot;, &quot;1.CT&quot;, &quot;1.CT&quot;, &quot;2.6h&quot;, &quot;2.6h&quot;, &quot;2.6h&quot;, &quot;2.6h&quot;, &quot;2.6h&quot;, &quot;3.12h&quot;, &quot;… #&gt; $ Pigmentation &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;,… #&gt; $ Total_Cell &lt;int&gt; 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, … #&gt; $ Lymphocyte &lt;int&gt; 80, 74, 78, 87, 74, 95, 73, 77, 61, 81, 90, 80, 92, 76, 51, 62, 88, 59, 51, 53, 42, 37, 62… #&gt; $ Neutrophil &lt;int&gt; 18, 17, 22, 13, 21, 4, 16, 20, 27, 4, 7, 17, 5, 21, 44, 27, 4, 41, 21, 25, 47, 59, 37, 42,… #&gt; $ Basophil &lt;int&gt; 0, 6, 0, 0, 1, 0, 9, 4, 11, 0, 0, 0, 3, 3, 1, 5, 3, 0, 0, 21, 0, 3, 0, 0, 0, 0, 0, 0, 6, 0… #&gt; $ Monocyte &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 5, 3, 0, 14, 1, 5, 0, 0, 1, 0, 0, 0, 0, 1, 1,… #&gt; $ Eosinophil &lt;int&gt; 2, 3, 0, 0, 4, 1, 2, 0, 1, 3, 3, 3, 0, 0, 3, 1, 2, 0, 14, 0, 6, 1, 1, 1, 3, 0, 2, 0, 70, 7… Vamos explorar os dados para tentar entender como são as relações: lineplot.CI(UV, Eosinophil, Pigmentation, data=uv_cells) Aqui vemos que a quantidade de eosinófilos é muito maior nos girinos sem pigmentação (“albinos”). Já que estes animais não têm pigmentação melânica, as células brancas do sangue são a única ferramenta de combate aos efeitos deletérios da UV. 8.6.1.1 Modelagem Aqui vamos usar o cbind no argumento formula para dizer que queremos modelar a contagem de eosinófilos em relação ao número total de células, ou seja, sua proporção. Aqui temos a contagem do número de eusinófilos (um tipo de célula da série branca do sangue) em lâminas histológicas de girinos da rã-touro (Lithobates catesbeianus) num total de 1000 células: mod1&lt;-glm(cbind(Eosinophil, Total_Cell)~UV*Pigmentation, family=binomial, data=uv_cells) 8.6.1.2 Diagnose básica dos resíduos do modelo par(mfrow=c(2,2)) plot(mod1) par(mfrow=c(1,1)) Parece que os resíduos não sofrem de heterogeneidade de variância (linha vermelha está reta), mas parece haver um pequeno desvio da normalidade (veja pontos 19, 29 e 32 destacados no plot de quantis e no de outliers). Vejamos o que o DHARMa nos diz: simulationBion &lt;- simulateResiduals(fittedModel = mod1, plot = TRUE) binned_residuals(mod1) #&gt; Warning: Probably bad model fit. Only about 29% of the residuals are inside the error bounds. Aqui já não resta dúvidas de que os resíduos deste modelo sofrem tanto com heterogeneidade de variância, quanto overdispersion e problemas com outliers. Provavelmente o problema com outliers ocorreu por conta do pequeno tamanho amostral. 8.6.1.3 Inferência Sabemos que o modelo não parece ser adequado para os dados, mas vamos interpretá-lo mesmo assim para que possamos entender o output do summary e os contrastes entre os níveis dos fatores: summary(mod1) #&gt; #&gt; Call: #&gt; glm(formula = cbind(Eosinophil, Total_Cell) ~ UV * Pigmentation, #&gt; family = binomial, data = uv_cells) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -5.4165 -2.5266 -1.0148 0.8068 8.8233 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) -1.84516 0.12107 -15.241 &lt; 2e-16 *** #&gt; UV2.6h -0.17979 0.17835 -1.008 0.3134 #&gt; UV3.12h 0.38414 0.15899 2.416 0.0157 * #&gt; UV4.18h -0.49825 0.19363 -2.573 0.0101 * #&gt; UV5.24h -0.39916 0.18848 -2.118 0.0342 * #&gt; PigmentationYes -2.17222 0.35745 -6.077 1.22e-09 *** #&gt; UV2.6h:PigmentationYes -0.07152 0.53831 -0.133 0.8943 #&gt; UV3.12h:PigmentationYes -0.38414 0.50150 -0.766 0.4437 #&gt; UV4.18h:PigmentationYes 1.13424 0.45981 2.467 0.0136 * #&gt; UV5.24h:PigmentationYes 0.68684 0.48370 1.420 0.1556 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 737.36 on 49 degrees of freedom #&gt; Residual deviance: 460.85 on 40 degrees of freedom #&gt; AIC: 610.35 #&gt; #&gt; Number of Fisher Scoring iterations: 5 anova(mod1) #&gt; Analysis of Deviance Table #&gt; #&gt; Model: binomial, link: logit #&gt; #&gt; Response: cbind(Eosinophil, Total_Cell) #&gt; #&gt; Terms added sequentially (first to last) #&gt; #&gt; #&gt; Df Deviance Resid. Df Resid. Dev #&gt; NULL 49 737.36 #&gt; UV 4 26.034 45 711.32 #&gt; Pigmentation 1 235.682 44 475.64 #&gt; UV:Pigmentation 4 14.789 40 460.85 Aqui temos tanto a tabela com os resultados por níveis dos fatores (summary) quanto a tabela com a Deviance que mostra os fatores e suas interações (anova). Vemos que nenhum fator foi significativo. Caso houvesse algum fator significativo poderíamos testar a significância de cada nível dos fatores usando contrastes, desta forma: pairs(emmeans(mod1, ~ UV|Pigmentation)) #&gt; Pigmentation = No: #&gt; contrast estimate SE df z.ratio p.value #&gt; 1.CT - 2.6h 0.1798 0.178 Inf 1.008 0.8518 #&gt; 1.CT - 3.12h -0.3841 0.159 Inf -2.416 0.1109 #&gt; 1.CT - 4.18h 0.4982 0.194 Inf 2.573 0.0753 #&gt; 1.CT - 5.24h 0.3992 0.188 Inf 2.118 0.2124 #&gt; 2.6h - 3.12h -0.5639 0.167 Inf -3.384 0.0064 #&gt; 2.6h - 4.18h 0.3185 0.200 Inf 1.593 0.5021 #&gt; 2.6h - 5.24h 0.2194 0.195 Inf 1.125 0.7933 #&gt; 3.12h - 4.18h 0.8824 0.183 Inf 4.824 &lt;.0001 #&gt; 3.12h - 5.24h 0.7833 0.177 Inf 4.414 0.0001 #&gt; 4.18h - 5.24h -0.0991 0.209 Inf -0.474 0.9897 #&gt; #&gt; Pigmentation = Yes: #&gt; contrast estimate SE df z.ratio p.value #&gt; 1.CT - 2.6h 0.2513 0.508 Inf 0.495 0.9879 #&gt; 1.CT - 3.12h 0.0000 0.476 Inf 0.000 1.0000 #&gt; 1.CT - 4.18h -0.6360 0.417 Inf -1.525 0.5461 #&gt; 1.CT - 5.24h -0.2877 0.445 Inf -0.646 0.9675 #&gt; 2.6h - 3.12h -0.2513 0.508 Inf -0.495 0.9879 #&gt; 2.6h - 4.18h -0.8873 0.454 Inf -1.957 0.2876 #&gt; 2.6h - 5.24h -0.5390 0.480 Inf -1.123 0.7942 #&gt; 3.12h - 4.18h -0.6360 0.417 Inf -1.525 0.5461 #&gt; 3.12h - 5.24h -0.2877 0.445 Inf -0.646 0.9675 #&gt; 4.18h - 5.24h 0.3483 0.382 Inf 0.911 0.8928 #&gt; #&gt; Results are given on the log odds ratio (not the response) scale. #&gt; P value adjustment: tukey method for comparing a family of 5 estimates Aqui temos o valor de cada combinação de níveis dos fatores, com seu respectivo valor de contraste e o valor de P. Vemos que para girinos sem pigmentação apenas 3 contrastes foram significativos. 8.6.1.3.1 Plot do modelo predito ggplot(uv_cells, aes(UV, Eosinophil)) + geom_violin(aes(color=Pigmentation))+ geom_jitter(shape = 16, position = position_jitter(0.1), cex = 4, alpha = 0.7) Usando o geom_violin podemos perceber que existe uma dispersão maior nos tratamentos que utilizaram girinos sem pigmentação do que nos tratamentos com girinos pigmentados. 8.7 Análise com dados de incidência Uma outra aplicação da distribuição binomial é quando temos dados de incidência, ou seja, presença ou ausência, de alguma variável. Por exemplo, presença ou ausência de uma espécie ou indivíduo num local. Neste caso a formula é diferente e o modelo é similar a uma regressão logística, vejamos. Aqui vamos utilizar os dados do trabalho de (Oliveira et al. 2020). Pergunta A probabilidade de lagartos da espécie Coleodactylus meridionalis perderem (autotomizarem) a cauda aumenta com o tamanho do corpo e de acordo com o sexo dos lagarto? Predições Quanto maior o lagarto, maior a probabilidade de autotomia da cauda e que esta resposta poderia também diferir entre sexos devido ao dimorfismo sexual. Variáveis • Variável resposta: Presença ou ausência de cauda autotomizada em lagartos encontrados por busca ativa. Exploração dos dados Este conjunto de dados possui muitas entradas faltantes (codificadas como NA). Primeiro vamos visualizar o conjunto de dados, e depois precisamos remover as linhas que contêm dados faltantes. Aqui podemos usar a função interna do ggplot2::remove_missing para remover linhas cujas variáveis informadas no argumento estejam faltando, vejamos: head(lagartos) #&gt; Numero Sex SVL Intact_tail_length Autotomized_tail_length Tail_state #&gt; 1 2 Male 20.70 NA 12.88 0 #&gt; 2 3 Male 21.10 NA 13.07 0 #&gt; 3 6 Female 23.72 NA 17.56 0 #&gt; 4 9 Male 18.84 17.38 NA 1 #&gt; 5 21 Male 22.20 NA 16.50 0 #&gt; 6 22 &lt;NA&gt; 20.59 NA 12.46 0 vis_dat(lagartos) vis_miss(lagartos,cluster = TRUE)#22.9% dos dados estão faltando dados_semNA&lt;-remove_missing(lagartos, vars = &quot;Sex&quot;)#excluindo linhas com dados faltantes para a variável Sex vis_miss(dados_semNA) dim(dados_semNA)#verificar as dimensões da tabela depois que os dados tiverem sido excluídos #&gt; [1] 139 6 Agora, seguindo o que já estamos acostumados a fazer, vamos vizualisar os dados com a nossa hipótese: ggplot(dados_semNA, aes(SVL, Tail_state))+ geom_point(aes(shape=Sex, color=Sex), size = 4, alpha = 0.4)+ geom_smooth(method = &quot;glm&quot;, method.args=list(family=&quot;binomial&quot;))+ labs(y=&quot;Estado da Cauda&quot;, x=&quot;Comprimento Rostro-Cloacal (mm)&quot;) 8.7.0.1 Modelagem Aqui vamos construir dois modelos com a mesma distribuição binomial, mas com dois link function: logit e probit. A função logit possui caudas um pouco mais achatadas, isto é, a curva probit se aproxima dos eixos mais rapidamente que a logit. Geralmente não há muita diferença entre elas. Como não temos nenhuma expectativa de qual dos dois link function é o melhor, podemos fazer uma seleção de modelos: mod_log&lt;-glm(Tail_state~SVL*Sex, data=dados_semNA, family = binomial(link=&quot;logit&quot;)) mod_pro&lt;-glm(Tail_state~SVL*Sex, data=dados_semNA, family = binomial(link=&quot;probit&quot;)) AICctab(mod_log, mod_pro, nobs=139) #&gt; dAICc df #&gt; mod_pro 0.0 4 #&gt; mod_log 0.1 4 Existe pouca diferença entre o modelo probit e logit. Como o modelo logit é mais simples vamos interpretá-lo apenas. 8.7.0.2 Diagnose dos resíduos do modelo simulationBion &lt;- simulateResiduals(fittedModel = mod_log, plot = T) binned_residuals(mod_log) #&gt; Warning: About 92% of the residuals are inside the error bounds (~95% or higher would be good). 8.7.0.3 Inferência anova(mod_log, test=&quot;Chisq&quot; ) #&gt; Analysis of Deviance Table #&gt; #&gt; Model: binomial, link: logit #&gt; #&gt; Response: Tail_state #&gt; #&gt; Terms added sequentially (first to last) #&gt; #&gt; #&gt; Df Deviance Resid. Df Resid. Dev Pr(&gt;Chi) #&gt; NULL 138 191.07 #&gt; SVL 1 9.2563 137 181.82 0.002347 ** #&gt; Sex 1 0.3920 136 181.43 0.531262 #&gt; SVL:Sex 1 0.0454 135 181.38 0.831292 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Para modelos com parâmetro de dispersão conhecida (e.g., binomial e Poisson), o chi-quadrado é a estatística mais apropriada. 8.7.0.4 Interpretação dos resultados 📝 Importante A interpretação dos resultados é que o tamanho de corpo (SVL) afeta negativamente a probabilidade da cauda estar intacta, i.e., com o aumento do tamanho, a probabilidade da cauda permanecer intacta diminui. A interação não foi significativa, então o efeito é independente do sexo dos lagartos. 8.8 Dados de contagem com excesso de zeros Quando se analisa abundância ou riqueza de espécies é comum que tenhamos dados com muitos zeros. Esse fenômeno pode ser causado por vários processos ecológicos, tais como locais fora do nicho da espécie, falha na detecção, amostras feitas fora do hábitat ou em locais onde não se espera encontrar a espécie ((Blasco‐Moreno et al. 2019)). Esse tipo de dado é problemático porque rompe com os pressupostos da distribuição Poisson e binomial negativa, podendo inclusive ser uma das causas da overdispersion. Nesses casos, temos de ajustar modelos que levam em conta esse excesso de zeros nos dados. Esses modelos são chamados de zero-inflated e hurdle models (também chamados de zero-altered models), dependendo de como o processo que causou os zeros é modelado. Hurdle models (ou zero-altered models) modelam os dados dividindo-os em dois subconjuntos: um no qual reduzimos os dados à presença-ausência, ou seja, todos os dados maiores que 1 são transformados em 1 e usamos por exemplo uma distribuição binomial; e uma outra parte que só considera os valores positivos sem zero, utilizando uma Poisson ou binomial negativa truncadas. Ao fazer isso, a distribuição truncada assume que os zeros são gerados tanto por processos ecológicos quanto erros de amostragem (ou seja, é impossível distinguir entre essas duas fontes). Portanto, esses zeros são excluídos da distribuição com dados de contagem. Por exemplo, se uma distribuição binomial negativa for usada para modelar a parte quantitativa, chamamos o modelo de Zero-altered Negative Binomial. A interpretação dos modelos deve ser feita de forma conjunta. Modelos com zero inflados funcionam de maneira similar, mas permitem que a distribuição Poisson contenha zeros, ou seja, não é utilizada uma distribuição truncada. Ao fazer isso, esta distribuição de Poisson pressupõe que os zeros foram gerados por um processo ecológico real, tal como, ausência de hábitat adequado. Para ilustrar como podemos lidar com conjuntos de dados complexos vamos utilizar os dados coletados por (Lima et al. 2018). Pergunta Quais atributos de história de vida dos lagartos são relacionados com o volume (load) de infecção, tais como tamanho e sexo? Predições Quanto maior o lagarto, maior o número de parasitas encontrados, esta resposta poderia também diferir entre sexos devido ao dimorfismo sexual. Variáveis • Variável resposta: Número do parasita Raillietiella mottae, que é um crustáceo parasita, infectando o aparelho respiratório e intestinal de lagartos. – Os autores registraram essa espécie infectando duas espécies de lagartos que ocorrem no nordeste Brasileiro. Ao todo, 63 indivíduos de Hemidactylus agrius e 132 de Phyllopezus pollicaris foram amostrados. head(parasitas) #&gt; Especie Sexo CRC Raillietiella_mottae #&gt; W124 Phyllopezus_pollicaris F 61 3 #&gt; W125 Phyllopezus_pollicaris F 56 0 #&gt; W127 Phyllopezus_pollicaris M 61 0 #&gt; W128 Phyllopezus_pollicaris M 48 0 #&gt; W129 Phyllopezus_pollicaris F 40 0 #&gt; W130 Phyllopezus_pollicaris M 62 0 Explorando os dados ggplot(parasitas, aes(Raillietiella_mottae))+ geom_density(aes(fill=&quot;red&quot;))+ facet_grid(Especie~Sexo)+ theme(legend.position = &quot;none&quot;) ggplot(parasitas, aes(CRC, Raillietiella_mottae)) + geom_point(size = 4 , alpha = 0.4) + facet_grid(Sexo~ Especie) Os gráfico acima mostra a contagem do parasita Raillietiella mottae nos dois sexos (F e M para fêmea e macho) nas duas espécies de lagartos, tanto na forma de uma distribuição de densidade quanto de gráfico de dispersão. Aqui podemos ver que de fato existe um excesso de zeros principalmente em P. pollicaris. Quando nos deparamos com dados complexos assim, a estratégia é sempre começar com um modelo simples e depois adicionar mais parâmetros. Portanto, vamos iniciar com um modelo Poisson, mesmo sabendo que ele muito provavelmente não será adequado para modelar estes dados: 8.8.0.1 Modelagem pois_plain&lt;-glm(Raillietiella_mottae~CRC+Sexo*Especie, data=parasitas, family=&quot;poisson&quot;) 8.8.0.2 Diagnose Aqui vamos utilizar as funções do pacote performance novamente: check_zeroinflation(pois_plain)#para diagnosticar se o modelo sofre de zero inflation #&gt; # Check for zero-inflation #&gt; #&gt; Observed zeros: 156 #&gt; Predicted zeros: 140 #&gt; Ratio: 0.90 check_overdispersion(pois_plain) #&gt; # Overdispersion test #&gt; #&gt; dispersion ratio = 1.932 #&gt; Pearson&#39;s Chi-Squared = 367.133 #&gt; p-value = &lt; 0.001 A diagnose não só nos disse que o modelo possui overdispersion, como também de zero-inflation, como já esperávamos. Vejamos então como melhorar o nosso modelo para lidar com esses dois problemas. Especificamente, vamos utilizar um modelo Hurdle com binomial negativa truncada (ou seja, desconsiderando os zeros), e um outro modelo zero-inflated usando uma distribuição binomial negativa. Aqui vamos utilizar o pacote glmmTMB : hur_NB &lt;- glmmTMB(Raillietiella_mottae~CRC+Sexo*Especie, zi=~., data=parasitas, family=truncated_nbinom2)#Hurdle model ziNB_mod2 &lt;- glmmTMB(Raillietiella_mottae~CRC+Sexo*Especie, zi=~., data=parasitas, family=nbinom2)#zero-inflated Poisson ziP_mod2 &lt;- glmmTMB(Raillietiella_mottae~CRC+Sexo*Especie, zi=~., data=parasitas, family=poisson)#zero-inflated Negative Binomial 8.8.0.3 Diagnose check_zeroinflation(hur_NB)#prediz melhor os zeros #&gt; # Check for zero-inflation #&gt; #&gt; Observed zeros: 156 #&gt; Predicted zeros: 157 #&gt; Ratio: 1.01 check_zeroinflation(ziP_mod2) #&gt; # Check for zero-inflation #&gt; #&gt; Observed zeros: 156 #&gt; Predicted zeros: 140 #&gt; Ratio: 0.90 check_zeroinflation(ziNB_mod2) #&gt; # Check for zero-inflation #&gt; #&gt; Observed zeros: 156 #&gt; Predicted zeros: 142 #&gt; Ratio: 0.91 Aqui vemos que o modelo zero-altered (Hurdle Model) conseguiu predizer exatamente a quantidade de zeros observada, fazendo com que o modelo seja suficiente para usarmos com esses dados. ICtab(pois_plain, hur_NB,ziP_mod2,ziNB_mod2, type=c(&quot;AICc&quot;), weights = TRUE) #&gt; dAICc df weight #&gt; ziP_mod2 0.0 10 0.62 #&gt; ziNB_mod2 1.6 11 0.28 #&gt; hur_NB 3.6 11 0.10 #&gt; pois_plain 44.6 5 &lt;0.001 Mas quando comparamos o AICc entre modelos, os modelos zero-inflated (tanto Poisson, quanto binomial negativa) que tem menos parâmetros, são ranqueados ligeiramente melhor do que o modelo binomial negativa zero-altered (ou hurdle). Não podemos distinguir entre os dois modelos com zero-inflated porque o dAIC &lt; 2, ou seja, o ajuste deles aos dados são praticamente iguais. Vejam que a diferença de Akaike Weights entre os dois primeiros modelos e o hurdle é bastante substancial (0.52). Além disso, vemos que os modelos que levam em conta o excesso de zeros se ajustam bem melhor aos dados do que o modelo simples com distribuição Poisson. Vamos ver como os modelos se saem em relação aos outros pressupostos: simulationOutput &lt;- simulateResiduals(fittedModel = hur_NB, plot = T) simulationOutput &lt;- simulateResiduals(fittedModel = ziNB_mod2, plot = T)#tem um outlier nos resíduos (asterisco vermelho) Os gráficos de diagnose do DHARMa são outra evidência de que tanto o modelo hurdle quanto o zero-inflated Poisson são adequados para os dados, em termos de heterogeneidade de variância, outliers e overdispersion. 8.8.0.4 Interpretação dos resultados Apesar de não ter um ajuste tão bom aos dados, o modelo hurdle prediz melhor a quantidade de zeros. Portanto, vamos interpretar os coeficientes apenas deste modelo: summary(hur_NB) #&gt; Family: truncated_nbinom2 ( log ) #&gt; Formula: Raillietiella_mottae ~ CRC + Sexo * Especie #&gt; Zero inflation: ~. #&gt; Data: parasitas #&gt; #&gt; AIC BIC logLik deviance df.resid #&gt; 277.8 313.8 -127.9 255.8 184 #&gt; #&gt; #&gt; Dispersion parameter for truncated_nbinom2 family (): 4.64 #&gt; #&gt; Conditional model: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 3.03428 2.36511 1.283 0.1995 #&gt; CRC -0.05041 0.04861 -1.037 0.2997 #&gt; SexoM -1.49505 0.71440 -2.093 0.0364 * #&gt; EspeciePhyllopezus_pollicaris 0.68945 1.09380 0.630 0.5285 #&gt; SexoM:EspeciePhyllopezus_pollicaris 1.75281 0.94217 1.860 0.0628 . #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Zero-inflation model: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 7.6283 1.8529 4.117 3.84e-05 *** #&gt; CRC -0.1291 0.0369 -3.499 0.000468 *** #&gt; SexoM -1.0893 0.5867 -1.856 0.063386 . #&gt; EspeciePhyllopezus_pollicaris 2.2701 0.9140 2.484 0.013003 * #&gt; SexoM:EspeciePhyllopezus_pollicaris 2.2002 0.8192 2.686 0.007239 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Para maiores detalhes na interpretação deste tipo de modelo, sugerimos fortemente consultar p. 382-3 de Brooks et al. (2017). Para fatores com mais de um nível, o summary mostra os resultados usando contraste, para isto toma como referência um dos níveis do fator (o primeiro em ordem alfabética) e o compara com os outros. Note que na parte com excesso de zeros o contraste é positivo para Espécie. Ou seja, o P. pollicaris tem maior chance de ter ausência de parasitas que H. agrius. O contraste para espécie continua sendo positivo na parte condicional do modelo, mas o valor do parâmetro não é tão alto. Isso quer dizer que P. pollicaris tem abundância de parasitas em média ligeiramente maior que H. agrius. Vemos que a interação é significativa entre sexo e espécie na parte do modelo com excesso de zeros, mas apenas marginalmente significativa na parte condicional. Portanto, a influência do sexo na incidência, mas não na abundância, do parasita depende conjuntamente da espécie. No entanto, o CRC só passa a ser significativo na parte de excesso de zeros, ou seja, quando modelamos apenas a incidência (presença-ausência) do parasita. Portanto, o CRC determina se o lagarto vai ou não ser infectado, mas não o quanto vai receber de parasitas. Já tanto o sexo quanto a espécie foram significativas em ambas as partes do modelo, ou seja, esses fatores não influenciam diferentemente a infecção e a quantidade de parasitas. Agora vejamos como podemos plotar as predições deste modelo: parasitas$phat &lt;- predict(hur_NB, type=&quot;response&quot;) parasitas &lt;- parasitas[with(parasitas, order(Sexo, Especie)), ] ggplot(parasitas, aes(x = CRC, y = phat, colour = Especie,shape = Sexo, linetype = Sexo)) + geom_point(aes(y = Raillietiella_mottae), size=4, alpha=.7, position=position_jitter(h=.2)) + geom_line(size = 1) + labs(x = &quot;Comprimento Rostro-Cloacal&quot;, y = expression(paste(&quot;Abundância de &quot;, italic(&quot;Raillietiella mottae&quot;)))) 8.9 Dados ordinais: os modelos cumulative link Uma outra maneira de codificarmos os dados é utilizando categorias ordenadas, tais como ranques. Exemplos incluem a escala de Likert, scores, intervalos (e.g., de idade). Para este exemplo, iremos utilizar um outro conjunto de dados do artigo de (Franco-Belussi, De Oliveira, and Sköld 2018) que manipulou in vitro a concentração do hormônio noradrenalina (NA) nos olhos de peixes esgana-gato (Gasterosteus aculeatus) e avaliaram a expressão de várias cores conferidas por tipos de células (cromatóforos). Aqui vamos usar os dados do efeito do NA na cor vermelha em machos. Pergunta A NA causa uma diminuição da coloração vermelha, via agregação dos pigmentos? Predições A presença de NA causa a agregação dos pigmentos, permitindo que os hormônios reprodutivos atuem. Variáveis • Variável resposta: Escala de intensidade de cor. Para mais detalhes veja o artigo original. cores &lt;- read.csv2(&quot;https://ndownloader.figshare.com/files/10250700&quot;, h=TRUE) head(cores) #&gt; Animal Treatment Time Sex Black Red #&gt; 1 1 CT 0h M 5 5 #&gt; 2 1 CT 1h M 5 5 #&gt; 3 1 CT 2h M 5 5 #&gt; 4 1 CT 3h M 5 5 #&gt; 5 2 CT 0h M 5 4 #&gt; 6 2 CT 1h M 5 4 ## Filtrando dados - Red Male redmale&lt;- filter(cores, Sex==&quot;M&quot;) head(redmale) #&gt; Animal Treatment Time Sex Black Red #&gt; 1 1 CT 0h M 5 5 #&gt; 2 1 CT 1h M 5 5 #&gt; 3 1 CT 2h M 5 5 #&gt; 4 1 CT 3h M 5 5 #&gt; 5 2 CT 0h M 5 4 #&gt; 6 2 CT 1h M 5 4 Esses dados no entanto tem de ser codificados como um fator ordenado antes de entrarmos com eles no modelo. redmale$Animal&lt;-factor(redmale$Animal) redmale$Red&lt;-factor(redmale$Red, levels = c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;), ordered = TRUE) str(redmale) #&gt; &#39;data.frame&#39;: 40 obs. of 6 variables: #&gt; $ Animal : Factor w/ 5 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,..: 1 1 1 1 2 2 2 2 3 3 ... #&gt; $ Treatment: chr &quot;CT&quot; &quot;CT&quot; &quot;CT&quot; &quot;CT&quot; ... #&gt; $ Time : chr &quot;0h&quot; &quot;1h&quot; &quot;2h&quot; &quot;3h&quot; ... #&gt; $ Sex : chr &quot;M&quot; &quot;M&quot; &quot;M&quot; &quot;M&quot; ... #&gt; $ Black : int 5 5 5 5 5 5 5 5 4 4 ... #&gt; $ Red : Ord.factor w/ 5 levels &quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;&quot;4&quot;&lt;..: 5 5 5 5 4 4 4 4 4 4 ... Repare que a classe do objeto muda e temos agora que Red é um Ordered factor. 8.9.0.1 Modelagem mod3&lt;-clmm(Red~Treatment+Time+(1|Animal), data=redmale, threshold = &quot;equidistant&quot;) 8.9.0.2 Diagnose Infelizmente, o pacote ordinal não fornece métodos para lidar com modelos mistos, como o nosso. Então, montamos um modelo fixo apenas para entrar nas duas funções de diagnose. Essas duas funções scale_test e nominal_test testam a qualidade do ajuste (goodness-of-fit) do modelo, similar aos likelihood ratio tests só que para dados ordinais. assumption3 &lt;- clm(Red~Treatment+Time, data=redmale, threshold = &quot;equidistant&quot;) scale_test(assumption3) #&gt; Tests of scale effects #&gt; #&gt; formula: Red ~ Treatment + Time #&gt; Df logLik AIC LRT Pr(&gt;Chi) #&gt; &lt;none&gt; -24.301 60.602 #&gt; Treatment 1 -24.293 62.586 0.015248 0.9017 #&gt; Time nominal_test(assumption3) #&gt; Tests of nominal effects #&gt; #&gt; formula: Red ~ Treatment + Time #&gt; Df logLik AIC LRT Pr(&gt;Chi) #&gt; &lt;none&gt; -24.301 60.602 #&gt; Treatment 1 -19.749 53.499 9.1031 0.002552 ** #&gt; Time 3 -22.803 63.606 2.9953 0.392356 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Parece que não há problemas com o efeito de escala do dado ordinal, mas a diagnose sugere que possa haver evidência de rompimento do pressuposto de probabilidades proporcionais em relação ao tratamento. Esse é um pressuposto importante de modelos ordinais, os quais assumem que os efeitos de qualquer uma das variáveis explicativas são consistentes (proporcionais) ao longo de diferentes thresholds (que são as quebras entre cada par de categorias da variável resposta ordinal). Isto provavelmente se deve ao baixo tamanho amostral. Por questão de brevidade vamos apenas ignorar este aspecto e interpretar o resultado do modelo mesmo assim. Mas se o seu modelo apresentar este problema, a solução deve ser realizar regressões logísticas separadamente. 8.9.0.3 Inferência summary(mod3) #&gt; Cumulative Link Mixed Model fitted with the Laplace approximation #&gt; #&gt; formula: Red ~ Treatment + Time + (1 | Animal) #&gt; data: redmale #&gt; #&gt; link threshold nobs logLik AIC niter max.grad cond.H #&gt; logit equidistant 40 -22.89 59.77 226(681) 1.04e-05 4.1e+01 #&gt; #&gt; Random effects: #&gt; Groups Name Variance Std.Dev. #&gt; Animal (Intercept) 1.438 1.199 #&gt; Number of groups: Animal 5 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; TreatmentNA10uM -4.602 1.228 -3.748 0.000178 *** #&gt; Time1h -3.602 1.377 -2.616 0.008894 ** #&gt; Time2h -3.602 1.377 -2.616 0.008894 ** #&gt; Time3h -3.602 1.377 -2.616 0.008894 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Threshold coefficients: #&gt; Estimate Std. Error z value #&gt; threshold.1 -6.198 1.722 -3.60 #&gt; spacing 4.978 1.254 3.97 anova(assumption3) #&gt; Type I Analysis of Deviance Table with Wald chi-square tests #&gt; #&gt; Df Chisq Pr(&gt;Chisq) #&gt; Treatment 1 15.3616 8.877e-05 *** #&gt; Time 3 9.1992 0.02676 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 pairs(emmeans(mod3, ~ Treatment|Time, adjust= &quot;tukey&quot;)) #&gt; Time = 0h: #&gt; contrast estimate SE df z.ratio p.value #&gt; CT - NA10uM 4.6 1.23 Inf 3.748 0.0002 #&gt; #&gt; Time = 1h: #&gt; contrast estimate SE df z.ratio p.value #&gt; CT - NA10uM 4.6 1.23 Inf 3.748 0.0002 #&gt; #&gt; Time = 2h: #&gt; contrast estimate SE df z.ratio p.value #&gt; CT - NA10uM 4.6 1.23 Inf 3.748 0.0002 #&gt; #&gt; Time = 3h: #&gt; contrast estimate SE df z.ratio p.value #&gt; CT - NA10uM 4.6 1.23 Inf 3.748 0.0002 Aqui vemos que tanto o tratamento quanto o tempo de exposição foram significativos. 8.9.0.4 Interpretação dos resultados lineplot.CI(Time, as.numeric(Red), Treatment, data=redmale, cex = 1, xlab = &quot;Experimental time (hours)&quot;, ylab = &quot;Erythrophore Index (EI)&quot;, cex.lab = 1.5, x.leg = 1, y.leg = 1.2, cex.leg = 1.3, cex.axis = 1.5, col = c(&quot;#EE6363&quot;,&quot;#79CDCD&quot;), pch = c(12,12), lwd = 1.5, ylim= c(0,5)) 8.10 Dados contínuos: distribuição beta Aqui vamos utilizar como exemplo os dados do artigo de (Franco-Belussi, De Oliveira, and Sköld 2018). Os pesquisadores fizeram um experimento in vivo com peixes esgana-gato (Gasterosteus aculeatus) para testar como a coloração dos animais respondem ao fármaco ioimbina (YOH), que bloqueia a coloração típica que os machos exibem na época de acasalamento, e o tempo de exposição ao mesmo (além de um controle), num desenho de ANOVA fatorial. Como as medidas foram feitas repetidamente no mesmo animal, iremos incluir o Animal como um fator aleatório no modelo. Pergunta A YOH aumenta a coloração escura no olho e mandíbula dos peixes via dispersão dos pigmentos? Predições A YOH promoverá um escurecimento do corpo do animal, já que ela inibe a ação NorAdrenalia (NA). Variáveis • Variável resposta: A intensidade de coloração escura em peixes machos. Esses dados são expressos em termos de porcentagem e variam continuamente de 0 a 100%. Para facilitar a modelagem e nos adequarmos à maneira com que a função requer os dados, vamos simplesmente dividir por 100 para que os dados variem entre 0 e 1. Para modelar os dados vamos utilizar a função glmmTMB ##Filtrando dados fish$Animal&lt;-factor(fish$Animal) fish$Sex&lt;-factor(fish$Sex) darknessmale&lt;- dplyr::filter(fish, Sex==&quot;M&quot;) ggplot(darknessmale, aes(Darkness/100)) + geom_density(colour=&quot;red&quot;, fill=&quot;red&quot;) + theme(legend.position=&quot;none&quot;) No histograma podemos ver que os dados de fato variam continuamente no intervalo entre 0 e 1, tendo uma distribuição notadamente bimodal. 8.10.0.1 Modelagem mod2&lt;-glmmTMB(Darkness/100~Treatment*Time+(1|Animal), family= beta_family, data=darknessmale) 8.10.0.2 Diagnose Aqui utilizaremos o mesmo pacote DHARMa para realizar a diagnose do modelo: simulationOutput &lt;- simulateResiduals(fittedModel = mod2, plot = TRUE) Podemos ver que o modelo não sofre de heterogeneidade de dispersão, overdispersion, nem problemas com outlier. 8.10.0.3 Interpretação dos resultados Agora que podemos interpretar o output com confiança, vamos obter a tabela de anova em que teremos os testes de cada fator do modelo: Anova(mod2) #&gt; Analysis of Deviance Table (Type II Wald chisquare tests) #&gt; #&gt; Response: Darkness/100 #&gt; Chisq Df Pr(&gt;Chisq) #&gt; Treatment 105.546 1 &lt; 2.2e-16 *** #&gt; Time 40.719 3 7.499e-09 *** #&gt; Treatment:Time 49.262 3 1.147e-10 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 📝 Importante aqui vemos que a interação é significativa. Portanto, temos de interpretar os níveis do fator da combinação, fazemos isso no pacote emmeans colocando a barra | : pairs(emmeans(mod2, ~ Treatment|Time)) #&gt; Time = 0h: #&gt; contrast estimate SE df t.ratio p.value #&gt; CT - YOH 0.0283 0.160 30 0.177 0.8609 #&gt; #&gt; Time = 1h: #&gt; contrast estimate SE df t.ratio p.value #&gt; CT - YOH -1.3068 0.181 30 -7.210 &lt;.0001 #&gt; #&gt; Time = 2h: #&gt; contrast estimate SE df t.ratio p.value #&gt; CT - YOH -1.2286 0.182 30 -6.763 &lt;.0001 #&gt; #&gt; Time = 3h: #&gt; contrast estimate SE df t.ratio p.value #&gt; CT - YOH -1.4025 0.185 30 -7.582 &lt;.0001 #&gt; #&gt; Results are given on the log odds ratio (not the response) scale. 📝 Importante e então podemos perceber que a diferença entre o controle e o tratado só passa a ser significativa depois de 1 h de exposição. Isso fica mais evidente quando plotamos os dados lineplot.CI(Time, Darkness, Treatment, data=darknessmale, cex = 1, xlab = &quot;Tempo experimental (horas)&quot;, ylab = &quot;Escuridão do corpo de machos (%)&quot;, cex.lab = 1, x.leg = 1, col = c(&quot;#EE6363&quot;,&quot;#79CDCD&quot;), pch = c(12,12), lwd = 1.5) 8.11 Leituras recomendadas Neste capítulo apenas fizemos uma breve introdução aos modelos lineares generalizados. Para conhecer um pouco mais a fundo todos os detalhes recomendamos a consulta dos livros (Zuur, Ieno, and Elphick 2009b) e (Pinheiro and Bates 2000a) que são as referências clássicas sobre GLM com aplicações em ecologia. Para dados ordinais, sugerimos os livros do Alan Agresti, tais como (Agresti 2010) e Categorical Data Analysis, 3rd Edition, do mesmo autor. Referências "],["cap9.html", "Capítulo 9 Análises Multidimensionais Pré-requisitos do capítulo 9.1 Aspectos teóricos 9.2 Análise de agrupamento hierárquico 9.3 K-means e agrupamentos não-hierárquicos 9.4 Espécies indicadoras 9.5 Análises de Ordenação 9.6 PCR - Regressão de Componentes Principais 9.7 Ordenação restrita 9.8 PERMANOVA", " Capítulo 9 Análises Multidimensionais Pré-requisitos do capítulo ## Pacotes library(ade4) library(ecodados) library(tidyverse) library(vegan) library(pvclust) library(BiodiversityR) library(labdsv) library(ggplot2) library(gridExtra) library(ape) library(FactoMineR) library(factoextra) library(FD) library(palmerpenguins) library(GGally) library(ade4) library(ggord) library(adespatial) library(spdep) ## Dados necessários sp_compos &lt;- ecodados::bocaina species &lt;- ecodados::com_birds env &lt;- ecodados::env_birds xy &lt;- ecodados::birds.xy data(mite) data(doubs) data(mite.env) data(package = &#39;palmerpenguins&#39;) 9.1 Aspectos teóricos Em geral, análises multivariadas têm três principais utilidades: reduzir a dimensionalidade dos dados e encontrar a principal direção de variação dos dados, testar relações entre matrizes, ou ainda encontrar diferenças entre grupos. Apesar dessas análises também serem utilizadas como análises exploratórias e para descrever padrões em estudos ecológicos, a necessidade de se ter hipóteses, ou ao menos expectativas a priori, não pode ser ignorada. Antes de entrar de cabeça nas análises multivariadas, também sugerimos fortemente o estudo de métodos de amostragem e como fazer boas perguntas. Análises multivariadas podem ser divididas, grosseiramente, em dois tipos: agrupamento e ordenação. Análises de agrupamento em geral tentam agrupar objetos (observações) ou descritores em grupos de maneira que objetos do mesmo grupo sejam mais semelhantes entre si do que objetos de outros grupos (P. Legendre and Legendre 2012a). Por exemplo, os objetos podem ser localidades como “parcelas,” “riachos” ou “florestas,” enquanto os descritores são as difentes variáveis coletadas nesses objetos (e.g., espécies, variáveis ambientais). A análise de ordenação, por sua vez, é uma operação pela qual os objetos (ou descritores) são posicionados num espaço que contém menos dimensões que o conjunto de dados original; a posição dos objetos ou descritores em relação aos outros também podem ser usadas para agrupá-los. Vamos começar com análises de agrupamento. Aqui vamos exemplificar dois métodos: uma técnica de agrupamento hierarquica (dendrograma) e outra não-hierarquica (k-means). 9.1.1 Coeficientes de associação Assim chamados genericamente, os coeficientes de associação medem o quão parecidos objetos ou descritores são entre si. Quando analisamos a relação entre objetos fazemos uma análise no modo Q, ao passo que o modo R é quando analisamos a relação entre descritores. Coeficientes de associação do modo Q são medidas de (dis)similaridade ou distância, enquanto para o modo R utilizamos covariância ou correlação. Como já tratamos neste livro sobre covariância e correlação, neste tópico vamos falar sobre índices de distância e similaridade. Mas qual a definição destas duas quantitades? Similaridade são máximas (S=1) quando dois objetos são idênticos Distâncias são o contrário da similaridade (D=1-S) e não têm limites superiores (dependem da unidade de medida) Existem ao menos 26 índices de similaridade que podem ser agrupados de acordo com o tipo de dado (qualitativos ou quantitativos), a maneira com que lidam com duplos zeros (simétricos ou assimétricos). Do seu lado, as distâncias só se aplicam a dados quantitativos e têm como características serem métricas, semi-métricas ou não-métricas. Vejamos agora os principais índices de similaridade e distância de cada tipo. 9.1.2 Métricas de distância O principal coeficiente de distância usado em ecologia é a distância euclidiana. Além disso temos ainda Canberra, Mahalanobis (calcula a distância entre dois pontos num espaço não ortogonal, levando em consideração a covariância entre descritores), Manhattan, Chord (elimina diferenças entre abundância total de espécies), 𝜒2 (dá peso maior para espécies raras), Hellinger (não dá peso para espécies raras). Essas distâncias são recomendada nos casos em que as variáveis de estudo forem contínuas, como por exemplo variáveis morfométricas ou descritores ambientais. Uma característica comum de conjuntos de dados ecológicos são os vários zeros encontrados em matrizes de composição. Eles surgem porque não encontramos nenhum indivíduo de uma determinada espécie num local, seja porque aquele local não tem as condições ambientais adequadas a ela, falha na detectabilidade, ou dinâmicas demográficas estocásticas de colonização-extinção. Logo, quando dois locais compartilham ausência de espécies, não é possível atribuir uma única razão da dupla ausência. Como essas medidas de distância apresentadas acima assumem que os dados são quantitativos e não de contagem, elas não são adequadas para lidar com dados de abundância ou incidência de espécies, porque atribuem um grau de parecênça a pares de locais que compartilham zeros (P. Legendre and Legendre 2012a). Por esse motivo precisamos de coeficientes que desconsiderem os duplos zeros. Eles são chamados de assimétricos. 9.1.2.1 Coeficientes assimétricos binários para objetos Esses coeficientes (ou índices) são apropriados para dados de incidência de espécies (presença-ausência) e desconsideram as duplas ausências. Os índices deste tipo mais comuns utilizados em ecologia são Sørensen, Jaccard, e Ochiai. \\[ \\beta j= a/a+b+c \\] , onde a = número de espécies compartilhadas, b = número de espécies exclusivas da comunidade 1, c = número de espécies exclusivas da comunidade 2. A diferença entre Jaccard e Sørensen é o Sørensen dá peso dobrado para duplas presenças. Por conta dessas características estes índices são adequados para quantificar diversidade beta (Marti J. Anderson et al. 2010; Pierre Legendre and De Cáceres 2013). Esses índices variam entre 0 (nenhuma espécie é compartilhada entre o par de locais) a 1 (todas as espécies são compartilhadas entre o par de locais). 9.1.2.2 Coeficientes binários para descritores (R mode) Se o objetivo for calcular a similaridade entre descritores binários (e.g., presença ou ausência de características ambientais) de pares de locais, geralmente o coeficiente recomendado é o de Sokal &amp; Michener. Este índice está implementado em ade4::dist.binary. 9.1.2.3 Coeficientes quantitativos para objetos Estes são os coeficientes utilizados para dados de contagem (e.g., abundância), quantitativos (e.g., frequência, biomassa, porcentagem cobertura). Diferentemente das distâncias, estes coeficientes são assimétricos, ou seja, não consideram duplas ausências, e portanto são adequados para analisar dados de composição de espécies. Além disso, uma outra característica deles é serem semi-métricos. Os índices mais comuns deste tipo são Bray-Curtis (conhecido como percentage difference em inglês), Chord, log-Chord, Hellinger, chi-quadrado, e Morisita-Horn. Todos os índices discutidos até aqui estão implementados nas funções ade4::dist.ktab, adespatial::dist.ldc, e vegan::vegdist. 9.1.2.4 Coeficientes para descritores (R mode) que incluem mistura de tipos de dados É comum em análises de diversidade funcional que tenhamos um conjunto de atributos (traits) de espécies que são formados por vários tipos de dados: quantitativos (e.g., tamanho de corpo), binários (presença ausência de uma dada característica), fuzzy (um atributo multiestado descrito codificado em várias colunas com porcentagem), ordinais, e circulares (e.g., distribuição de uma fenofase ao longo de um ano). O índice que lida com todos esses dados é o Gower. A versão extendida do índice de Gower pode ser encontrada na função ade4::dist.ktab. O capítulo 7 de (P. Legendre and Legendre 2012a) fornece uma chave dicotômica para escolha do índice mais adequado. 9.1.2.5 Padronizações e transformações É comum coletarmos múltiplas variáveis ambientais cujas unidades sejam diferentes. Por exemplo, temperatura (ºC), distância da margem (m), área (m2). Para diminuir a taxa de Erro Tipo I das análises é recomendado que padronizemos os dados utilizando distribuição Z, assim todas as variáveis passam a ter média 0 e desvio padrão 1. Essa padronização pode ser implementada na função vegan::decostand. Um outro problema comum de matrizes de dados de composição de espécies é o alto número de zeros, enquanto outras espécies podem ter altas abundâncias. Isso gera problemas em ordenações. Para diminuir esta discrepância podemos transformar os dados, por exemplo, utilizando a distância de Hellinger ou Chord. Isso pode ser feito na função vegan::decostand. 9.2 Análise de agrupamento hierárquico O objetivo da análise de agrupamento é agrupar objetos admitindo que haja um grau de similaridade entre eles. Esta análise pode ser utilizada ainda para classificar uma população em grupos homogêneos de acordo com uma característica de interesse. A grosso modo, uma análise de agrupamento tenta resumir uma grande quantidade de dados e apresentá-la de maneira fácil de visualizar e entender (em geral, na forma de um dendrograma). No entanto, os resultados da análise podem não refletir necessariamente toda a informação originalmente contida na matriz de dados. Para avaliar o quão bem uma análise de agrupamento representa os dados originais existe uma métrica — o coeficiente de correlação cofenético — o qual discutiremos em detalhes mais adiante. Antes de considerar algum método de agrupamento, pense porque você esperaria que houvesse uma descontinuidade nos dados; ou ainda, considere se existe algum ganho prático em dividir uma nuvem de objetos contínuos em grupos. O padrão apresentado pelo dendograma depende do protocolo utilizado (método de agrupamento e índice de dissimilaridade); os grupos formados dependem do nível de corte escolhido. A matriz deve conter os objetos a serem agrupados (e.g., espécies) nas linhas e as variáveis (e.g., locais de coleta ou medidas morfológicas) nas colunas. A escolha do método de agrupamento é crítico para a escolha de um coeficiente de associação. É importante compreender as propriedades dos métodos de agrupamento para interpretar corretamente a estrutura ecológica que eles evidenciam (P. Legendre and Legendre 2012a). De acordo com a classificação de Sneath &amp; Sokal (1973) existem cinco tipos de métodos: 1) seqüenciais ou simultâneos; 2) aglomerativo ou divisivo; 3) monotéticos ou politéticos; 4) hierárquico ou não hierárquicos e 5) probabilístico. Sugerimos a leitura do artigo citado para aprofundar seus conhecimentos sobre os diferentes métodos. Métodos hierárquicos podem ser divididos naqueles que consideram o centróide ou a média aritmética entre os grupos. O principal método hierárquico que utiliza a média aritmética é o UPGMA (Agrupamento pelas médias aritméticas não ponderadas), e o principal método que utiliza centróides é a Distância mínima de Ward. O UPGMA funciona da seguinte forma: a maior similaridade (ou menor distância) identifica os próximos agrupamentos a serem formados. Após esse evento, o método calcula a média aritmética das similaridades ou distâncias entre um objeto e cada um dos membros do grupo ou, no caso de um grupo previamente formado, entre todos os membros dos dois grupos. Todos os objetos recebem pesos iguais no cálculo. O método de Ward é baseado no critério de quadrados mínimos (OLS), o mesmo utilizado para ajustar um modelo linear. O objetivo é definir os grupos de maneira que a soma de quadrados (i.e. similar ao erro quadrado da ANOVA) dentro dos grupos seja minimizada (Borcard, Gillet, and Legendre 2018). No entanto, para interpretar os resultados precisamos antes definir um nível de corte, que vai nos dizer quantos grupos existem. Há vários métodos para definir grupos, desde os heurísticos aos que utilizam bootstrap. Se quisermos interpretar este dendrograma, podemos por exemplo estabelecer um nível de corte de 50% de distância (ou seja, grupos cujos objetos tenham ao menos 50% de similaridade entre si). Checklist Verifique se não há espaço nos nomes das colunas e linhas Se os dados forem de abundância, recomenda-se realizar a transformação de Hellinger [@legendre2001]. Esta transformação é necessária porque a matriz de comunidades (em especial, com a presença de muitas espécies raras) pode causar distorções nos métodos de ordenação baseados em distância Euclidiana [@legendre2001]. Se a matriz original contiver muitos valores discrepantes (e.g., uma espécie muito mais ou muito menos abundante que outras) é necessário transformar os dados usando log1p. Se as variáveis forem medidas tomadas em diferentes escalas (metros, graus celcius etc), é necessário padronizar cada variável para ter a média 0 e desvio padrão 1. Isso pode ser feito utulizando a função decostand do pacote vegan. 9.2.0.1 Exemplo 1 Neste exemplo vamos utilizar um conjunto de dados que contém larvas de espécies de anfíbios anuros coletados em 14 poças com diferentes coberturas de dossel. Pergunta Existem grupos de espécies de anfíbios anuros com padrões de ocorrência similar ao longo das poças? Predições Iremos encontrar ao menos dois grupos de espécies: aquelas que ocorrem em poças dentro de floresta (i.e., maior cobertura de dossel) vs. aquelas que ocorrem em poças de áreas abertas (menor cobertura de dossel). Variáveis Variáveis preditoras: a matriz de dados contém a abundância das espécies nas linhas e locais (poças) nas colunas. 9.2.1 Análise no R Para começar, vamos primeiro importar os dados e depois calcular a matriz de distância que seja adequada para o tipo de dado que temos (abundância de espécies - dados de contagem) ## Composição de espécies (seis primeiras localidades) head(sp_compos) #&gt; BP4 PP4 PP3 AP1 AP2 PP1 PP2 BP9 PT1 PT2 PT3 BP2 PT5 #&gt; Aper 0 3 0 0 2 0 0 0 0 0 0 181 0 #&gt; Bahe 859 14 14 0 87 312 624 641 0 0 0 14 0 #&gt; Rict 1772 1517 207 573 796 0 0 0 0 0 0 0 0 #&gt; Cleuco 0 0 0 0 0 0 0 0 0 29 369 0 84 #&gt; Dmic 0 0 6 60 4 0 0 0 2758 319 25 0 329 #&gt; Dmin 0 84 344 1045 90 0 0 0 8 0 0 0 0 ## Matriz de similaridade com o coeficiente de Morisita-Horn distBocaina &lt;- vegdist(sp_compos, method=&quot;horn&quot;) # Agrupamento com a função hclust e o método UPGMA dendro &lt;- hclust(distBocaina, method=&quot;average&quot;) # Visualizar os resultados plot(dendro) 9.2.2 Assessando a qualidade do dendrograma Precisamos verificar que o agrupamento reduziu a dimensionalidade da matiz de forma eficiente, de maneira a não distorcer a informação. Fazemos isso calculando o Coeficiente de correlação cofenética (CCC) cofresult &lt;- cophenetic(dendro) cor(cofresult, distBocaina) #&gt; [1] 0.9455221 Um CCC &gt; .7 indica uma boa representação. Portanto, o nosso resultado de 0.9455221 é alto, garantindo que o dendrograma é adequado. plot(dendro) k &lt;- 4 n &lt;- ncol(sp_compos) MidPoint &lt;- (dendro$height[n-k] + dendro$height[n-k+1]) / 2 abline(h = MidPoint, lty=2) Nesse caso teremos a formação de cinco grupos, representados pelos nós que estão abaixo da linha de corte. Portanto, o resultado não suporta a nossa hipótese a priori que predizia a formação de apenas dois grupos de espécies. 9.2.2.1 Exemplo 2 No exemplo anterior vimos que é difícil interpretar os grupos baseado num nível de corte. A seguir, vamos utilizar o pacote pvclust que calcula automaticamente o nível de corte de similaridade baseado no Bootstrap de cada nó. Uma desvantagem deste método é que ele somente aceita índices de similaridade da função dist que possui apenas a distância Euclidiana, Manhattan e Canberra. Uma maneira de contornarmos essa limitação é utilizar transformações dos dados disponíveis na função disttransform no pacote BiodiversityR ou o decostand do pacote vegan. Também é possível utilizar a transformação de Box-Cox para dados multivariados, disponível no material suplementar de (Pierre Legendre and Borcard 2018). aqui. Esta transformação é geralmente utilizada para tornar a distribuição dos dados mais simétrica (menos enviesada para valores extremos: reduzir o skewness dos dados). 9.2.3 Análise no R Vamos utilizar o mesmo conjunto de dados acima pra responder à mesma pergunta. Aqui vamos utilizar a distância de Chord (que é indicada para dados de composição de espécies) para calcular a matriz de distância. Se transformarmos uma matriz usando a transformação Chord e depois calcularmos a distância Euclidiana, isso equivale à calcular diretamente a distância de Chord: # Dados head(sp_compos) #&gt; BP4 PP4 PP3 AP1 AP2 PP1 PP2 BP9 PT1 PT2 PT3 BP2 PT5 #&gt; Aper 0 3 0 0 2 0 0 0 0 0 0 181 0 #&gt; Bahe 859 14 14 0 87 312 624 641 0 0 0 14 0 #&gt; Rict 1772 1517 207 573 796 0 0 0 0 0 0 0 0 #&gt; Cleuco 0 0 0 0 0 0 0 0 0 29 369 0 84 #&gt; Dmic 0 0 6 60 4 0 0 0 2758 319 25 0 329 #&gt; Dmin 0 84 344 1045 90 0 0 0 8 0 0 0 0 # Passo 1: transformar para distância de Chord bocaina_transf &lt;- disttransform(sp_compos, &quot;chord&quot;) # Passo 2: realizar pvclust com método average e distância euclidiana analise &lt;- pvclust(bocaina_transf, method.hclust=&quot;average&quot;, method.dist=&quot;euclidean&quot;) #&gt; Bootstrap (r = 0.5)... Done. #&gt; Bootstrap (r = 0.56)... Done. #&gt; Bootstrap (r = 0.69)... Done. #&gt; Bootstrap (r = 0.75)... Done. #&gt; Bootstrap (r = 0.88)... Done. #&gt; Bootstrap (r = 1.0)... Done. #&gt; Bootstrap (r = 1.06)... Done. #&gt; Bootstrap (r = 1.19)... Done. #&gt; Bootstrap (r = 1.25)... Done. #&gt; Bootstrap (r = 1.38)... Done. # Passo 3: dendrograma plot(analise, hang=-1) pvrect(analise) É possível notar que existe um único grupo com BS &gt; 95%. Agora vamos tentar usar a distância de Hellinger, que é recomendada (junto com a distância de Chord) para transformar dados de composição de espécies e, desse modo, reduzem distorções nas ordenações como PCA e CA (Pierre Legendre and Gallagher 2001). # Passo 1: transformar dados com Hellinger bocaina_transf2 &lt;- disttransform(bocaina, &quot;hellinger&quot;) # Passo 2: realizar pvclust com método average e distância euclidiana analise2 &lt;- pvclust(bocaina_transf2, method.hclust=&quot;average&quot;, method.dist=&quot;euclidean&quot;) #&gt; Bootstrap (r = 0.5)... Done. #&gt; Bootstrap (r = 0.56)... Done. #&gt; Bootstrap (r = 0.69)... Done. #&gt; Bootstrap (r = 0.75)... Done. #&gt; Bootstrap (r = 0.88)... Done. #&gt; Bootstrap (r = 1.0)... Done. #&gt; Bootstrap (r = 1.06)... Done. #&gt; Bootstrap (r = 1.19)... Done. #&gt; Bootstrap (r = 1.25)... Done. #&gt; Bootstrap (r = 1.38)... Done. # Passo 3: dendrograma plot(analise2, hang=-1) pvrect(analise2) 9.2.3.1 Interpretação dos resultados Notem que se mudarmos o coeficiente de associação, o resultado também muda. Agora temos 1 grupo a mais, composto por Dendropsophus minutus e Scinax duartei que não apareciam antes. Isso se deve ao fato de que a distância de Hellinger dá menos peso para espécies raras do que a Chord. Neste sentido, os dados não suportam a nossa hipótese inicial da formação de dois grupos, independentemente do coeficiente de associação utilizado. 9.3 K-means e agrupamentos não-hierárquicos Ao contrário do dendrograma, o K-means é um agrupamento não-hierárquico e, desse modo, não é otimizado para busca grupos menores aninhados em grupos grupos maiores. Resumidamente, podemos calcular o K-means apartir de uma matriz quadrada ou de distância. Essa técnica procura particionar os objetos em k grupos de maneira a minimizar a soma de quadrados entre grupos e maximizá-la dentro dos grupos. Um critério similar ao de uma ANOVA (cap7?). Um diferencial do K-means em relação aos agrupamentos hierárquicos é que o usuário pode escolher antecipadamente o número de grupos que deseja formar. 9.3.0.1 Exemplo 1 Para este exemplo iremos utilizar um conjunto de dados disponível no pacote ade4 que contém dados de 27 espécies de peixes coletados em 30 pontos ao longo do Rio Doubs, na fronteira entre a França e Suiça. Pergunta Qual é o número de grupos que melhor sumariza o padrão de ocorrência de espécies de peixes ao longo de um riacho? (neste caso, estamos realizando uma análise exploratória e não temos uma predição) Variáveis Variáveis resposta: composição de espécies de peixes Checklist Vamos normalizar os dados de abundância antes de entrar na análise propriamente, já que existem muitos zeros na matriz. 9.3.1 Análise # mostrar somente seis primeiras espécies de seis localidades head(doubs$fish)[,1:6] #&gt; Cogo Satr Phph Neba Thth Teso #&gt; 1 0 3 0 0 0 0 #&gt; 2 0 5 4 3 0 0 #&gt; 3 0 5 5 5 0 0 #&gt; 4 0 4 5 5 0 0 #&gt; 5 0 2 3 2 0 0 #&gt; 6 0 3 4 5 0 0 # retirar a linha 8 (rio sem nenhuma ocorrência de peixe) spe &lt;- doubs$fish[-8,] # Função do pacote vegan para normalizar os dados spe.norm &lt;- decostand(spe, &quot;normalize&quot;) O argumento centers na função abaixo indica o número de grupos que se quer formar. Neste exemplo estamos utilizando centers = 4. spe.kmeans &lt;- kmeans(spe.norm, centers = 4, nstart = 100) spe.kmeans #&gt; K-means clustering with 4 clusters of sizes 3, 12, 6, 8 #&gt; #&gt; Cluster means: #&gt; Cogo Satr Phph Neba Thth Teso Chna Chto Lele #&gt; 1 0.00000000 0.000000000 0.00000000 0.00000000 0.000000000 0.000000000 0.05205792 0.00000000 0.07647191 #&gt; 2 0.10380209 0.542300691 0.50086515 0.43325916 0.114024105 0.075651573 0.00000000 0.00000000 0.06983991 #&gt; 3 0.06167791 0.122088022 0.26993915 0.35942538 0.032664966 0.135403325 0.06212775 0.21568957 0.25887226 #&gt; 4 0.00000000 0.006691097 0.02506109 0.06987391 0.006691097 0.006691097 0.10687104 0.09377516 0.14194394 #&gt; Lece Baba Spbi Gogo Eslu Pefl Rham Legi Scer Cyca #&gt; 1 0.3166705 0.00000000 0.0000000 0.20500174 0.07647191 0.00000000 0.0000000 0.05205792 0.07647191 0.00000000 #&gt; 2 0.1237394 0.02385019 0.0000000 0.05670453 0.04722294 0.02949244 0.0000000 0.00000000 0.00000000 0.00000000 #&gt; 3 0.2722562 0.15647062 0.1574388 0.16822286 0.12276089 0.17261621 0.0793181 0.06190283 0.04516042 0.06190283 #&gt; 4 0.2011411 0.24327992 0.1326062 0.28386032 0.20630360 0.16920496 0.2214275 0.19066542 0.13171275 0.16019126 #&gt; Titi Abbr Icme Acce Ruru Blbj Alal Anan #&gt; 1 0.00000000 0.00000000 0.0000000 0.18058775 0.31667052 0.05205792 0.7618709 0.00000000 #&gt; 2 0.03833408 0.00000000 0.0000000 0.00000000 0.01049901 0.00000000 0.0000000 0.00000000 #&gt; 3 0.14539027 0.01473139 0.0000000 0.03192175 0.32201597 0.01473139 0.1095241 0.04739636 #&gt; 4 0.26230024 0.19561641 0.1331835 0.26713081 0.32103755 0.22883055 0.3326939 0.18873077 #&gt; #&gt; Clustering vector: #&gt; 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #&gt; 2 2 2 2 3 2 2 3 2 2 2 2 2 2 3 3 3 3 4 4 4 1 1 1 4 4 4 4 4 #&gt; #&gt; Within cluster sum of squares by cluster: #&gt; [1] 0.3560423 2.5101386 1.7361453 0.4696535 #&gt; (between_SS / total_SS = 66.7 %) #&gt; #&gt; Available components: #&gt; #&gt; [1] &quot;cluster&quot; &quot;centers&quot; &quot;totss&quot; &quot;withinss&quot; &quot;tot.withinss&quot; &quot;betweenss&quot; &quot;size&quot; #&gt; [8] &quot;iter&quot; &quot;ifault&quot; O objeto que fornece o resultado contém: 1) o tamanho (número de objetos) em cada um dos 4 grupos; 2) o centroide de cada grupo e o pertencimento de cada espécie a cada grupo; e 3) o quanto da Soma de Quadrados dos dados é explicada por esta conformação de grupos. No entanto, não é possível saber a priori qual o número ideal de grupos. Para descobrir isso repetimos o k-means com uma série de valores de K. Isso pode ser feito na função cascadeKM. spe.KM.cascade &lt;- cascadeKM(spe.norm, inf.gr=2, sup.gr=10, iter=100, criterion=&quot;ssi&quot;) Tanto calinski quando ssi são bons critérios para encontrar o número ideal de grupos. Quanto maior o valor de ssi, melhor (veja ?cascadeKM mais detalhes). # Resumo dos resultados spe.KM.cascade$results #&gt; 2 groups 3 groups 4 groups 5 groups 6 groups 7 groups 8 groups 9 groups 10 groups #&gt; SSE 8.2149405 6.4768108 5.0719796 4.3015573 3.58561200 2.9523667 2.4840549 2.05218880 1.75992916 #&gt; ssi 0.1312111 0.1675852 0.1398159 0.1138008 0.08295513 0.1410657 0.1461625 0.07877382 0.06817212 SSE: critério utilizado pelo algorítimo para achar o agrupamento ótimo dos objetos. plot(spe.KM.cascade, sortg=TRUE) 9.3.2 Interpretação dos resultados Diferentemente da nossa predição inicial, o resultado da análise mostra que o número ideal de grupos para explicar a variância no padrão de ocorrência de espécies é 3. Notem que o SSI máximo é alcançado neste número de grupos 0.1675852 (também indicado pela bola vermelha no plot). 9.4 Espécies indicadoras Uma pergunta normalmente feita por ecólogos é: qual espécie pode ser indicadora de uma determinada condição ambiental (e.g., poluição)? O índice IndVal mede dois aspectos das espécies: Especificidade e fidelidade. Uma alta fidelidade significa que espécies ocorrem em todos os locais do grupo e uma alta especificidade significa que as espécies ocorrem somente naquele grupo. Uma boa espécie indicadora é aquela na qual todos os indivíduos ocorrem em todas a amostras referentes a um grupo específico. A Especificidade é dada pela divisão da abundancia média da espécie no grupo pela somatória das abundancias médias dos grupos. Fidelidade é igual ao número de lugares no grupo onde a espécie está presente dividido pelo número total de lugares do grupo (Dufrêne and Legendre 1997). Espécies raras podem receber o mesmo valor de IndVal das espécies indicadoras, porém são chamadas de indicadoras assimétricas, uma vez que contribuem com a especificidade do habitat mas não servem para predizer grupos. Ao contrário, as espécies indicadoras são verdadeiros indicadores simétricos e podem ser usadas para predizer grupos. A análise procede da seguinte forma: Uma matriz de distância é construída e as unidades amostrais são classificadas com alguma análise de agrupamento, hierárquico ou não; A variável ambiental para a qual se deseja classificar os grupos é inserida; As espécies indicadoreas de cada grupo são formadas através do cálculo da especificidade e fidelidade, obtendo-se o valor de IndVal para cada espécie; Por fim, o conjunto de dados originais é comparado para ver se análise faz sentido. O cálculo da significância do índice de IndVal é feito por aleatorização de Monte Carlo. Os métodos de Monte Carlo utilizam números aleatórios de dados reais para simular certos padrões esperados na ausência de um processo ecológico específico [numerica2012]. Assim, o valor do índice é aleatorizado 999 vezes (ou o número de vezes que você optar) dentro dos tratamentos e o valor de P é dado pelo número de vezes em que o índice observado foi igual ou maior que os valores aleatorizados. 9.4.0.1 Exemplo 1 Pergunta Podemos utilizar as espécies de girinos como indicadoras da fitofisionomia? Predições Espécies terrestres serão indicadoras de área aberta, enquanto espécies arborícolas serão indicadoras de áreas florestais. Variáveis Variáveis resposta: mesma matriz já utilizada contendo a abundância de girinos ao longo de poças na Serra da Bocaina. 9.4.1 Análise no R Para este exemplo vamos utilizado o mesmo conjunto de dados utilizado acima com abundância de 16 espécies de girinos coletados em 14 poças com diferentes graus de cobertura de dossel na Serra da Bocaina. O IndVal está disponível tanto no pacote indicspecies quando no labdsv. Para este exemplo iremos usar o labdsv. Primeiro vamos agrupar as unidades amostrais (poças) que informa os grupos de fitofisionomias onde as poças se localizam e para os quais deseja-se encontrar espécies indicadoras: ## Dados head(bocaina) #&gt; BP4 PP4 PP3 AP1 AP2 PP1 PP2 BP9 PT1 PT2 PT3 BP2 PT5 #&gt; Aper 0 3 0 0 2 0 0 0 0 0 0 181 0 #&gt; Bahe 859 14 14 0 87 312 624 641 0 0 0 14 0 #&gt; Rict 1772 1517 207 573 796 0 0 0 0 0 0 0 0 #&gt; Cleuco 0 0 0 0 0 0 0 0 0 29 369 0 84 #&gt; Dmic 0 0 6 60 4 0 0 0 2758 319 25 0 329 #&gt; Dmin 0 84 344 1045 90 0 0 0 8 0 0 0 0 fitofis &lt;- c(rep(1,4), rep(2,4), rep(3,4), rep(4,4), rep(5,4)) ## Análise de espécies indicadoras res_indval &lt;- indval(bocaina, fitofis) # A função summary só exibe o resultado para as espécies indicadoras summary(res_indval) #&gt; [1] cluster indicator_value probability #&gt; &lt;0 rows&gt; (or 0-length row.names) #&gt; #&gt; Sum of probabilities = 9.324 #&gt; #&gt; Sum of Indicator Values = 3.97 #&gt; #&gt; Sum of Significant Indicator Values = 0 #&gt; #&gt; Number of Significant Indicators = 0 #&gt; #&gt; Significant Indicator Distribution #&gt; &lt; table of extent 0 &gt; Para apresentar uma tabela dos resultados para todas as espécies temos de processar os dados: res_indval$maxcls # classe de maior valor indicador / espécie #&gt; BP4 PP4 PP3 AP1 AP2 PP1 PP2 BP9 PT1 PT2 PT3 BP2 PT5 #&gt; 1 1 2 2 2 2 1 1 4 2 1 2 2 res_indval$indcls # valor indicador (indval) #&gt; BP4 PP4 PP3 AP1 AP2 PP1 PP2 BP9 PT1 PT2 PT3 #&gt; 0.4268332 0.3554217 0.3990627 0.4887564 0.5812265 0.1283151 0.2194093 0.2260226 0.3535255 0.1945122 0.2341371 #&gt; BP2 PT5 #&gt; 0.1648885 0.1991525 res_indval$pval # significância do indval #&gt; BP4 PP4 PP3 AP1 AP2 PP1 PP2 BP9 PT1 PT2 PT3 BP2 PT5 #&gt; 0.281 0.613 0.282 0.146 0.316 1.000 1.000 1.000 0.742 1.000 1.000 0.944 1.000 tab_indval &lt;- cbind.data.frame(maxcls = res_indval$maxcls, ind.value = res_indval$indcls, P = res_indval$pval) tab_indval #&gt; maxcls ind.value P #&gt; BP4 1 0.4268332 0.281 #&gt; PP4 1 0.3554217 0.613 #&gt; PP3 2 0.3990627 0.282 #&gt; AP1 2 0.4887564 0.146 #&gt; AP2 2 0.5812265 0.316 #&gt; PP1 2 0.1283151 1.000 #&gt; PP2 1 0.2194093 1.000 #&gt; BP9 1 0.2260226 1.000 #&gt; PT1 4 0.3535255 0.742 #&gt; PT2 2 0.1945122 1.000 #&gt; PT3 1 0.2341371 1.000 #&gt; BP2 2 0.1648885 0.944 #&gt; PT5 2 0.1991525 1.000 9.4.2 Interpretação dos resultados No resultado podemos ver que temos duas espécies indicadoras da fitofisionimia 1: Rhinella icterica (Rict) e Scinax duartei (Sduar). Nenhuma espécie foi indicadora dos outros grupos neste exemplo. 9.5 Análises de Ordenação Os análises de ordenação representam um conjunto de métodos e técnicas multivariadas que buscam organizar objetos (e.g., localidades, indivíduos, espécies) em alguma ordem. Por exemplo, tais métodos permitem identificar se existem grupo de espécies que ocorrem exclusivamente em um determinado hábitat. Ao buscar esta ordem as técnicas de ordenação possuem três principais utilidades: (1) reduzir a dimensionalidade e revelar padrões, (2) separar variáveis mais e menos importantes em combinações complexas, e (3) separar relações mais e menos fortes ao comparar variáveis preditoras e dependentes. Em geral, os métodos são dividídos em ordenações irrestritas (ou análise de gradiente indireto) e restritas (ou análise de gradiente direto). As ordenações irrestritas organizam os objetos (e.g., espécies) de acordo com sua estrutura de covariância (ou correlação), o que demonstra que a proximidade (ou distância) dentro do espaço multidimensional representa semelhança (ou diferença) dos objetos. Por outro lado, as ordenações restritras posiciona os objetos (e.g., espécies) de acordo com sua relação linear com outras variáveis coletadas nas mesmas unidades amostraits (e.g., temperatura e precipitação). Ao passo que as ordenações irrestritas dependem somente de uma matriz (e.g., espécies por localidades), as ordenações restritas utilizam no mínimo duas matrizes (e.g., espécies por localidades e variáveis climáticas por localidade). Desse modo, fica claro por esta diferença entre os dados utilizados que as análises irrestritas são mais exploratórias, enquanto análises restritas são ideias para testar hipóteses com dados multidimensionais. A tabela a seguir apresenta as principais análises utilizadas em ecologia. Método Tipo de variável Função R Ordenação irrestrita PCA Variáveis contínuas (distância euclidiana) PCA, rda, dudi.pca PCoA Aceita qualquer tipo de variável, mas depende da escolha apropriada de uma medida de distância pcoa, dudi.pco nMDS Aceita qualquer tipo de variável, mas depende da escolha apropriada de uma medida de distância metaMDS, nmds CA dudi.coa Hill-Smith Aceita qualquer tipo de variável dudi.hillsmith Ordenação restrita RDA Variáveis preditoras de qualquer tipo e variáveis dependentes contínuas (ou presença e ausência) rda RDA parcial Variáveis preditoras de qualquer tipo e variáveis dependentes contínuas (ou presença e ausência) rda dbRDA Variáveis preditoras de qualquer tipo e matriz de distância obtida a partir das variáveis dependentes capscale, dbrda CCA Variáveis preditoras de qualquer tipo e variáveis dependentes contínuas (ou presença e ausência) rda PERMANOVA Variáveis preditoras de qualquer tipo e matriz de distância obtida a partir das variáveis dependentes adonis, adonis2 PCR Variável dependente necessariamente representada por escores da PCA ou PCoA e variáveis preditoras de qualquer tipo pca, pcoa, lm, glm 9.5.1 Ordenações irrestritas 9.5.1.1 Análise de Componentes Principais - PCA A PCA é uma das ordenações mais utilizadas em diversas áreas do conhecimento. Em ecologia, ela se popularizou por facilitar a visualização de dados complexos como de distribuição de espécies em diferentes localidades e de potenciais variáveis explicativas. Ao mesmo tempo que ganhou tamanha popularidade, a PCA tem sido empregada de maneira incorreta, uma vez que muitos estudos utilizam a visualização gráfica da ordenação (o biplot) para intepretar “relações” entre variáveis preditoras (ambientais) e dependentes (espécies). Porém, como informado anteriormente, as ordenações irrestritas utilizam a estrutura de covariância dos objetos para organizar suas relações de similaridade. Antes de explicar a análise, imagine que vamos usar uma matriz com cinco espécies de aranhas que foram encontradas em oito cidades diferentes. A quantidade de indivíduos de cada espécie coletada em cada cidade será o valor de preenchimento desta matriz. Sendo assim, a matriz possui oito objetos (cidades, representando unidades amostrais) e cinco descritores (espécies), como na tabela abaixo: Cidade sp1 sp2 sp3 sp4 sp5 Cidade 1 5 0 0 0 0 Cidade 2 7 6 0 0 0 Cidade 3 2 3 0 0 0 Cidade 4 0 4 9 0 0 Cidade 5 0 0 12 4 0 Cidade 6 0 0 3 10 6 Cidade 7 0 0 0 8 9 Cidade 8 0 0 0 0 12 O primeiro passo da PCA é obter uma matriz centralizada onde cada valor é subtraído da média da coluna que aquele valor pertence. Esta centralização pode ser calculada com a função scale. aranhas &lt;- data.frame(sp1 = c(5, 7, 2, 0, 0, 0, 0, 0), sp2 = c(0, 6, 3, 4, 0, 0, 0, 0), sp3 = c(0, 0, 0, 9, 12, 3, 0, 0), sp4 = c(0, 0, 0, 0, 4, 10, 8, 0), sp5 = c(0, 0, 0, 0, 0, 6, 9, 12), row.names = paste(&quot;cidade&quot;, 1:8, sep=&quot;&quot;)) aranha.cent &lt;- as.data.frame(base::scale(aranhas, center = TRUE, scale=FALSE)) O segundo passo é calcular uma matriz de covariância (ou matriz de dispersão) e, a partir desta matriz, obter os autovalores e autovetores. Os autovalores representam a porcentagem de explicação de cada eixo e podem ser calculados dividindo a soma do autovalor de cada eixo pela soma de todos os autovalores. No exemplo que apresentamos, os dois primeiros eixos representam 47,20% e 35,01%, respectivamente, de toda variação. Os autovetores, por sua vez, representam os valores que multiplicam as variáveis originais e, desse modo, indicam a direção desses valores. Por fim, os componentes principais (Matriz F) são obtidos multiplicando os autovetores com os valores da matriz centralizada. ## Matriz de covaiância matriz_cov &lt;- cov(aranha.cent) ## Autovalores e autovetores eigen_aranhas &lt;- eigen(matriz_cov) autovalores&lt;- eigen_aranhas$values autovetores &lt;- as.data.frame(eigen_aranhas$vectors) autovalores # eigenvalue #&gt; [1] 36.733031 27.243824 9.443805 2.962749 1.438020 colnames(autovetores) &lt;- paste(&quot;PC&quot;, 1:5, sep=&quot;&quot;) rownames(autovetores) &lt;- colnames(aranhas) autovetores #&gt; PC1 PC2 PC3 PC4 PC5 #&gt; sp1 -0.2144766 0.38855265 0.29239380 -0.02330706 0.8467522 #&gt; sp2 -0.2442026 0.17463316 0.01756743 0.94587037 -0.1220204 #&gt; sp3 -0.3558368 -0.80222917 -0.27591770 0.10991178 0.3762942 #&gt; sp4 0.4159852 -0.41786654 0.78820962 0.17374202 0.0297183 #&gt; sp5 0.7711688 0.01860152 -0.46560957 0.25003826 0.3544591 matriz_F &lt;- as.data.frame(as.matrix(aranha.cent)%*%as.matrix(autovetores)) matriz_F #&gt; PC1 PC2 PC3 PC4 PC5 #&gt; cidade1 -2.979363 4.4720575 1.1533417 -3.2641923 0.5433206 #&gt; cidade2 -4.873532 6.2969618 1.8435339 2.3644158 1.5047024 #&gt; cidade3 -3.068541 3.8302991 0.3288626 -0.3566600 -2.3629973 #&gt; cidade4 -6.086322 -3.9922356 -2.7216169 1.6250305 -0.7918743 #&gt; cidade5 -4.513082 -8.7689219 -0.4668012 -1.1337476 0.9439633 #&gt; cidade6 5.812374 -3.9444494 3.9520584 0.4197281 -0.1376205 #&gt; cidade7 8.361421 -0.6462243 1.8065636 0.4926235 -0.2625625 #&gt; cidade8 7.347046 2.7525126 -5.8959421 -0.1471979 0.5630683 ## Porcentagem de explicação de cada eixo 100* (autovalores / sum(autovalores)) #&gt; [1] 47.201691 35.008126 12.135225 3.807112 1.847846 Agora, é possível visualizar a relação entre as cidades e similaridade na espécies de aranhas que vivem em cada uma delas. matriz_F %&gt;% ggplot(aes(x = PC1, y = PC2, label = rownames(matriz_F))) + theme_bw() + geom_label() + geom_hline(yintercept = 0, linetype=2) + geom_vline(xintercept = 0, linetype=2) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12)) Checklist Verifique se todas as variáveis utilizadas são contínuas. Caso contrário, considere utilizar PCoA. Apesar do exemplo acima ter apresentado a ocorrência de espécies de aranhas em diferentes cidades, é fundamental saber que utilizar PCA com esses dados pode ser problemático. Assim, tenha cuidado em usar de composição de espécies (especialmente abundância) com PCA, uma vez que ‘duplos zeros’ podem gerar distorções na ordenação (P. Legendre and Legendre 2012a). Como alternativa, é possível utilizar PCA com dados padronizados com o método de Hellinger (Pierre Legendre and Gallagher 2001). 9.5.1.2 Exemplo 1 Neste exemplo vamos utilizar um conjunto de dados morfológicos de pinguins do arquipélago Palmer (Península Antártica) disponíveis no pacote ‘palmerpenguins.’ Os dados representam medidas do comprimento e largura do bico (mm), comprimento da nadadeira (mm) e massa corporal (gramas) de três espécies: Adélie, Chinstrap e Gentoo. Como descrito acima, a PCA deve ser utilizada para exploração de dados ou para testes a posteriori (p. ex., PCR). Neste exemplo, iremos usar a estrutura de perguntas e predições para manter a proposta do livro. Pergunta Existe diferenças nas características morfológicas das espécies de pinguins do arquipélago Palmer? Predições Pinguins com dieta diferente possuem differentes características morfológicas. Variáveis Preditora: espécie (categórica com três níveis) Dependentes: variáveis morfológicas (contínua) 9.5.1.3 Análise no R Antes de começar, é necessário remover dados ausentes (se houver) e editar nomes das variáveis (ponto importante para determinar como devem aparecer no gráfico). ## Verificar se existem NAs nos dados. sum(is.na(penguins)) #&gt; [1] 19 ## Remover dados ausentes (NA), quando houver. penguins &lt;- na.omit(penguins) ## Editar nomes para aparecer nos gráficos. names(penguins) &lt;- c(&quot;species&quot;, &quot;island&quot;, &quot;Bill length&quot;, &quot;Bill depth&quot;, &quot;Flipper length&quot;, &quot;Body mass&quot;, &quot;Sex&quot;, &quot;Year&quot;) ## Manter somentes dados contínuos que pretende aplicar a PCA. penguins_trait &lt;- penguins[,3:6] Agora sim os dados estão prontos para fazer a PCA. Um argumento é essencial na análise, o “scale.unit.” Se você utiliar dentro deste argumento o seleção ‘TRUE,’ a função padroniza automaticamente as variáveis para terem a média 0 e variância 1. Esta padronização é essencial quando as variáveis estão em escalas muito diferentes. No exemplo selecionado, temos variáveis como comprimento do bico (em milímetros) e massa corporal (em gramas). # Compare com este código a variância das variáveis penguins_trait %&gt;% dplyr::summarise(across(where(is.numeric), ~var(.x, na.rm=TRUE))) #&gt; # A tibble: 1 × 4 #&gt; `Bill length` `Bill depth` `Flipper length` `Body mass` #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 29.9 3.88 196. 648372. # Agora, veja o mesmo cálculo se fizer a padronização (scale.unit da função PCA) penguins_pad &lt;- decostand(penguins_trait, &quot;standardize&quot;) penguins_pad %&gt;% dplyr::summarise(across(where(is.numeric), ~var(.x, na.rm=TRUE))) #&gt; Bill length Bill depth Flipper length Body mass #&gt; 1 1 1 1 1 # PCA pca.p &lt;- PCA(penguins_trait, scale.unit = TRUE, graph = FALSE) Apesar da simplicidade do comando para executar a PCA, o objeto resultante da análise possui diversas informações que são essenciais para sua plena interpretação. Dentre elas, se destacam os autovalores, escores e loadings. Os autovalores representam a porcentagem de explicação de cada eixo. O escores representam as coordenadas (posições no espaço multidimensional) representando os objetos (geralmente localidades ou indivíduos) e descritores (geralmente espécies ou variáveis ambientais e espaciais). Os loadings, por sua vez, representam a combinação linear entre os escores (nova posição do valor do descritor no espaço ordenado) e os valores originais dos descritores. ## Autovalores: porcentagem de explicação para usar no gráfico pca.p$eig #&gt; eigenvalue percentage of variance cumulative percentage of variance #&gt; comp 1 2.7453557 68.633893 68.63389 #&gt; comp 2 0.7781172 19.452929 88.08682 #&gt; comp 3 0.3686425 9.216063 97.30289 #&gt; comp 4 0.1078846 2.697115 100.00000 ## Visualização da porcentagem de explicação de cada eixo # nota: é necessário ficar atento ao valor máximo do eixo 1 da análise para determinar o valor do ylim (neste caso, colocamos que o eixo varia de 0 a 70) fviz_screeplot(pca.p, addlabels = TRUE, ylim = c(0, 70)) ## Outros valores importantes var_env &lt;- get_pca_var(pca.p) # Escores (posição) das variáveis em cada eixo var_env$coord #&gt; Dim.1 Dim.2 Dim.3 Dim.4 #&gt; Bill length 0.7518288 0.52943763 -0.3900969 -0.04768208 #&gt; Bill depth -0.6611860 0.70230869 0.2585287 0.05252186 #&gt; Flipper length 0.9557480 0.00510580 0.1433474 0.25684871 #&gt; Body mass 0.9107624 0.06744932 0.3592789 -0.19204478 # Contribuição (%) das variáveis para cada eixo var_env$contrib #&gt; Dim.1 Dim.2 Dim.3 Dim.4 #&gt; Bill length 20.58919 36.023392267 41.279994 2.107420 #&gt; Bill depth 15.92387 63.388588337 18.130600 2.556942 #&gt; Flipper length 33.27271 0.003350291 5.574092 61.149849 #&gt; Body mass 30.21423 0.584669105 35.015313 34.185789 # loadings - correlação das variáveis com os eixos var_env$cor #&gt; Dim.1 Dim.2 Dim.3 Dim.4 #&gt; Bill length 0.7518288 0.52943763 -0.3900969 -0.04768208 #&gt; Bill depth -0.6611860 0.70230869 0.2585287 0.05252186 #&gt; Flipper length 0.9557480 0.00510580 0.1433474 0.25684871 #&gt; Body mass 0.9107624 0.06744932 0.3592789 -0.19204478 # Qualidade da representação da variável. Esse valor é obtido multiplicado var_env$coord por var_env$coord var_env$cos2 #&gt; Dim.1 Dim.2 Dim.3 Dim.4 #&gt; Bill length 0.5652466 2.803042e-01 0.15217561 0.002273581 #&gt; Bill depth 0.4371669 4.932375e-01 0.06683710 0.002758546 #&gt; Flipper length 0.9134542 2.606919e-05 0.02054847 0.065971260 #&gt; Body mass 0.8294881 4.549411e-03 0.12908133 0.036881196 # Escores (posição) das localidades (&quot;site scores&quot;) em cada eixo ind_env &lt;- get_pca_ind(pca.p) O pacote FactoMineR criou uma função (dimdesc) que seleciona as melhores variáveis (aquelas mais explicativas) para cada eixo através de uma análise fatorial. No exemplo com pinguins, o primeiro eixo (objeto pca.p$eig) explica ~69% da variação morfológica. A função dimdesc mostra que as quatro variáveis morfológicas estão fortemente associadas com o eixo 1. Porém, enquanto comprimento da nadadeira, massa corporal e comprimento do bico estão positivamente associados com o eixo 1 (correlação positiva), a largura do bico tem relação negativa. O eixo 2, por sua vez, explica ~20% da variação, sendo relacionado somente com largura e comprimento do bico. # Variáveis mais importantes para o Eixo 1 dimdesc(pca.p)$Dim.1 #&gt; $quanti #&gt; correlation p.value #&gt; Flipper length 0.9557480 5.962756e-178 #&gt; Body mass 0.9107624 3.447018e-129 #&gt; Bill length 0.7518288 7.830597e-62 #&gt; Bill depth -0.6611860 3.217695e-43 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;condes&quot; &quot;list&quot; # Variáveis mais importantes para o Eixo 2 dimdesc(pca.p)$Dim.2 #&gt; $quanti #&gt; correlation p.value #&gt; Bill depth 0.7023087 8.689230e-51 #&gt; Bill length 0.5294376 1.873918e-25 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;condes&quot; &quot;list&quot; Agora podemos utilizar o famoso “biplot” para representar a comparação morfológica dos pinguins dentro e entre espécies fviz_pca_biplot(pca.p, geom.ind = &quot;point&quot;, fill.ind = penguins$species, col.ind = &quot;black&quot;, alpha.ind=0.7, pointshape = 21, pointsize = 4, palette = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;), addEllipses = FALSE, alpha.var = 1, col.var = &quot;black&quot;, gradient.cols = &quot;RdBu&quot;, invisible = &quot;quali&quot;, title = NULL) + theme_bw() + xlab(&quot;PC 1 (68.63%)&quot;) + ylab(&quot;PC 2 (19.45%)&quot;) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12), legend.position = &quot;top&quot;, legend.title = element_blank())+ tema_livro() 9.5.2 Análise de Coordenadas Principais - PCoA Diferentemente da PCA, a PCoA é uma análise de ordenação irrestrita que aceita dados de diferentes tipos, como contínuos, categóricos, ordinais, binários, entre outros. Assim, a PCoA é aplicada para casos em que a distância euclidiana não é aplicada (como na PCA). Desse modo, o primeiro passo da análise é calcular uma matriz de similaridade ou de distância (discutido acima). Depois, os passos para obter autovalores e autovetores são bastante parecidos com a PCA. Da mesma forma, os eixos da PCoA e os valores ou posições dos objetos nesses eixos representam a relação de semelhança (ou diferença) baseada nos descritores desses objetos. A diferença, neste caso, é que a PCoA representa um espaço não-euclidiano, que irá ser afetado pela escolha do método de similaridade. As utilizações mais comuns da PCoA são a ordenação (1) da matriz de composição de espécies usando a distância apropriada (Jaccard, Sorensen, Bray Curits), (2) da matriz de variáveis ambientais com mistos (contínuos, categóricos, circulares, etc…), e (3) da matriz filogenética (método PVR Jose Alexandre Felizola Diniz-Filho, Sant’Ana, and Bini 1998). Abaixo, exemplificamos a ordenação da matriz de composição de espécies. Checklist Compare as dimensões das matrizes utilizadas para a PCoA. Com bastante frequência, a tentativa de combinar dados categóricos (algum descritor dos objetos) com os valores obtidos com a PCoA gera erros para plotar a figura ou para executar a análise. Verifique, então, se as linhas são as mesmas (nome das localidades ou indivíduos e quantidade). É fundamental conhecer o tipo de dados que está usando para selecionar a medida de distância apropriada. Essa escolha vai afetar a qualidade da ordenação e sua habilidade para interpretar a relação de semelhança entre os objetos comparados. Diferente da PCA, a PCoA aceita dados ausentes se a medida de distância escolhida também não tiver esta limitação. Por exemplo, a distância de Gower produz matrizes de similaridade mesmo com dados ausentes em determinados objetos. Em alguns casos, a autovalores negativos são produzidos na ordenação com PCoA (cap9?). Apesar deste problema, os autovalores mais importantes (eixos iniciais) não são afetados e, deste modo, a qualidade da representação dos objetos no espaço multidimensional não é afetada. Alguns autores sugerem utilizar correções métodos de correção, como Lingoes ou Cailliez (P. Legendre and Legendre 2012a). 9.5.2.1 Exemplo 1 Neste exemplo vamos utilizar a composição de ácaros Oribatidae em 70 manchas de musgo coletados por Borcard et al. (1992). Pergunta A composição de espécies de ácaros muda entre diferentes topografias? Predições Iremos encontrar ao menos dois grupos de espécies: aquelas que ocorrem em poças dentro de floresta vs. aquelas que ocorrem em poças de áreas abertas. Variáveis Preditora: topografia (categórica com dois níveis) Dependentes: composição de espécies de ácaro 9.5.2.2 Análise no R # Padronização dos dados com Hellinger mite.hel &lt;- decostand(mite, &quot;hellinger&quot;) # Cálculo da matriz de distância com método Bray Curtos sps.dis &lt;- vegdist(mite.hel, &quot;bray&quot;) # PCoA pcoa.sps &lt;- pcoa(sps.dis, correction=&quot;cailliez&quot;) Assim como na PCA, a porcentagem de explicação dos eixos é uma das informações mais importantes pois descrevem a efetividade da redução da dimensionalidade dos dados. ## Porcentagem de explicação do Eixo 1 100*(pcoa.sps$values[,1] / pcoa.sps$trace)[1] #&gt; [1] 49.10564 ## Porcentagem de explicação dos Eixo 2 100*(pcoa.sps$values[,1] / pcoa.sps$trace)[2] #&gt; [1] 14.30308 ## Porcentagem de explicação acumulada dos dois primeiros eixos sum(100*(pcoa.sps$values[,1] / pcoa.sps$trace)[1:2]) #&gt; [1] 63.40872 # Selecionar os dois primeiros eixos eixos &lt;- pcoa.sps$vectors[,1:2] ## Juntar com algum dado categórico de interesse para fazer a figura pcoa.dat &lt;- data.frame(topografia=mite.env$Topo, eixos) Para visualizar os resultados da PCoA, vamos exportar os escores dos eixos para usar no ggplot2. ## Escores dos dois primeiros eixos eixos &lt;- pcoa.sps$vectors[,1:2] ## Combinar dados dos escores com um dado categórico de interesse para nossa pergunta pcoa.dat &lt;- data.frame(topografia=mite.env$Topo, eixos) ### Gráfico biplot da PCoA pcoa.dat %&gt;% ggplot(aes(x = Axis.1, y = Axis.2, fill = topografia, color = topografia, shape = topografia)) + theme_bw() + geom_point(size=4, alpha = 0.7) + scale_shape_manual(values=c(21, 22)) + scale_color_manual(values=c(&quot;black&quot;, &quot;black&quot;)) + scale_fill_manual(values=c(&quot;darkorange&quot;, &quot;cyan4&quot;)) + xlab(&quot;PCO 1 (49.11%)&quot;) + ylab(&quot;PCO 2 (14.30%)&quot;) + theme(legend.position = &quot;top&quot;, legend.title=element_blank()) + geom_hline(yintercept = 0, linetype=2) + geom_vline(xintercept = 0, linetype=2)+ tema_livro() 9.5.2.3 Limitações importantes das ordenações irrestritas Com frequência, pesquisadores utilizam análises como PCA e PCoA para “testar” diferenças na composição de espécies entre determinados fatores relevantes (altitude, clima, etc…). Porém, como falado acima, as análises de ordenação irrestritas não são utilizadas para testar qualquer hipótese. Ao invés disso, essas análises representam uma poderosa ferramente para explorar padrões em variáveis dependentes ou independentes para ajudar na interpretação ou mesmo para testar hipóteses em análises combinadas com as ordenações irrestritas. 9.6 PCR - Regressão de Componentes Principais Uma maneira de testar hipóteses utilizando ordenações irrestritas é utilizando os resultados da ordenação (escores) como variáveis preditoras ou dependentes como, por exemplo, em modelos lineares (e.g., regressão múltipla). O primeiro passo é utilizar uma ordenação, como a PCA, para gerar os “novos” dados que serão usados na análise. A utilização desses novos dados (que representam as coordenadas principais ou escores da PCA) vai depender da pergunta em questão. Por exemplo, pode ser que esses valores representem gradientes climáticos e, por este motivo, serão utilizados como variáveis preditoras em um modelo linear (e.g., regressão múltipla). Por outro lado, esses valores podem representar o espaço morfológicos de espécies de peixe e, como consequência, serão utilizados como variáveis dependentes para entender o efeito da presença de predador sobre a morfologia. Checklist Compare as dimensões das matrizes utilizadas para a PCR. Com bastante frequência, a tentativa de combinar dados categóricos (algum descritor dos objetos) com os valores obtidos com a PCoA gera erros para plotar a figura ou para executar a análise. Verifique, então, se as linhas são as mesmas (nome das localidades ou indivíduos e quantidade). Estudos recentes têm criticado a utilização de PCR para testar hipóteses ecológicas pelo fato dos escores não representarem, necessariamente, a variação total das variáveis originais, bem como a relação entre a variável preditora e a dependente. 9.6.0.1 Exemplo 1 Neste exemplo vamos utilizar a composição de espécies de aves em 23 regiões dos alpes franceses. Os dados ambientais (env) representam variáveis climáticas (temperatura e chuva) e altitude. Pergunta Gradientes climáticos afetam a riqueza de aves? Predições O aumento da umidade e redução da temperatura aumentam o número de espécies de aves. Variáveis Preditora: temperatura e chuva (contínuas) e altitude (categórica com três níveis) Dependentes: riqueza de espécies de aves # Dados env_cont &lt;- env[,-8] env.pca &lt;- PCA(env_cont, scale.unit = TRUE, graph = FALSE) var_env &lt;- get_pca_var(env.pca) # Contribuição (%) das variáveis para cada eixo var_env$contrib #&gt; Dim.1 Dim.2 Dim.3 Dim.4 Dim.5 #&gt; mini.jan 10.93489 22.2975487 16.1607726 7.6025527 0.01782438 #&gt; maxi.jan 20.18065 3.2890767 2.1814486 4.2756350 41.05646526 #&gt; mini.jul 11.87396 21.1379132 0.3428843 0.7750666 44.70209396 #&gt; maxi.jul 18.47244 0.9159957 56.5369988 9.4368661 2.59283074 #&gt; rain.jan 9.95206 21.5387403 6.5737927 53.7375738 4.44283706 #&gt; rain.jul 16.14997 11.2368132 7.2608047 19.6972097 0.71454880 #&gt; rain.tot 12.43603 19.5839121 10.9432983 4.4750959 6.47339980 # Loadings - correlação das variáveis com os eixos var_env$cor #&gt; Dim.1 Dim.2 Dim.3 Dim.4 Dim.5 #&gt; mini.jan 0.6830371 0.6766524 -0.21924927 0.12298817 -0.004517369 #&gt; maxi.jan 0.9279073 0.2598807 -0.08055260 0.09223249 0.216804944 #&gt; mini.jul 0.7117620 0.6588220 0.03193603 -0.03926930 -0.226225907 #&gt; maxi.jul 0.8877675 0.1371462 0.41008461 -0.13702428 0.054483561 #&gt; rain.jan -0.6516187 0.6650391 -0.13983474 -0.32698110 0.071319550 #&gt; rain.jul -0.8300858 0.4803509 0.14696011 0.19796389 -0.028601865 #&gt; rain.tot -0.7284135 0.6341424 0.18041856 0.09435932 0.086088397 ind_env &lt;- get_pca_ind(env.pca) env.pca$eig #&gt; eigenvalue percentage of variance cumulative percentage of variance #&gt; comp 1 4.26652359 60.9503370 60.95034 #&gt; comp 2 2.05340251 29.3343216 90.28466 #&gt; comp 3 0.29745014 4.2492878 94.53395 #&gt; comp 4 0.19896067 2.8422953 97.37624 #&gt; comp 5 0.11448717 1.6355310 99.01177 #&gt; comp 6 0.04312874 0.6161248 99.62790 #&gt; comp 7 0.02604718 0.3721025 100.00000 O objeto env.pca$eig demonstra que os três primeiros eixos explicam 94.54% da variação total dos dados climáticos. Como o intuito da PCR é reduzir a dimensionalidade (ou seja, o número de variáveis preditoras ou depedentes) para facilitar a interpretação e garantir que as variáveis não sejam correlacionadas. O próximo passo então é obter os valores dos escores que representam os valores convertidos para serem usados em uma determinada análise, como a regressão múltipla. # Passo 1: obter os primeiros eixos pred.env &lt;- ind_env$coord[,1:3] # Passo 2: calcular a riqueza de espécies riqueza &lt;- specnumber(species) # Passo 3: combinar os dois valores em um único data.frame dat &lt;- data.frame(pred.env, riqueza) Agora que os dados foram combinados em uma única matriz, podemos utilizar os comandos aprendidos no (cap7?) para testar nossa hipótese. # Regressão múltipla mod1 &lt;- lm(riqueza~Dim.1+Dim.2+Dim.3, data = dat) par(mfrow=c(2,2)) plot(mod1) # verificar pressupostos dos modelos lineares summary(mod1) # resultados do teste #&gt; #&gt; Call: #&gt; lm(formula = riqueza ~ Dim.1 + Dim.2 + Dim.3, data = dat) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.4008 -1.1729 0.4356 1.2072 2.4571 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 13.30435 0.37639 35.347 &lt; 2e-16 *** #&gt; Dim.1 0.68591 0.18222 3.764 0.00131 ** #&gt; Dim.2 -0.09961 0.26267 -0.379 0.70874 #&gt; Dim.3 -0.21708 0.69014 -0.315 0.75654 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.805 on 19 degrees of freedom #&gt; Multiple R-squared: 0.4313, Adjusted R-squared: 0.3415 #&gt; F-statistic: 4.804 on 3 and 19 DF, p-value: 0.01179 dimdesc(env.pca)$Dim.1 #&gt; $quanti #&gt; correlation p.value #&gt; maxi.jan 0.9279073 1.846790e-10 #&gt; maxi.jul 0.8877675 1.607390e-08 #&gt; mini.jul 0.7117620 1.396338e-04 #&gt; mini.jan 0.6830371 3.282701e-04 #&gt; rain.jan -0.6516187 7.559358e-04 #&gt; rain.tot -0.7284135 8.112903e-05 #&gt; rain.jul -0.8300858 9.588034e-07 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;condes&quot; &quot;list&quot; Como percebemos, a Dim.1 foi o único gradiente ambiental que afetou a riqueza de espécies. Para interpretar esta dimensão (e outras importantes), podemos usar a função dimdesc para verificar as variáveis mais importantes. Neste caso, os valores mais extremos de correlação (maior que 0.8) indicam que a temperatura do mês de janeiro e julho bem como a chuva do mês de julho foram as variáveis mais importantes para determinar o gradiente ambiental expresso na dimensão 1. Assim, podemos fazer um gráfico para representar a relação entre Eixo 1 (gradiente chuva-temperatura) e a riqueza de espécies de aves. Valores negativos do eixo 1 (Gradiente ambiental - PC1) representam localidades com mais chuva, ao passo que valores positivos indicam localidades com temperaturas maiores. dat %&gt;% ggplot(aes(x = Dim.1, y = riqueza)) + theme_bw() + geom_smooth(method = lm, fill = &quot;#525252&quot;, color = &quot;black&quot;) + geom_point(size=4, shape=21, alpha = 0.7, color=&quot;#1a1a1a&quot;, fill=&quot;cyan4&quot;) + xlab(&quot;Gradiente ambiental (PC1)&quot;) + ylab(&quot;Riqueza de aves&quot;) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12))+ tema_livro() 9.6.0.2 Exemplo 2 É possível que os dados utilizados em seu estudo sejam mistos, ou seja, incluem tanto variáveis categóricas quanto contínuas. Como falado acima, nesses casos a análise indicada é a PCoA. Assim como na PCA, podemos extrair os escores da PCoA para utilizar a posteriori em análises univariadas e multivariadas. Pergunta: Variáveis climáticas, vegetacionais e topográficas afetam a riqueza de ácaros? Predições A densidade da vegetação e disponibilidade de água aumentam a riqueza de espécies de ácaros. Variáveis Preditoras: densidade de substrado e disponibilidade de água (contínuas), tipo de substrado (categórica com 7 níveis), densidade arbusto (ordinal com 3 níveis), e topografia (categórica com 2 níveis) Dependentes: riqueza de espécies de ácaros O primeiro passo então é utilizar um método de distância apropriado para o seu conjunto de dados. Em nosso exemplo, utilizaremos a distância de Gower, que é usada para dados mistos ((cap14?)). ## Matriz de distância env.dist &lt;- gowdis(mite.env) ## PCoA env.mite.pco &lt;- pcoa(env.dist, correction=&quot;cailliez&quot;) ## Porcentagem de explicação do Eixo 1 100*(env.mite.pco$values[,1] / env.mite.pco$trace)[1] #&gt; [1] 61.49635 ## Porcentagem de explicação dos Eixo 2 100*(env.mite.pco$values[,1] / env.mite.pco$trace)[2] #&gt; [1] 32.15486 O próximo passo é exportar os escores para as análises a posteriori. ## Selecionar os dois primeiros eixos pred.scores.mite &lt;- env.mite.pco$vectors[,1:2] ## Juntar com os dados da área para fazer a figura mite.riqueza &lt;- specnumber(mite) pred.vars &lt;- data.frame(riqueza=mite.riqueza, pred.scores.mite) ### Regressão múltipla mod.mite &lt;- lm(riqueza~Axis.1+Axis.2, data=pred.vars) par(mfrow=c(2,2)) plot(mod.mite) summary(mod.mite) #&gt; #&gt; Call: #&gt; lm(formula = riqueza ~ Axis.1 + Axis.2, data = pred.vars) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -10.6874 -2.3960 -0.1378 2.5032 8.6873 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 15.1143 0.4523 33.415 &lt; 2e-16 *** #&gt; Axis.1 -11.4303 2.0013 -5.711 2.8e-07 *** #&gt; Axis.2 5.6832 2.7677 2.053 0.0439 * #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 3.784 on 67 degrees of freedom #&gt; Multiple R-squared: 0.3548, Adjusted R-squared: 0.3355 #&gt; F-statistic: 18.42 on 2 and 67 DF, p-value: 4.225e-07 Finalmente, após interpretar os resultados do modelo, podemos fazer a figura com as variáveis (eixos) importantes g_acari_axi1 &lt;- pred.vars %&gt;% ggplot(aes(x = Axis.1, y = riqueza)) + theme_bw() + geom_smooth(method = lm, fill = &quot;#525252&quot;, color = &quot;black&quot;) + geom_point(size=4, shape=21, alpha = 0.7, color=&quot;#1a1a1a&quot;, fill=&quot;cyan4&quot;) + xlab(&quot;Gradiente ambiental (PC1)&quot;) + ylab(&quot;Riqueza de ácaros&quot;) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12))+ tema_livro() g_acari_axi2 &lt;-pred.vars %&gt;% ggplot(aes(x = Axis.2, y = riqueza)) + theme_bw() + geom_smooth(method = lm, fill = &quot;#525252&quot;, color = &quot;black&quot;) + geom_point(size=4, shape=21, alpha = 0.7, color=&quot;#1a1a1a&quot;, fill=&quot;darkorange&quot;) + xlab(&quot;Gradiente ambiental (PC2)&quot;) + ylab(&quot;Riqueza de ácaros&quot;) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12))+ tema_livro() ## Função para combinar os dois plots em uma única janela grid.arrange(g_acari_axi1, g_acari_axi2, nrow=1) 9.7 Ordenação restrita A ordenação restrita, ou análise de gradiente direto organiza os objetos de acordo com suas relações com outras variáveis (preditoras) coletadas nas mesmas unidades amostrais. O exemplo mais comum na ecologia é de investigar a relação entre diversas variáveis ambientais (matriz X) coletadas em n localidades e a abundância (ou presença ausência) de y espécies coletadas nas mesmas localidades (matrix Y). Com frequência, outras dados são utilizados como as coordenadas geográficas das unidades amostrais (matriz W), os atributos funcionais das espécies coletadas (matriz T) e a relação filogenética dessas espécies (matriz P). Diversos métodos são utilizados para combinar duas ou mais matrizes, mas neste capítulo iremos apresentar a RDA, RDAp e métodos espaciais para incluir a matriz W nas análises de gradiente direto. 9.7.1 RDA: Análise de Redundância A RDA é uma análise semelhante a regressão múltipla (cap7?) mas que usa dados multivariados como variável dependente. As duas matrizes comuns, matriz X (n unidades amostraits e m variáveis) e matriz Y (n unidades amostrais e p descritores - geralmente, espécies). O primeiro passo da RDA é centralizar (assim como na PCA, exemplo acima) as matrizes X e Y. Após a centralização, realiza-se regressões lineares entre X e Y para obter os valores preditos de Y (ou seja, os valores de Y que representação uma combinação linear com X). O passo seguinte é realizar uma PCA dos valores preditos de Y. Este último procedimento gera os autovalores, autovetores e os eixos canônicos que correspondem às coordenadas dos objetos (unidades amostrais), variáveis preditoras e das variáveis resposta. A diferença da ordenação do valor de Y predito e da ordenação somente de Y (como na PCA implementada acima) é que a segunda mostra a posição prevista pela relação linear entre X e Y. Logo, essa é exatamente o motivo da ordenação ser conhecida como restrita, pois a variação em Y é restrita (linearmente) pela variação de X. Assim como na regressão múltipla, a estatística da RDA é representada pelo valor de R2 e F. O valor de R2 indica a força da relação linear entre X e Y e o valor do F representa o teste global de significância. Além disso, é possível testar a significância de cada um dos eixos da ordenação (e a presença de pelo menos um eixo significativo é pré-requisito para que exista a relação linear entre X e Y) e de cada uma das variáveis preditoras da matriz X. Checklist Variáveis preditoras: importante verificar (1) a estrutura de correlação das variáveis ambientais, e a (2) presença de autocorrelação espacial. Composição de espécies como matriz Y: fundamental observar se os valores utilizados representam abundância ou presença-ausência e qual a necessidade de padronização (e.g., Hellinger). Assim como em modelos de regressão linear e múltipla, os valores de R2 ajustado devem ser selecionados ao invés do valor de R2. 9.7.1.1 Exemplo 1 Espécies de aves que ocorrem em localidades com diferentes altitudes. Pergunta: O clima e a altitude modificam a composição de espécies de aves? Predições Diferenças climáticas (temperatura e chuva) e altitudinais alteram a composição de espécies de aves. Variáveis (mesmo conjunto de dados usados na PERMANOVA) Preditoras: Temperatura e chuva (contínuas) e altitude (categórica com três níveis) Dependente: composição de espécies de aves ## Passo 1: transformação de hellinger da matriz de espécies # caso tenha dados de abundância. species.hel &lt;- decostand(species, &quot;hellinger&quot;) ## Passo 2: selecionar variáveis importantes. # Para isso, é necessário remover a variável categórica. env.contin &lt;- env[,-8] ## Evite usar variáveis muito correlacionadas sel.vars &lt;- forward.sel(species.hel, env.contin) #&gt; Testing variable 1 #&gt; Testing variable 2 #&gt; Testing variable 3 #&gt; Procedure stopped (alpha criteria): pvalue for variable 3 is 0.219000 (&gt; 0.050000) sel.vars$variables #&gt; [1] &quot;rain.jul&quot; &quot;maxi.jul&quot; env.sel &lt;- env[,sel.vars$variables] ## Passo 3: padronizar matriz ambiental (somente variáveis contínuas) env.pad &lt;- decostand(env.sel, &quot;standardize&quot;) ## Matriz final com variáveis preditoras env.pad.cat &lt;- data.frame(env.pad, altitude = env$altitude) Depois de selecionar um subconjunto dos dados com o método Forward Selection e padronizá-los (média 0 e desvio padrão 1), o modelo da RDA é construído como modelos lineares e PERMANOVA. ## RDA com dados selecionados e padronizados rda.bird &lt;- rda(species.hel~rain.jul+maxi.jul+altitude, data=env.pad.cat) # Para interpretar, é necessário saber a significância dos eixos para representar a relação entre as variáveis preditoras e a composição de espécies res.axis &lt;- anova.cca(rda.bird, by=&quot;axis&quot;) res.axis #&gt; Permutation test for rda under reduced model #&gt; Forward tests for axes #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Model: rda(formula = species.hel ~ rain.jul + maxi.jul + altitude, data = env.pad.cat) #&gt; Df Variance F Pr(&gt;F) #&gt; RDA1 1 0.045759 12.0225 0.001 *** #&gt; RDA2 1 0.009992 2.6252 0.062 . #&gt; RDA3 1 0.007518 1.9752 0.133 #&gt; RDA4 1 0.003582 0.9410 0.471 #&gt; Residual 18 0.068510 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Em seguida, é possível identificar quais são as variáveis que contribuem ou que mais contribuem para a variação na composição de espécies res.var &lt;- anova.cca(rda.bird, by=&quot;term&quot;) ## Qual variável? res.var #&gt; Permutation test for rda under reduced model #&gt; Terms added sequentially (first to last) #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Model: rda(formula = species.hel ~ rain.jul + maxi.jul + altitude, data = env.pad.cat) #&gt; Df Variance F Pr(&gt;F) #&gt; rain.jul 1 0.036514 9.5936 0.001 *** #&gt; maxi.jul 1 0.011264 2.9596 0.016 * #&gt; altitude 2 0.019071 2.5053 0.010 ** #&gt; Residual 18 0.068510 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Além disso, é possível obter o valor do R2 do modelo r_quadr &lt;- RsquareAdj(rda.bird) r_quadr #&gt; $r.squared #&gt; [1] 0.4938685 #&gt; #&gt; $adj.r.squared #&gt; [1] 0.3813949 # Ordenação multi-escala (MSO) para entender os resultados da ordenação em relação à distância geográfica bird.rda &lt;- mso(rda.bird, xy, grain = 1, permutations = 99) msoplot(bird.rda) #&gt; Error variance of regression model underestimated by -2 percent ## Triplot da RDA ggord(rda.bird, ptslab = TRUE, size = 1, addsize = 3, parse = TRUE) + theme_bw() + geom_hline(yintercept = 0, linetype=2) + geom_vline(xintercept = 0, linetype=2) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12))+ tema_livro() 9.7.1.2 Interpretação dos resultados Os objetos res.axis, res.var e r_quadr mostram, respectivamente, (i) as dimensões (RDA1, RDA2, etc.) que possuem variação na composição de espécies, (ii) as variáveis preditoras que explicam esta variação, e (iii) o valor do R2 ajustado. Neste exemplo, podemos observar que somente a dimensão 1 (RDA1) representa uma variação significativa da composição de espécies (P = 0,001). As variáveis rain.jul, maxi.jul e altitude foram todas preditoras importantes da composição de espécies, mas rain.jul se destacada com maior valor de F. Além disso, o valor do R2 ajustado de 0.381 indica forte contribuição dessas variáveis preditoras. Porém, uma das limitações desta análise é não considerar que tanto espécies quanto variáveis preditoras podem estar estruturadas espacialmente. Como resultado, os resíduos da análises podem apresentar autocorrelação espacial que, por sua vez, aumenta o erro do tipo I (P. Legendre and Legendre 2012a). A figura obtida com o comando msoplot(bird.rda) demonstra que existe autocorrelação espacial em algumas distâncias da análise. Veja abaixo algumas alternativas para resíduos com autocorrelação espacial. 9.7.2 RDAp: Análise de Redundância parcial Um dos problemas da abordagem anterior é que tanto a composição de espécies como as variáveis ambientais estão estruturadas espacialmente. Talvez mais importantes, para que os valores de probabilidade da RDA sejam interpretados corretamente (e para evitar erro do tipo I), os resíduos do modelo não devem estar correlacionados espacialmente, como demonstrado com a análise MSO. Uma alternativa é de incluir a matriz de dados espaciais (matrix W) como valor condicional dentro da RDA. Esta análise é conhecida como RDA parcial. Porém, a obtenção dos dados espaciais da matriz W é mais complexo do que simplesmente incluir dados de localização geográfica (latitude e longitude), como feito em alguns modelos lineares (gls, (cap7?)). Existem diversas ferramentas que descrevem e incorporam o componente espacial em métodos mulitidimensionais, mas os Mapas de autovetores de Moran (MEM) são certamente os mais utilizados (Dray et al. 2012). A análise MEM consiste na ordenação (PCoA) de uma matriz truncada obtida através da localização geográfica das localidades utilizando distância euclidiana, matriz de conectividade e matriz espacial ponderada. Os autovalores obtidos no MEM são idênticos aos coeficientes de correlação espacial de Moran I. Um procedimento chave desta análise é a definição de um limiar de trucamento (do inglês truncate threshold). Este limiar é calculado a partir de uma “árvore de espaço mínimo” (MST, do inglês minimum spanning tree) que conecta todos os pontos de coleta. Na prática, os valores menores do que o limiar definido pela MST indicam que os pontos com aqueles valores estão conectados e, assim possuem correlação positiva. Outro ponto importante desta análise é a obtenção da matriz espacial ponderada (SWM, do inglês spatial weighthing matrix). A seleção da matriz SWM é parte essencial do cálculo dos MEM e não deve ser feita arbitratiamente (Bauman, Drouet, Fortin, et al. 2018). Por este motivo a análise recebe este nome (P. Legendre and Legendre 2012a). Finalmente, o método produz autovetores que representam preditores espaciais que podem ser utilizados na RDA parcial (e outras análises). É importante ressaltar que o critério de seleção do número de autovetores é bastante debatido na literatura e, para isso, sugerimos a leitura dos seguintes artigos Bauman, Drouet, Dray, et al. (2018). Então, o primeiro passo para realizar uma RDA parcial é de gerar os autovetores espaciais (MEMs). ## Dados # matriz padronizada de composição de espécies. head(species.hel)[,1:6] #&gt; Fauvette_orphee Fauvette_des_jardins Fauvette_a_tete_noire Fauvette_babillarde Fauvette_grisette #&gt; S01 0 0.3651484 0.3651484 0.2581989 0.2581989 #&gt; S02 0 0.3333333 0.3333333 0.2357023 0.2357023 #&gt; S03 0 0.3162278 0.3162278 0.3162278 0.2236068 #&gt; S04 0 0.4200840 0.3429972 0.2425356 0.0000000 #&gt; S05 0 0.3872983 0.3162278 0.2236068 0.3162278 #&gt; S06 0 0.3779645 0.3779645 0.2672612 0.0000000 #&gt; Fauvette_pitchou #&gt; S01 0 #&gt; S02 0 #&gt; S03 0 #&gt; S04 0 #&gt; S05 0 #&gt; S06 0 # latitude e longitude. head(xy) #&gt; x y #&gt; S01 156 252 #&gt; S02 141 217 #&gt; S03 171 233 #&gt; S04 178 215 #&gt; S05 123 189 #&gt; S06 154 195 # dados ambientais padronizados e altitude head(env.pad.cat) #&gt; rain.jul maxi.jul altitude #&gt; S01 1.333646 0.1462557 Montanhoso #&gt; S02 1.468827 -0.6848206 Intermediário #&gt; S03 1.505694 -0.2099199 Montanhoso #&gt; S04 1.296778 -2.0699476 Montanhoso #&gt; S05 1.075572 -0.3682201 Plano #&gt; S06 1.100151 -0.6056705 Intermediário # Passo 1: Gerar um arquivo LIST W: list binária de vizinhança mat_knn &lt;- knearneigh(as.matrix(xy), k=2, longlat = FALSE) mat_nb &lt;- knn2nb(mat_knn, sym=TRUE) mat_listw &lt;- nb2listw(mat_nb, style = &quot;W&quot;) mat_listw #&gt; Characteristics of weights list object: #&gt; Neighbour list object: #&gt; Number of regions: 23 #&gt; Number of nonzero links: 58 #&gt; Percentage nonzero weights: 10.96408 #&gt; Average number of links: 2.521739 #&gt; #&gt; Weights style: W #&gt; Weights constants summary: #&gt; n nn S0 S1 S2 #&gt; W 23 529 23 18.84444 96.01111 # Passo 2: Listar os métodos &quot;candidatos&quot; para obter a matriz SWM MEM_mat &lt;- scores.listw(mat_listw, MEM.autocor = &quot;positive&quot;) candidates &lt;- listw.candidates(xy, nb = c(&quot;gab&quot;, &quot;mst&quot;, &quot;dnear&quot;), weights = c(&quot;binary&quot;, &quot;flin&quot;)) # Passo 3: Selecionar a melhor matriz SWM e executar o MEM W_sel_mat &lt;- listw.select(species.hel, candidates, MEM.autocor = &quot;positive&quot;, p.adjust = TRUE, method = &quot;FWD&quot;) #&gt; Procedure stopped (alpha criteria): pvalue for variable 5 is 0.088000 (&gt; 0.050000) #&gt; Procedure stopped (alpha criteria): pvalue for variable 3 is 0.064000 (&gt; 0.050000) #&gt; Procedure stopped (alpha criteria): pvalue for variable 3 is 0.061000 (&gt; 0.050000) #&gt; Procedure stopped (alpha criteria): pvalue for variable 4 is 0.159000 (&gt; 0.050000) # Passo 4: Matriz dos preditores espaciais escolhidos (MEMs) spatial.pred &lt;- as.data.frame(W_sel_mat$best$MEM.select) # necessário atribuir os nomes das linhas rownames(spatial.pred) &lt;- rownames(xy) Depois de gerar os valores dos autovetores espaciais (MEM), é possível executar a a RDA parcial utilizando esses valores no argumento ‘Conditional.’ ## Combinar variáveis ambientais e espaciais em um único data.frame pred.vars &lt;- data.frame(env.pad.cat, spatial.pred) ## RDA parcial rda.p &lt;- rda(species.hel ~ rain.jul + maxi.jul + altitude + # Preditores ambientais Condition(MEM1+MEM2+MEM4+MEM5), # Preditores espaciais data = pred.vars) # Para interpretar, é necessário saber a significância dos eixos para representar a relação entre as variáveis preditoras e a composição de espécies res.p.axis &lt;- anova.cca(rda.p, by=&quot;axis&quot;) res.p.axis #&gt; Permutation test for rda under reduced model #&gt; Forward tests for axes #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Model: rda(formula = species.hel ~ rain.jul + maxi.jul + altitude + Condition(MEM1 + MEM2 + MEM4 + MEM5), data = pred.vars) #&gt; Df Variance F Pr(&gt;F) #&gt; RDA1 1 0.008471 2.1376 0.312 #&gt; RDA2 1 0.004830 1.2189 0.782 #&gt; RDA3 1 0.003240 0.8176 0.892 #&gt; RDA4 1 0.001891 0.4773 0.902 #&gt; Residual 14 0.055477 # Em seguida, é possível identificar quais são as variáveis que contribuem ou que mais contribuem para a variação na composição de espécies res.p.var &lt;- anova.cca(rda.p, by=&quot;term&quot;) ## Qual variável? res.p.var #&gt; Permutation test for rda under reduced model #&gt; Terms added sequentially (first to last) #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Model: rda(formula = species.hel ~ rain.jul + maxi.jul + altitude + Condition(MEM1 + MEM2 + MEM4 + MEM5), data = pred.vars) #&gt; Df Variance F Pr(&gt;F) #&gt; rain.jul 1 0.004406 1.1119 0.340 #&gt; maxi.jul 1 0.004446 1.1220 0.337 #&gt; altitude 2 0.009579 1.2087 0.238 #&gt; Residual 14 0.055477 RsquareAdj(rda.p) #&gt; $r.squared #&gt; [1] 0.1361661 #&gt; #&gt; $adj.r.squared #&gt; [1] 0.02330319 Se você comparar os resultados do objeto res.p.var (RDA parcial) com res.var (RDA simples) é possível perceber como a estrutura espacial nos resíduos aumenta a probabilidade de cometer erro do tipo 1. O modelo da RDA parcial mostra que não existem qualquer efeito direto das variáveis ambientais sobre a composição de espécies (conclusão com a RDA simples). Na verdade, tanto a composição de espécies quanto as variáveis climáticas estão fortemente estruturadas no espaço, como demonstramos a seguir: ## Padrão espacial na composição de espécies pca.comp &lt;- dudi.pca(species.hel, scale = FALSE, scannf = FALSE) moran.comp &lt;- moran.mc(pca.comp$li[, 1], mat_listw, 999) ## Padrão espacial das variáveis ambientais env$altitude &lt;- as.factor(env$altitude) ca.env &lt;- dudi.hillsmith(env, scannf = FALSE) moran.env &lt;- moran.mc(ca.env$li[, 1], mat_listw, 999) ## Estrutura espacial na composição de espécies? moran.comp #&gt; #&gt; Monte-Carlo simulation of Moran I #&gt; #&gt; data: pca.comp$li[, 1] #&gt; weights: mat_listw #&gt; number of simulations + 1: 1000 #&gt; #&gt; statistic = 0.62815, observed rank = 1000, p-value = 0.001 #&gt; alternative hypothesis: greater ## Estrutura espacial na variação ambiental? moran.env #&gt; #&gt; Monte-Carlo simulation of Moran I #&gt; #&gt; data: ca.env$li[, 1] #&gt; weights: mat_listw #&gt; number of simulations + 1: 1000 #&gt; #&gt; statistic = 0.72714, observed rank = 1000, p-value = 0.001 #&gt; alternative hypothesis: greater Como resultado, é possível que a variação ambiental espacialmente estruturada é o principal efeito sobre a composição de espécies. Uma maneira de visualizar a contribuição relativa de diferentes matrizes (ambiental e espacial, por exemplo) é utilizar o método de partição de variância. O resultado deste modelo indica que, de fato, não existe efeito direto das variáveis ambientais e sim do componente representado pela autocorrelação espacial dessas variáveis. ### Partição de variância pv.birds &lt;- varpart(species.hel, env.pad.cat, spatial.pred) plot(pv.birds) 9.8 PERMANOVA A PERMANOVA é um acrônimo, em inglês, de permutational multivariate analysis of variance, análise proposta por Anderson (Marti J. Anderson 2001). A PERMANOVA é usada para testar hipóteses multivariadas que comparam a abundância de diferentes espécies em resposta a diferentes tratamentos ou gradientes ambientais. Esta análise foi desenvolvida como forma de solucionar algumas limitações da tradicional ANOVA multivariada (MANOVA). Em especial, o pressuposto da MANOVA de distribuição normal multivariada é raramente encontrado em dados ecológicos. O primeiro passo da PERMANOVA é selecionar uma medida de distância apropriada aos dados e, além disso, verificar a necessidade de padronização ou transformação dos dados. Em seguida, as distâncias são comparadas entre os grupos de interesse (por exemplo, tratamento vs. controle) usando a estatística F de maneira muito parecida com uma ANOVA (cap7?), chamada de pseudo-F: \\[ F = (SSa / SSr)*[(N-g) / (g-1)] \\] onde SSa representa a soma dos quadrados entre grupos, SSr a soma de quadrados dentro do grupo (residual), N o número de unidades amostrais e g os grupos (ou níveis da variável categórica). Esta fórmula do pseudo-F é específica para desenho experimental com um fator. Outros desenhos mais complexos são apresetandos em Anderson [(2001); (2017). O cálculo do valor de probilidade é realizado por métodos de permutação que são discutidos em Anderson &amp; Ter Braak (2003). 9.8.0.1 Exemplo 1 Espécies de aves que ocorrem em localidades com diferentes altitudes. Pergunta O clima e a altitude modificam a composição de espécies de aves? Predições Diferenças climáticas (temperatura e chuva) e altitudinais alteram a composição de espécies de aves. Variáveis Preditoras: Temperatura e chuva (contínuas) e altitude (categórica com três níveis) Dependente: composição de espécies de aves # Composição de espécies padronizar com método de Hellinger species.hel &lt;- decostand(species, &quot;hellinger&quot;) # Matriz de distância com método Bray Curtis sps.dis &lt;- vegdist(species.hel, &quot;bray&quot;) Para reduzir o número de variáveis no modelo, você pode considerar duas abordangens. A primeira, e mais importante delas, é manter somente variáveis preditoras que você tenha razão biológica para mantê-la e, além disso, que esteja relacionada com suas hipóteses. Assim, uma vez que você já removeu variáveis que não tem relevância biológica, você deve usar diferentes métodos para remover as variáveis muito correlacionadas (forward selection, Variance Inflation Factor (VIF), entre outros). Neste exemplo, vamos simplesmente fazer uma correlação múltipla e remover as variáveis com correlação maior do que 0.9 ou -0.9. A função ggpairs mostra um gráfico bem didático para representa a relação entre todas as variáveis e o valor (r) desta correlação. ## Verifica correlação entre as variáveis ggpairs(env) # Após verificar a estrutura de correlação, vamos manter somente três #variáveis env2 &lt;- env[,c(&quot;mini.jan&quot;, &quot;rain.tot&quot;, &quot;altitude&quot;)] Após selecionar as variáveis do modelo, vamos executar a PERMANOVA e entender as principais etapas para interpretar corretamente o teste. A função adonis do pacote vegan é a melhor opção no vegan. Porém, é importante referir o programa PRIMER e PERMANOVA+ como ótima opção para implementar a PERMANOVA e ter maior controle em desenhos complexos (M. J. Anderson, Gorley, and Clarke 2008). Assim como nos modelos lineares apresentados no (cap7?), os argumento seguem o mesmo formato, com variável dependente separada por um “~” das variáveis preditoras. Porém, alguns autores demonstraram que a PERMANOVA (assim como Mantel e ANOSIM) não pode identificar se diferenças significativas do teste (usando a estatística pseudo-F) se devem a diferenças no posição, na dispersão ou ambos. Ou seja, ao comparar grupos não é possível identificar se existe mudanças de composição (posição) ou a variação da composição de espécies dentro de um grupo (dispersão) é maior do que a variação dentro do outro grupo (Marti J. Anderson and Walsh 2013). Para solucionar este problema, é possível combinar a PERMANOVA com a análise PERMDISP (ou BETADISPER, como chamado no pacote vegan). Esta análise permite comparar se existe heterogeneidade nas variâncias entre grupos. Deste modo, a presença de heterogeneidade de variâncias (valor do BETADISPER significativo), é possível saber que as diferenças entre os grupos ocorre principalmente por diferenças na dispersão e não, necessariamente, de posição. Mais detalhes sobre a relevância de combinar essas duas análises estão disponíveis em Anderson &amp; Walsh (2013). perm.aves &lt;- adonis2(sps.dis ~ mini.jan + rain.tot + altitude, data = env2) perm.aves ### Diferenças entre os tratamentos? #&gt; Permutation test for adonis under reduced model #&gt; Terms added sequentially (first to last) #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; adonis2(formula = sps.dis ~ mini.jan + rain.tot + altitude, data = env2) #&gt; Df SumOfSqs R2 F Pr(&gt;F) #&gt; mini.jan 1 0.09069 0.15997 6.3307 0.001 *** #&gt; rain.tot 1 0.12910 0.22771 9.0118 0.001 *** #&gt; altitude 2 0.08929 0.15749 3.1163 0.021 * #&gt; Residual 18 0.25787 0.45483 #&gt; Total 22 0.56695 1.00000 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 betad.aves &lt;-betadisper(sps.dis, env2$altitude) permutest(betad.aves) #&gt; #&gt; Permutation test for homogeneity of multivariate dispersions #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Response: Distances #&gt; Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) #&gt; Groups 2 0.0042643 0.0021322 1.4672 999 0.247 #&gt; Residuals 20 0.0290636 0.0014532 Em nosso exemplo, temperatura, chuva e altitude afetaram a variação na composição de espécies. Porém, para identificar se as diferenças de composição entre os níveis da variável altitude, é necessário interpretar os resultados da análise BETADISPER. O comando permutest(betad.aves) mostra que o valor de probabilidade da análise foi de 0.253, ou seja, a hipótese nula de que a variância entre grupos é homogênea é aceita. Assim, não existe diferenças na dispersão entre grupo, sugerindo que a diferença encontrada na PERMANOVA (objeto perm.aves) se deve, em parte, a mudança na composição de espécies de aves entre diferentes altitudes (R2 = 0.135). Além disso, a chuva (R2 = 0.183) e temperatura (R2 = 0.127) foram fatores importantes na variação da composição de espécies. Como falado anteriormente, as análises de ordenação irrestritas (PCA, PCoA, nMDS) são utilizadas para explorar dados. Uma maneira poderosa de usá-las é combinando com análises que testam hipóteses, como PERMANOVA e RDA (abaixo). A literatura ecológica tem usado a análise de escalonamento não métrico (nMDS) combinado com análises multidimensionais de variância (como a PERMANOVA) para visualização da similaridade na composição de espécies dentro e entre grupos. A seguir, implementamos o nMDS na matriz de composição de espécies de ácaros. # Matriz de distância representando a variação na composição de espécies (método Bray-Curtis) as.matrix(sps.dis)[1:6, 1:6] #&gt; S01 S02 S03 S04 S05 S06 #&gt; S01 0.0000000 0.15133734 0.16720405 0.2559122 0.2559882 0.2588892 #&gt; S02 0.1513373 0.00000000 0.04114702 0.1190172 0.1289682 0.1391056 #&gt; S03 0.1672040 0.04114702 0.00000000 0.1420233 0.1358127 0.1410867 #&gt; S04 0.2559122 0.11901720 0.14202325 0.0000000 0.1140283 0.1199803 #&gt; S05 0.2559882 0.12896823 0.13581271 0.1140283 0.0000000 0.2129054 #&gt; S06 0.2588892 0.13910558 0.14108668 0.1199803 0.2129054 0.0000000 # É preciso calcular uma primeira &quot;melhor&quot; solução do nMDS sol1 &lt;- metaMDS(sps.dis) #&gt; Run 0 stress 0.1344042 #&gt; Run 1 stress 0.1272417 #&gt; ... New best solution #&gt; ... Procrustes: rmse 0.0789082 max resid 0.3526074 #&gt; Run 2 stress 0.1344042 #&gt; Run 3 stress 0.1336481 #&gt; Run 4 stress 0.1344042 #&gt; Run 5 stress 0.1336481 #&gt; Run 6 stress 0.1336481 #&gt; Run 7 stress 0.1338432 #&gt; Run 8 stress 0.1338432 #&gt; Run 9 stress 0.1378506 #&gt; Run 10 stress 0.1336481 #&gt; Run 11 stress 0.1338433 #&gt; Run 12 stress 0.1338432 #&gt; Run 13 stress 0.1338432 #&gt; Run 14 stress 0.1336481 #&gt; Run 15 stress 0.1344042 #&gt; Run 16 stress 0.1600808 #&gt; Run 17 stress 0.1272418 #&gt; ... Procrustes: rmse 8.48708e-05 max resid 0.0003246819 #&gt; ... Similar to previous best #&gt; Run 18 stress 0.1344042 #&gt; Run 19 stress 0.1611279 #&gt; Run 20 stress 0.1336481 #&gt; *** Solution reached # Depois, executar a mesma função, mas utilizando uma &quot;melhor solução inicial&quot; para evitar resultdos subótimos no nMDS nmds.beta &lt;- metaMDS(sps.dis, previous.best = sol1) #&gt; Starting from 2-dimensional configuration #&gt; Run 0 stress 0.1272417 #&gt; Run 1 stress 0.1272418 #&gt; ... Procrustes: rmse 2.997893e-05 max resid 0.000115054 #&gt; ... Similar to previous best #&gt; Run 2 stress 0.1378506 #&gt; Run 3 stress 0.1336481 #&gt; Run 4 stress 0.1344042 #&gt; Run 5 stress 0.1344042 #&gt; Run 6 stress 0.1272417 #&gt; ... New best solution #&gt; ... Procrustes: rmse 3.864488e-06 max resid 1.312654e-05 #&gt; ... Similar to previous best #&gt; Run 7 stress 0.1600803 #&gt; Run 8 stress 0.1336481 #&gt; Run 9 stress 0.1272417 #&gt; ... Procrustes: rmse 2.636369e-06 max resid 7.540622e-06 #&gt; ... Similar to previous best #&gt; Run 10 stress 0.1272417 #&gt; ... Procrustes: rmse 2.44969e-05 max resid 9.417254e-05 #&gt; ... Similar to previous best #&gt; Run 11 stress 0.1336481 #&gt; Run 12 stress 0.1272417 #&gt; ... New best solution #&gt; ... Procrustes: rmse 4.828567e-06 max resid 1.820829e-05 #&gt; ... Similar to previous best #&gt; Run 13 stress 0.1344042 #&gt; Run 14 stress 0.1272417 #&gt; ... Procrustes: rmse 7.317335e-06 max resid 2.766948e-05 #&gt; ... Similar to previous best #&gt; Run 15 stress 0.3652494 #&gt; Run 16 stress 0.1659926 #&gt; Run 17 stress 0.1338432 #&gt; Run 18 stress 0.1336481 #&gt; Run 19 stress 0.1344042 #&gt; Run 20 stress 0.1272418 #&gt; ... Procrustes: rmse 2.223437e-05 max resid 8.504391e-05 #&gt; ... Similar to previous best #&gt; *** Solution reached # O stress é o valor mais importante para interpretar a qualidade da ordenação () nmds.beta$stress # valor ideal entre 0 e 0.2 #&gt; [1] 0.1272417 # Exportar os valores para fazer gráfico dat.graf &lt;- data.frame(vegan::scores(nmds.beta), altitude = env2$altitude) # Definir os grupos (&quot;HULL&quot;) para serem categorizados no gráfico grp.mon &lt;- dat.graf[dat.graf$altitude == &quot;Montanhoso&quot;, ][chull(dat.graf[dat.graf$altitude == &quot;Montanhoso&quot;, c(&quot;NMDS1&quot;, &quot;NMDS2&quot;)]), ] grp.int &lt;- dat.graf[dat.graf$altitude == &quot;Intermediário&quot;, ][chull(dat.graf[dat.graf$altitude == &quot;Intermediário&quot;, c(&quot;NMDS1&quot;, &quot;NMDS2&quot;)]), ] grp.pla &lt;- dat.graf[dat.graf$altitude == &quot;Plano&quot;, ][chull(dat.graf[dat.graf$altitude == &quot;Plano&quot;, c(&quot;NMDS1&quot;, &quot;NMDS2&quot;)]), ] ## Combinar dados dos grupos para cada Convex Hull hull.data &lt;- rbind(grp.mon, grp.int, grp.pla) head(hull.data) #&gt; NMDS1 NMDS2 altitude #&gt; S04 -0.10578360 -0.10682795 Montanhoso #&gt; S01 -0.25332377 0.04198598 Montanhoso #&gt; S11 -0.12504868 0.14477145 Montanhoso #&gt; S15 0.09166003 0.09857211 Montanhoso #&gt; S18 0.01968282 -0.12417413 Intermediário #&gt; S06 -0.16053934 -0.08924307 Intermediário # Gráfico combinado os escores do nMDS com polígonos dos valores por cada cota altitudinal dat.graf %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = altitude, shape = altitude)) + theme_bw() + geom_point(size=4, alpha=0.7) + geom_polygon(data = hull.data, aes(fill = altitude, group = altitude), alpha=0.3) + scale_color_manual(values=c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values=c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + xlab(&quot;NMDS1&quot;) + ylab(&quot;NMDS2&quot;) + theme(axis.title.x = element_text(size=14), axis.text.x = element_text(vjust=0.5, size=12), axis.title.y = element_text(size=14), axis.text.y = element_text(vjust=0.5, size=12), legend.position = &quot;top&quot;, legend.title = element_blank())+ tema_livro() 9.8.1 Para se aprofundar Agrupamento de espécies e locais baseado em modelos Numerical Ecology with R James &amp; McCulloch (1990) Legendre &amp; Legendre (2012) Referências "],["cap10.html", "Capítulo 10 Rarefação 10.1 Aspectos teóricos 10.2 Curva de rarefação baseada no indivíduo (individual-based) 10.3 Curva de rarefação baseada em amostras (sample-based) 10.4 Curva de rarefação coverage-based", " Capítulo 10 Rarefação Pré-requisitos do capítulo # Pacotes library(iNEXT) library(devtools) library(ecodados) library(ggplot2) library(vegan) library(nlme) library(dplyr) library(piecewiseSEM) ## Dados necessários data(&quot;mite&quot;) data(&quot;mite.xy&quot;) coord &lt;- mite.xy colnames(coord) &lt;- c(&quot;long&quot;, &quot;lat&quot;) data(&quot;mite.env&quot;) agua &lt;- mite.env[,2] dados_rarefacao &lt;- ecodados::rarefacao_morcegos rarefacao_repteis &lt;- ecodados::rarefacao_repteis rarefacao_anuros &lt;- ecodados::rarefacao_anuros dados_amostras &lt;- ecodados::morcegos_rarefacao_amostras 10.1 Aspectos teóricos Uma das grandes dificuldades na comparação da riqueza de espécies entre comunidades é decorrente da diferença no esforço amostral (e.g. diferença no número de indivíduos, discrepância na quantidade de unidades amostrais ou área amostrada) que inevitavelmente influenciará no número de espécies observadas (N. J. Gotelli and Chao 2013; Roswell, Dushoff, and Winfree 2021). O método de rarefação nos permite comparar o número de espécies entre comunidades quando o tamanho da amostra (e.g. número de unidades amostrais), o esforço amostral (e.g. tempo de amostragem) ou a abundância de indivíduos não são iguais. A rarefação calcula o número esperado de espécies em cada comunidade tendo como base comparativa um valor em que todas as amostras atinjam um tamanho padrão. Gotelli &amp; Colwell (2001) descrevem dois tipos de curvas de rarefação: i) baseada em indivíduos (individual-based) - as comparações são feitas considerando a abundância da comunidade padronizada pelo menor número de indivíduos; e ii) baseada na amostra (sampled-based) - as comparações são padronizadas pela comunidade com menor número de amostragens. O método foi formulado considerando a seguinte pergunta: Se considerarmos n indivíduos ou amostras (n &lt; N) para cada comunidade, quantas espécies registraríamos nas comunidades considerando o mesmo número de indivíduos ou amostras? Gotelli &amp; Colwell (2001) descrevem este método e discutem em detalhes as restrições sobre seu uso na ecologia: As amostras a serem comparadas devem ser consistentes do ponto de vista taxonômico, ou seja, todos os indivíduos devem pertencer ao mesmo grupo taxonômico; As comparações devem ser realizadas somente entre amostras com as mesmas técnicas de coleta. Por exemplo, não é recomendado comparar amostras onde a riqueza de espécies de anuros de uma amostra foi estimada utilizando armadilhas de interceptação e queda e a outra foi estimada por vocalizações em sítios de reprodução; Os tipos de hábitat onde as amostras são obtidas devem ser semelhantes; É um método para estimar a riqueza de espécies em uma amostra menor – não pode ser usado para extrapolar a riqueza para amostras maiores. 📝 Importante: Esta última restrição foi superada por Colwell et al. (2012) e Chao &amp; Jost (2012) que desenvolveram uma nova abordagem onde os dados podem ser interpolados (rarefeito) para amostras menores e extrapolados para amostras maiores. Além disso, Chao &amp; Jost (2012) propõem a curva de rarefação coverage-based que padroniza as amostras pela cobertura ou totalidade (completeness) da amostra ao invés do tamanho. As rarefações tradicionais apresentam limitações matemáticas que são superadas por essa nova abordagem (Anne Chao and Jost 2012). 10.2 Curva de rarefação baseada no indivíduo (individual-based) 10.2.0.1 Exemplo prático 1 - Morcegos Explicação dos dados Usaremos os dados de espécies de morcegos amostradas em três fragmentos florestais (Breviglieri 2008): i) Mata Ciliar do Córrego Talhadinho com 12 hectares; ii) Mata Ciliar do Córrego dos Tenentes com 10 hectares; e iii) Fazenda Experimental de Pindorama com 128 hectares. Pergunta: A riqueza de espécies de morcegos é maior na Fazenda Experimental do que nos fragmentos florestais menores? Predições O número de espécies será maior em fragmentos florestais maiores. Variáveis Variáveis resposta e preditoras Matriz ou dataframe com as abundâncias das espécies de morcegos (variável resposta) registradas nos três fragmentos florestais (variável preditora). Checklist Verificar se a sua matriz ou dataframe estão com as espécies nas linhas e os fragmentos florestais nas colunas Análise Vamos olhar os dados usando a função head head(dados_rarefacao) #&gt; MC_Tenentes MC_Talhadinho FF_Experimental #&gt; Chrotopterus_auritus 0 1 1 #&gt; Phyllostomus_hastatus 0 1 0 #&gt; Phyllostomus_discolor 0 2 2 #&gt; Artibeus_lituratus 17 26 26 #&gt; Artibeus_obscurus 1 4 6 #&gt; Artibeus_planirostris 34 72 52 Usaremos as funções do pacote iNEXT (iNterpolation e EXTrapolation) para o cálculo da rarefação. Esta função permite estimar a riqueza de espécies utilizando a família Hill-numbers (Hill 1973; explicação dos conceitos da família Hill-numbers está detalhada no @[cap12]). O argumento q refere-se a família Hill-numbers onde: 0 = riqueza de espécies; 1 = diversidade de Shannon; e 2 = diversidade de Simpson. # Datatype refere-se ao tipo de dados que você vai analisar (e.g. abundância, # incidência). # Endpoint refere-se ao valor máximo que você determina para a extrapolação. resultados_morcegos &lt;- iNEXT(dados_rarefacao, q = 0, datatype = &quot;abundance&quot;, endpoint = 800) Vamos visualizar os resultados. # type define o tipo de curva de rarefação: # 1 = curva de rarefação baseada no indivíduo ou amostra; # 2 = curva de representatividade da amostra; e # 3 = curva de rarefação baseada na representatividade (coverage-based). ggiNEXT(resultados_morcegos, type = 1) + labs(x = &quot;Número de indivíduos&quot;, y = &quot; Riqueza de espécies&quot;) + scale_linetype_discrete(labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) Interpretação dos resultados Foram registrados 166 indivíduos na MC_Tenentes, 413 na MC_Talhadinho e 223 na FF_Experimental. Lembrando, você não pode comparar a riqueza de espécies observada diretamente: 15 espécies na MC_Tenentes, 19 espécies na MC_Talhadinho, e 17 espécies no FF_Experimental. A comparação da riqueza de espécies entre as comunidades deve ser feita com base na riqueza de espécies rarefeita, que é calculada com base no número de indivíduos da comunidade com menor abundância (166 indivíduos). Olhando o gráfico é possível perceber que a riqueza de espécies de morcegos rarefeita não é diferente entre os três fragmentos florestais quando corrigimos o problema da diferença na abundância pela rarefação. A interpretação é feita com base no intervalo de confiança de 95%. As curvas serão diferentes quando os intervalos de confiança não se sobreporem (A. Chao et al. 2014). Percebam que esta abordagem, além da interpolação (rarefação), também realiza extrapolações que podem ser usadas para estimar o número de espécies caso o esforço de coleta fosse maior. Este é o assunto do nosso próximo capítulo.   10.2.0.2 Exemplo prático 2 - Anuros e Répteis Explicação dos dados Neste exemplo, iremos comparar o número de espécies de anuros e répteis (serpentes e lagartos) usando informações dos indivíduos depositados em coleções científicas e coletas de campo (da Silva et al. 2017). Pergunta: A riqueza de espécies estimada para uma mesma região é maior usando informações de coleções científicas do que informações de coletas de campo? Predições O número de espécies será maior em coleções científicas devido ao maior esforço amostral (i.e. maior variação temporal para depositar os indivíduos e maior número de pessoas contribuindo com coletas esporádicas). Variáveis Variáveis resposta e preditoras Matriz ou dataframe com as abundâncias das espécies de anuros e répteis (variável resposta) registradas em coleções científicas e coletas de campo (variável preditora). Checklist Verificar se a sua matriz ou dataframe estão com as espécies nas linhas e a fonte dos dados nas colunas. Análise Olhando os dados dos répteis. head(rarefacao_repteis) #&gt; Coleta.Campo Colecoes.Cientificas #&gt; Ameiva_ameiva 1 0 #&gt; Amphisbaena_mertensii 1 0 #&gt; Apostolepis_dimidiata 0 1 #&gt; Bothrops__itapetiningae 0 2 #&gt; Bothrops__pauloensis 0 1 #&gt; Bothrops_alternatus 0 1 Análise usando o pacote iNEXT. # Análise resultados_repteis &lt;- iNEXT(rarefacao_repteis, q = 0, datatype = &quot;abundance&quot;, endpoint = 200) # Visualizar os resultados. ggiNEXT(resultados_repteis, type = 1) + labs(x = &quot;Número de indivíduos&quot;, y = &quot; Riqueza de espécies&quot;) + scale_linetype_discrete(labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;)) Interpretação dos resultados - répteis Foram registradas oito espécies de répteis nas coletas de campo (40 indivíduos) e 28 espécies nas coleções científicas (77 indivíduos). Com base na rarefação, concluímos que a riqueza de espécies de répteis obtida nas coleções científicas (20,5) é 2,9 vezes maior do que a obtida em coletas de campo (7,05). Olhando os dados dos anuros head(rarefacao_anuros) #&gt; Coleta.Campo Colecoes.Cientificas #&gt; Chiasmocleis_albopunctata 15 0 #&gt; Dendropsophus_elianae 11 1 #&gt; Dendropsophus_jimi 15 2 #&gt; Dendropsophus_nanus 0 1 #&gt; Dendropsophus_minutus 24 0 #&gt; Dendropsophus_sanborni 0 1 Análise e visualização do gráfico. # Análise resultados_anuros &lt;- iNEXT(rarefacao_anuros, q = 0, datatype = &quot;abundance&quot;, endpoint = 800) # Visualizar os resultados. ggiNEXT(resultados_anuros, type = 1) + labs(x = &quot;Número de indivíduos&quot;, y = &quot; Riqueza de espécies&quot;) + scale_linetype_discrete(labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;cyan4&quot;)) Interpretação dos resultados - anuros Foram registradas 21 espécies de anuros nas coletas de campo (709 indivíduos) e 12 espécies nas coleções científicas (37 indivíduos). Com base na rarefação, concluímos que não há diferença entre a riqueza de espécies de anuros obtida em coletas de campo e coleções científicas. 10.3 Curva de rarefação baseada em amostras (sample-based) 10.3.0.1 Exemplo prático 3 - Morcegos Explicação dos dados Usaremos os mesmos dados de espécies de morcegos amostradas em três fragmentos florestais (Breviglieri 2008). Contudo, ao invés de padronizarmos a riqueza de espécies pela abundância, iremos padronizar pelo número de amostras. Variáveis Variáveis resposta e preditoras Lista de vetores. Cada vetor deve conter como primeira informação, o número total de amostras (variável preditora), seguido da frequência de ocorrência das espécies (i.e. número de amostras em que cada espécie foi registrada - variável resposta). Checklist Verificar se a sua lista está com o número total de amostras e a frequência de ocorrência das espécies. Análise Vamos olhar os dados. head(dados_amostras) #&gt; MC_Tenentes MC_Talhadinho FF_Experimental #&gt; amostras 12 20 12 #&gt; sp1 12 20 12 #&gt; sp2 12 19 10 #&gt; sp3 10 15 8 #&gt; sp4 8 10 8 #&gt; sp5 6 7 7 Vamos criar uma lista com as amostragens de cada comunidade e os comandos da análise. # Usamos [,] para excluir os NAs. Lembrando que valores antes da # vírgula representam as linhas e os posteriores representam as colunas. lista_rarefacao &lt;- list(Tenentes = dados_amostras[1:18,1], Talhadinho = dados_amostras[,2], Experimental = dados_amostras[1:16,3]) # Análise. res_rarefacao_amostras &lt;- iNEXT(lista_rarefacao, q = 0, datatype=&quot;incidence_freq&quot;) Visualizar os resultados. # Gráfico ggiNEXT(res_rarefacao_amostras , type = 1, color.var = &quot;site&quot;) + theme_bw(base_size = 18) + theme(legend.position = &quot;right&quot;) + labs(x = &quot;Número de amostras&quot;, y = &quot; Riqueza de espécies&quot;) + scale_linetype_discrete(name = &quot;Método&quot;, labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) Interpretação dos resultados Olhando o gráfico é possível perceber que a riqueza de espécies de morcegos rarefeita não é diferente entre os três fragmentos florestais quando corrigimos o problema da diferença no número de amostras. 10.4 Curva de rarefação coverage-based 10.4.0.1 Exemplo prático 4 - Morcegos Explicação dos dados Neste exemplo, usaremos os mesmos dados de espécies de morcegos amostradas em três fragmentos florestais (Breviglieri 2008). Análise Os comandos para a rarefação coverage-based são idênticos aos utilizados para o cálculo das curvas de rarefações baseadas nas abundâncias e amostras. Portanto, não repetiremos as linhas de comando aqui e utilizaremos os resultados já calculados para a visualização dos gráficos. Para isso, digitamos type = 3 que representa a curva de rarefação coverage-based. # Visualizar os resultados da rarefação *coverage-based*. ggiNEXT(res_rarefacao_amostras, type = 3, color.var = &quot;site&quot;) + theme_bw(base_size = 18) + theme(legend.position = &quot;right&quot;) + labs(x = &quot;Representatividade nas amostras&quot;, y = &quot;Riqueza de espécies&quot;) + scale_linetype_discrete(labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) + scale_fill_manual(values = c(&quot;darkorange&quot;, &quot;darkorchid&quot;, &quot;cyan4&quot;)) Interpretação dos resultados Coverage é uma medida que determina a proporção de amostras (sampled-based) ou do número de indivíduos (abundance-based) da comunidade que representa as espécies presentes na amostra. Um valor de coverage = 0,85 representa a riqueza estimada com base em 85% das amostragens ou da abundância da comunidade. No nosso exemplo, os valores de coverage foram acima de 0,93 indicando que precisamos de praticamente todas as amostras para estimar a riqueza observada em cada comunidade. Comparando as comunidades considerando o mesmo valor de coverage, 0,937 na comunidade Tenentes, identificamos que a riqueza de espécies de morcegos estimada na comunidade Experimental é menor do que a estimada para a comunidade de Talhadinho (não há sobreposição do intervalo de confiança). Percebam que usando a curva de rarefação coverage-based, a interpretação dos resultados foi diferente das observadas usando as curvas baseadas nos indivíduos ou amostras. Veja Chao &amp; Jost (2012) e Roswell et al. (2021) para explicações mais detalhadas sobre esta metodologia.   10.4.0.2 Exemplo prático 5 - Generalized Least Squares (GLS) Explicação dos dados Neste exemplo, iremos refazer o exercício do @{cap8} onde usamos Generalized Least Squares (GLS) para testar a relação da riqueza de ácaros com a quantidade de água no substrato. Contudo, ao invés de considerar a riqueza de espécies de ácaros observada como variável resposta, iremos utilizar a riqueza rarefeita para controlar o efeito da amostragem (i.e. diferentes abundâncias entre as comunidades). Os dados que usaremos estão disponíveis no pacote vegan e representam a composição de espécies de ácaros amostradas em 70 amostras. Pergunta: A riqueza rarefeita de espécies de ácaros é maior em comunidades localizadas em áreas com substratos secos? Predições O número de espécies rarefeita será maior em substratos secos, uma vez que as limitações fisiológicas impostas pela umidade limitam a ocorrência de várias espécies de ácaros. Variáveis Variáveis resposta e preditoras Matriz ou dataframe com as abundâncias das espécies de ácaros (variável resposta) registradas em 70 comunidades (variável preditora). Checklist Verificar se a sua matriz ou dataframe estão com as espécies nas linhas e as comunidades nas colunas. Análise Vamos calcular a riqueza rarefeita com base na comunidade com menor abundância. # Os dados estão com as comunidades nas colunas e as espécies nas linhas. # Para as análises teremos que transpor a planilha. composicao_acaros &lt;- t(mite) # Verificar qual é a menor abundância registrada nas comunidades. min(colSums(composicao_acaros)) #&gt; [1] 8 Vamos calcular a riqueza rarefeita de espécies para todas as comunidades considerando a menor abundância. Para padronizar e facilitar a extração dos resultados, definimos os argumentos knots (i.e. representa o intervalo igualmente espaçado que a função irá utilizar para determinar a riqueza estimada) e endpoint (i.e. o valor final de amostras ou abundância extrapolados) com o valor de abundância = 8. resultados_rarefacao &lt;- iNEXT(composicao_acaros, q = 0, datatype = &quot;abundance&quot;, knots = 8, endpoint = 8) Vamos criar um loop para facilitar a extração da riqueza rarefeita para as 70 comunidades. resultados_comunidades &lt;- data.frame() riqueza_rarefeita &lt;- c() for (i in 1:70){ resultados_comunidades &lt;- data.frame(resultados_rarefacao$iNextEst[i]) riqueza_rarefeita[i] &lt;- resultados_comunidades[8,4] } Vamos juntar esses resultados com os dados geográficos e ambientais. # Agrupando os dados em um dataframe final. dados_combinado &lt;- data.frame(riqueza_rarefeita, agua, coord) Agora, seguindo os passos descritos no @[cap8], vamos identificar o melhor modelo que representa a estrutura espacial dos dados da riqueza rarefeita. # Criando diferentes modelos usando a função gls. # sem estrutura espacial no_spat_gls &lt;- gls(riqueza_rarefeita ~ agua, data = dados_combinado, method = &quot;REML&quot;) # Covariância esférica espher_model &lt;- gls(riqueza_rarefeita ~ agua, data = dados_combinado, corSpher(form = ~lat + long, nugget = TRUE)) # Covariância exponencial expon_model &lt;- gls(riqueza_rarefeita ~ agua, data = dados_combinado, corExp(form = ~lat + long, nugget = TRUE)) # Covariância Gaussiana gauss_model &lt;- gls(riqueza_rarefeita ~ agua, data = dados_combinado, corGaus(form = ~lat + long, nugget = TRUE)) # Covariância razão quadrática ratio_model &lt;- gls(riqueza_rarefeita ~ agua, data = dados_combinado, corRatio(form = ~lat + long, nugget = TRUE)) Agora vamos usar o AIC para selecionar o modelo mais “provável” explicando a distribuição da riqueza rarefeita das espécies de ácaros. # Seleção dos modelos. aic_fit &lt;- AIC(no_spat_gls, espher_model, expon_model, gauss_model, ratio_model) aic_fit %&gt;% arrange(AIC) #&gt; df AIC #&gt; gauss_model 5 164.5840 #&gt; ratio_model 5 165.7649 #&gt; expon_model 5 165.8698 #&gt; no_spat_gls 3 166.7530 #&gt; espher_model 5 169.0242 # Visualizando os resíduos do modelo selecionado. plot(gauss_model) Percebam que os pontos estão dispersos no gráfico e não apresentam padrões que indiquem heterogeneidade de variância. # Visualizando os resultados. summary(gauss_model)$tTable #&gt; Value Std.Error t-value p-value #&gt; (Intercept) 6.086125990 0.2927633293 20.788553 3.550849e-31 #&gt; agua -0.003142615 0.0006670097 -4.711498 1.258304e-05 # Calculando o R-squared. rsquared(gauss_model) #&gt; Response family link method R.squared #&gt; 1 riqueza_rarefeita gaussian identity none 0.2991059 # Obtendo os valores preditos pelo modelo. predito &lt;- predict(gauss_model) # Plotando os resultados no gráfico. ggplot(data = dados_combinado, aes(x= agua, y= riqueza_rarefeita)) + labs(x = &quot;Concentração de água no substrato&quot;, y = &quot;Riqueza rarefeita \\ndas espécies de ácaros&quot;, size = 15) + geom_point(size = 4, shape = 21, fill = &quot;gray&quot;, alpha = 0.7) + tema_livro() + geom_line(aes(y = predito), size = 1) Interpretação dos resultados A concentração de água no substrato explica 29,9% da variação na riqueza rarefeita das espécies de ácaros. Como predito, a riqueza de espécies de ácaros foi maior em comunidades localizadas em áreas com substratos secos do que em áreas com substratos úmidos (t = -4.71, df = 68, P &lt; 0.01). 10.4.1 Para se aprofundar Recomendamos aos interessados que olhem a página do EstimateS software e baixem o manual do usuário que contém informações detalhadas sobre os índices de rarefação. Este site foi criado e é mantido pelo Dr. Robert K. Colwell, um dos maiores especialistas do mundo em estimativas da biodiversidade Recomendamos a página pessoal da pesquisadora Anne Chao que é uma das responsáveis pelo desenvolvimento da metodologia e do pacote iNEXT. Nesta página, vocês irão encontrar exemplos e explicações detalhadas sobre as análises. Recomendamos também o livro Biological Diversity Frontiers in Measurement and Assessment (Magurran and McGill 2011). Referências "],["cap11.html", "Capítulo 11 Estimadores de riqueza 11.1 Aspectos teóricos 11.2 Estimadores baseados na abundância das espécies 11.3 Estimadores baseados na incidência das espécies", " Capítulo 11 Estimadores de riqueza Pré-requisitos do capítulo # Carregando todos os pacotes que serão utilizados neste capítulo. library(iNEXT) library(devtools) # remotes::install_github(&quot;paternogbc/ecodados&quot;) library(ecodados) library(ggplot2) library(vegan) library(nlme) library(dplyr) library(piecewiseSEM) ## Dados necessários dados_coleta &lt;- poca_anuros data(&quot;mite&quot;) data(&quot;mite.xy&quot;) coord &lt;- mite.xy colnames(coord) &lt;- c(&quot;long&quot;, &quot;lat&quot;) # altera o nome das colunas data(&quot;mite.env&quot;) agua &lt;- mite.env[,2] # seleciona a variável de interesse 11.1 Aspectos teóricos Uma vez que determinar o número total de espécies numa área é praticamente impossível, principalmente em regiões com alta riqueza de espécies, os estimadores são úteis para extrapolar a riqueza observada e tentar estimar a riqueza total através de uma amostra incompleta de uma comunidade biológica (Walther and Moore 2005). Neste capítulo, serão considerados os estimadores não paramétricos que usam informações da frequência de espécies raras na comunidade (N. J. Gotelli and Chao 2013). Isto porque tanto os testes paramétricos que tentam determinar os parâmetros de uma curva usando o formato da curva de acumulação de espécies (e.g. equação logística, Michaelis-Menten), quanto os testes que usam a frequência do número de indivíduos para enquadrá-las em uma das distribuições de abundância das espécies (e.g. distribuições log-séries, log-normal) não funcionam muito bem com dados empíricos (N. J. Gotelli and Chao 2013). Para mais detalhes sobre os testes paramétricos veja (Magurran and McGill 2011) e Colwell &amp; Coddington (1994). Quatro características para um bom estimador de riqueza (Chazdon et al. 1998; Hortal, Borges, and Gaspar 2006): Independência do tamanho da amostra (quantidade de esforço amostral realizado); Insensibilidade a diferentes padrões de distribuições (e.g. agrupado, disperso ou aleatório); Insensibilidade em relação à ordem das amostragens; Insensibilidade à heterogeneidade entre as amostras usadas entre os estudos. 11.2 Estimadores baseados na abundância das espécies 11.2.1 CHAO 1 - (A. Chao 1984, 1987): Estimador simples do número absoluto de espécies em uma comunidade. É baseado no número de espécies raras dentro de uma amostra. \\[Chao_{1} = S_{obs} + \\left(\\frac{n-1}{n}\\right)\\frac{F_1(F_1-1)}{2(F_2+1)}\\] onde: Sobs = número de espécies observadas na comunidade, n = número de amostras, F1 = número de espécies observadas com abundância de um indivíduo (espécies singleton), F2 = número de espécies observadas com abundância de dois indivíduos (espécies doubletons). O valor de Chao 1 é máximo quando todas as espécies menos uma são únicas (singleton). Neste caso, a riqueza estimada é aproximadamente o dobro da riqueza observada. 11.2.1.1 Exemplo prático - Chao 1 Explicação dos dados Usaremos os dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Pergunta: Quantas espécies a mais poderiam ser amostradas caso aumentássemos até o infinito o esforço amostral? Predições O número de espécies estimadas é similar ao número de espécies observada; O número de espécies estimadas é maior do que o número de espécies observada. Variáveis Variáveis resposta e preditora data frame ou matriz com as abundâncias das espécies de anuros (variável resposta) registradas em 14 dias de amostragens (variável preditora) em um habitat reprodutivo. Checklist Verificar se a sua matriz está com as espécies nas colunas e as amostragens nas linhas. Verificar se os dados são de abundância e não de incidência (presença e ausência). Análise Vamos olhar os dados. head(poca_anuros) #&gt; Boana_albopunctata Boana_faber Boana_raniceps Dendropsophus_eliane Dendropsophus_melanargyrius #&gt; Dia_1 5 0 2 0 0 #&gt; Dia_2 0 0 0 0 0 #&gt; Dia_3 0 0 0 6 0 #&gt; Dia_4 0 0 0 15 0 #&gt; Dia_5 0 0 0 2 1 #&gt; Dia_6 1 0 0 2 0 #&gt; Dendropsophus_minutus Dendropsophus_nanus Dermatonotus_muelleri Elachistocleis_bicolor Elachistocleis_sp #&gt; Dia_1 0 4 0 0 0 #&gt; Dia_2 2 0 0 0 0 #&gt; Dia_3 1 3 0 0 0 #&gt; Dia_4 15 15 3 0 0 #&gt; Dia_5 8 2 12 0 0 #&gt; Dia_6 2 2 0 0 0 #&gt; Leptodactylus_chaquensis Leptodactylus_fuscus Leptodactylus_labyrinthicus Physalameus_cuvieri #&gt; Dia_1 0 8 0 5 #&gt; Dia_2 0 3 0 3 #&gt; Dia_3 0 2 0 4 #&gt; Dia_4 0 5 0 2 #&gt; Dia_5 11 4 0 2 #&gt; Dia_6 0 2 0 2 #&gt; Physalaemus_nattereri Rhinella_schneideri Scinax_fuscovarius #&gt; Dia_1 0 2 0 #&gt; Dia_2 4 1 0 #&gt; Dia_3 1 2 0 #&gt; Dia_4 0 2 0 #&gt; Dia_5 17 1 0 #&gt; Dia_6 0 1 0 Cálculo do estimador de riqueza - Chao 1. # Análise. est_chao1 &lt;- estaccumR(dados_coleta, permutations = 100) summary(est_chao1, display = &quot;chao&quot;) #&gt; $chao #&gt; N Chao 2.5% 97.5% Std.Dev #&gt; Dia_13 1 7.161667 3.000 12.33333 2.786019 #&gt; Dia_7 2 10.255429 6.000 18.81250 3.465467 #&gt; Dia_12 3 11.614500 7.475 19.52500 3.104127 #&gt; Dia_5 4 13.078167 9.000 20.00000 3.037566 #&gt; Dia_6 5 14.093333 9.000 22.00000 3.259457 #&gt; Dia_4 6 14.621667 10.000 22.00000 3.129084 #&gt; Dia_10 7 15.308333 10.475 22.00000 3.048741 #&gt; Dia_1 8 16.140000 12.000 22.00000 2.863106 #&gt; Dia_11 9 16.773333 12.000 22.00000 2.777931 #&gt; Dia_8 10 17.606667 13.000 22.00000 2.754093 #&gt; Dia_3 11 18.205000 13.000 22.00000 2.453708 #&gt; Dia_9 12 18.815000 14.975 22.00000 2.034618 #&gt; Dia_14 13 19.585000 15.500 22.00000 1.494189 #&gt; Dia_2 14 20.000000 20.000 20.00000 0.000000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;summary.poolaccum&quot; Percebam que a função retorna: N = número de amostragens; Chao = valor médio da estimativa do índice de Chao; 2.5% e 97.5% = intervalo de confiança de 95%; e Std.Dev = desvio padrão. Essas dados são obtidos usando permutações, sem reposição, que alteram a ordem das amostragens. Neste exemplo, usamos 100 permutações. Vamos visualizar os resultados com intervalo de confiança de 95%. # Preparando os dados para fazer o gráfico. resultados &lt;- summary(est_chao1, display = c(&quot;S&quot;, &quot;chao&quot;)) res_chao &lt;- cbind(resultados$chao[,1:4], resultados$S[,2:4]) res_chao &lt;- as.data.frame(res_chao) colnames(res_chao) &lt;- c(&quot;Amostras&quot;, &quot;Chao&quot;, &quot;C_inferior&quot;, &quot;C_superior&quot;, &quot;Riqueza&quot;, &quot;R_inferior&quot;, &quot;R_superior&quot;) # Comando para o gráfico. ggplot(res_chao, aes(y = Riqueza, x = Amostras)) + geom_point(aes(y = Chao, x = Amostras + 0.1), size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(aes(y = Riqueza, x = Amostras), size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_line (aes(y = Chao, x = Amostras), color = &quot;darkorange&quot;) + geom_line (aes(y = Riqueza, x = Amostras), color = &quot;cyan4&quot;) + geom_linerange(aes(ymin = C_inferior, ymax = C_superior, x = Amostras + 0.1), color = &quot;darkorange&quot;) + geom_linerange(aes(ymin = R_inferior, ymax = R_superior, x = Amostras), color = &quot;cyan4&quot;) + ylab (&quot;Riqueza estimada - Chao 1&quot;) + xlab (&quot;Número de amostras&quot;) + scale_x_continuous(limits = c(1,15), breaks=seq(1,15,1)) + geom_point(y= 7.5, x = 9, size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(y= 5.9, x = 9, size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_label( y = 7.5, x = 12, label = &quot;Riqueza estimada - Chao 1&quot;) + geom_label( y = 5.9, x = 11.3, label = &quot;Riqueza observada&quot;) + tema_livro() Interpretação dos resultados Com base no número de espécies raras (singletons e doubletons), o estimador Chao 1 indica a possibilidade de encontrarmos mais três espécies caso o esforço amostral fosse maior e não estima tendência de estabilização da curva em uma assíntota. 11.2.2 ACE - Abundance-based Coverage Estimador (A. Chao and Lee 1992; A. Chao et al. 2000): Este método trabalha com a abundância das espécies raras (i.e. abundância baixa). Entretanto, diferente do estimador anterior, esse método permite ao pesquisador determinar os limites para os quais uma espécie seja considerada rara. Em geral, são consideradas raras espécies com abundância entre 1 e 10 indivíduos. A riqueza estimada pode variar conforme se aumente ou diminua o limiar de abundância, e infelizmente não existem critérios biológicos definidos para a escolha do melhor intervalo. \\[ACE = S_{abund} + \\frac{S_{rare}}{C_{ace}} + \\frac{F_1}{C_{ace}}Y_{ace}^2\\] onde: \\[Y_{ace}^2 = max \\left[\\frac{S_{rare}}{C_{ace}}\\frac{\\sum_{i=i}^{10}i(i-1)F1}{(N_{rare})({N_{rare} - 1)}}-1,0\\right]\\] \\[C_{ace} = 1 - \\frac{F1}{N_{rare}}\\] \\[N_{rare} = \\sum_{i=1}^{10}iF_i\\] 11.2.2.1 Exemplo prático - ACE Explicação dos dados Usaremos os mesmos dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Análise Cálculo do estimador de riqueza - ACE. # Análise. est_ace &lt;- estaccumR(dados_coleta, permutations = 100) summary(est_ace, display = &quot;ace&quot;) #&gt; $ace #&gt; N ACE 2.5% 97.5% Std.Dev #&gt; Dia_11 1 7.123899 3.545190 13.71429 2.768212 #&gt; Dia_3 2 9.832864 6.000000 18.42880 2.876526 #&gt; Dia_2 3 11.395043 7.619618 18.01220 2.668935 #&gt; Dia_14 4 12.442264 8.000000 17.13587 2.398428 #&gt; Dia_7 5 13.512461 9.328990 19.24111 2.482220 #&gt; Dia_8 6 14.249301 10.179603 19.70014 2.608287 #&gt; Dia_6 7 15.272604 10.712067 21.68808 2.950251 #&gt; Dia_5 8 16.269161 11.419992 22.61582 3.000033 #&gt; Dia_12 9 17.584889 12.635634 24.20307 3.149600 #&gt; Dia_1 10 19.491955 13.410767 25.28994 3.732346 #&gt; Dia_13 11 21.058884 13.923335 25.72368 3.607014 #&gt; Dia_9 12 22.452802 15.911357 25.72368 3.249493 #&gt; Dia_4 13 23.796512 17.676471 25.72368 2.243847 #&gt; Dia_10 14 24.703704 24.703704 24.70370 0.000000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;summary.poolaccum&quot; Visualizar os resultados com intervalo de confiança de 95%. # Preparando os dados para fazer o gráfico. resultados_ace &lt;- summary(est_ace, display = c(&quot;S&quot;, &quot;ace&quot;)) res_ace &lt;- cbind(resultados_ace$ace[,1:4], resultados_ace$S[,2:4]) res_ace &lt;- as.data.frame(res_ace) colnames(res_ace) &lt;- c(&quot;Amostras&quot;, &quot;ACE&quot;, &quot;ACE_inferior&quot;, &quot;ACE_superior&quot;, &quot;Riqueza&quot;, &quot;R_inferior&quot;, &quot;R_superior&quot;) # Gráfico. ggplot(res_ace, aes(y = Riqueza, x = Amostras)) + geom_point(aes(y = ACE, x = Amostras + 0.1), size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(aes(y = Riqueza, x = Amostras), size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_line (aes(y = ACE, x = Amostras), color = &quot;darkorange&quot;) + geom_line (aes(y = Riqueza, x = Amostras), color = &quot;cyan4&quot;) + geom_linerange(aes(ymin = ACE_inferior, ymax = ACE_superior, x = Amostras + 0.1), color = &quot;darkorange&quot;) + geom_linerange(aes(ymin = R_inferior, ymax = R_superior, x = Amostras), color = &quot;cyan4&quot;) + ylab (&quot;Riqueza estimada - ACE&quot;) + xlab (&quot;Número de amostras&quot;) + scale_x_continuous(limits = c(1,15), breaks=seq(1,15,1)) + geom_point(y= 7.5, x = 9, size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(y= 5.9, x = 9, size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_label( y = 7.5, x = 11.7, label = &quot;Riqueza estimada - ACE&quot;) + geom_label( y = 5.9, x = 11.3, label = &quot;Riqueza observada&quot;) + tema_livro() Interpretação dos resultados Com base no número de espécies raras (abundância menor que 10 indivíduos - default), o estimador ACE indica a possibilidade de encontrarmos mais sete espécies caso o esforço amostral fosse maior e não estimou tendência de estabilização da curva em uma assíntota. 11.3 Estimadores baseados na incidência das espécies 11.3.1 CHAO 2 - (A. Chao 1987): De acordo com Anne Chao, o estimador Chao 1 pode ser modificado para uso com dados de presença/ausência levando em conta a distribuição das espécies entre amostras. Neste caso é necessário somente conhecer o número de espécies encontradas em somente uma amostra e o número de espécies encontradas exatamente em duas amostras. Essa variação ficou denominada como Chao 2: \\[Chao_{2} = S_{obs} + \\left(\\frac{m-1}{m}\\right)\\left(\\frac{Q_1(Q_1-1)}{2(Q_2 + 1}\\right)\\] onde: Sobs = o número de espécies observada na comunidade, m = número de amostras, Q1 = número de espécies observadas em uma amostra (espécies uniques), Q2 = número de espécies observadas em duas amostras (espécies duplicates). O valor de Chao2 é máximo quando as espécies menos uma são únicas (uniques). Neste caso, a riqueza estimada é aproximadamente o dobro da riqueza observada. Colwell &amp; Coddington (1994) encontraram que o valor de Chao 2 mostrou ser o estimador menos enviesado para amostras com tamanho pequeno. 📝 Importante: Vocês irão perceber que ao longo do capítulo as recomendações sobre qual é o melhor índice varia entre estudos (e.g. Palmer 1990; Walther and Moore 2005). 11.3.1.1 Exemplo prático - Chao 2 Explicação dos dados Usaremos os mesmos dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Análise Cálculo do estimador de riqueza - Chao 2. # Análise. est_chao2 &lt;- poolaccum(dados_coleta, permutations = 100) summary(est_chao2, display = &quot;chao&quot;) #&gt; $chao #&gt; N Chao 2.5% 97.5% Std.Dev #&gt; [1,] 3 14.31571 9.211111 24.35000 3.909186 #&gt; [2,] 4 15.12125 8.796875 26.50000 4.676977 #&gt; [3,] 5 17.18113 10.485000 34.12500 5.116710 #&gt; [4,] 6 18.40042 11.336806 34.50625 5.802968 #&gt; [5,] 7 20.06214 12.142857 34.00000 6.145670 #&gt; [6,] 8 21.28187 12.391927 38.11562 6.923969 #&gt; [7,] 9 22.60556 12.538889 36.82500 6.845149 #&gt; [8,] 10 25.94025 14.327500 42.20000 7.446691 #&gt; [9,] 11 27.58773 15.401136 39.27273 6.931535 #&gt; [10,] 12 29.55229 19.933333 39.45833 6.111500 #&gt; [11,] 13 31.51769 22.384615 39.61538 4.586452 #&gt; [12,] 14 33.71429 33.714286 33.71429 0.000000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;summary.poolaccum&quot; Visualizar os resultados com intervalo de confiança de 95%. # Preparando os dados para fazer o gráfico. resultados_chao2 &lt;- summary(est_chao2, display = c(&quot;S&quot;, &quot;chao&quot;)) res_chao2 &lt;- cbind(resultados_chao2$chao[,1:4], resultados_chao2$S[,2:4]) res_chao2 &lt;- as.data.frame(res_chao2) colnames(res_chao2) &lt;- c(&quot;Amostras&quot;, &quot;Chao2&quot;, &quot;C_inferior&quot;, &quot;C_superior&quot;, &quot;Riqueza&quot;, &quot;R_inferior&quot;, &quot;R_superior&quot;) # Gráfico ggplot(res_chao2, aes(y = Riqueza, x = Amostras)) + geom_point(aes(y = Chao2, x = Amostras + 0.1), size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(aes(y = Riqueza, x = Amostras), size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_line (aes(y = Chao2, x = Amostras), color = &quot;darkorange&quot;) + geom_line (aes(y = Riqueza, x = Amostras), color = &quot;cyan4&quot;) + geom_linerange(aes(ymin = C_inferior, ymax = C_superior, x = Amostras + 0.1), color = &quot;darkorange&quot;) + geom_linerange(aes(ymin = R_inferior, ymax = R_superior, x = Amostras), color = &quot;cyan4&quot;) + ylab (&quot;Riqueza estimada - Chao 2&quot;) + xlab (&quot;Número de amostras&quot;) + scale_x_continuous(limits = c(1,15), breaks=seq(1,15,1)) + geom_point(y= 9.8, x = 10, size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(y= 7.7, x = 10, size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_label( y = 9.8, x = 12.95, label = &quot;Riqueza estimada - Chao 2&quot;) + geom_label( y = 7.7, x = 12.3, label = &quot;Riqueza observada&quot;) + tema_livro() Interpretação dos resultados Com base no número de espécies raras (uniques e duplicates), Chao 2 estimou a possibilidade de encontrarmos mais dezesseis espécies caso o esforço amostral fosse maior e não estimou tendência de estabilização da curva em uma assíntota. 11.3.2 JACKKNIFE 1 (Burnham and Overton 1978, 1979): Este estimador baseia-se no número de espécies que ocorrem em somente uma amostra (Q1). \\[S_{jack1} = S_{obs} + Q_1\\left(\\frac{m - 1}{m}\\right)\\] onde: Sobs = o número de espécies observadas na comunidade, Q1 = número de espécies observadas em uma amostra (espécies uniques), m = número de amostras. Jackknife é um método de reamostragem (sem repetição) não paramétrico usado para estimar a riqueza de espécies e a variância associada com a estimativa. Para isso, o método: i) exclui uma amostra e contabiliza o valor da riqueza estimada usando a fórmula acima; ii) repete este processo n vezes até que todas as amostras tenham sido excluídas; e iii) estima a média e a variância da riqueza de espécie (Smith and van Belle 1984). Palmer (1990) verificou que Jackknife 1 foi o estimador mais preciso e menos enviesado comparado a outros métodos de extrapolação. 11.3.2.1 Exemplo prático - Jackknife 1 Explicação dos dados Usaremos os mesmos dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Análise Cálculo do estimador de riqueza - Jackknife 1. # Análise. est_jack1 &lt;- poolaccum(dados_coleta, permutations = 100) summary(est_jack1, display = &quot;jack1&quot;) #&gt; $jack1 #&gt; N Jackknife 1 2.5% 97.5% Std.Dev #&gt; [1,] 3 13.64667 8.333333 19.17500 2.798035 #&gt; [2,] 4 14.75000 9.750000 20.01250 2.788188 #&gt; [3,] 5 15.32800 9.800000 20.42000 2.780091 #&gt; [4,] 6 16.01500 11.229167 21.96250 2.802425 #&gt; [5,] 7 17.07714 12.782143 22.93214 2.575868 #&gt; [6,] 8 18.11625 14.165625 23.12500 2.536306 #&gt; [7,] 9 18.77778 14.719444 23.22222 2.609373 #&gt; [8,] 10 19.56100 14.800000 23.77250 2.586909 #&gt; [9,] 11 20.42455 16.727273 23.36364 2.190412 #&gt; [10,] 12 21.16000 17.185417 23.41667 1.863867 #&gt; [11,] 13 21.92846 18.692308 23.46154 1.335047 #&gt; [12,] 14 22.57143 22.571429 22.57143 0.000000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;summary.poolaccum&quot; Visualizar os resultados com 95% intervalo de confiança. # Preparando os dados para fazer o gráfico. resultados_jack1 &lt;- summary(est_jack1, display = c(&quot;S&quot;, &quot;jack1&quot;)) res_jack1 &lt;- cbind(resultados_jack1$jack1[,1:4], resultados_jack1$S[,2:4]) res_jack1 &lt;- as.data.frame(res_jack1) colnames(res_jack1) &lt;- c(&quot;Amostras&quot;, &quot;JACK1&quot;, &quot;JACK1_inferior&quot;, &quot;JACK1_superior&quot;, &quot;Riqueza&quot;, &quot;R_inferior&quot;, &quot;R_superior&quot;) # Comando para o gráfico. ggplot(res_jack1, aes(y = Riqueza, x = Amostras)) + geom_point(aes(y = JACK1, x = Amostras + 0.1), size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(aes(y = Riqueza, x = Amostras), size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_line (aes(y = JACK1, x = Amostras), color = &quot;darkorange&quot;) + geom_line (aes(y = Riqueza, x = Amostras), color = &quot;cyan4&quot;) + geom_linerange(aes(ymin = JACK1_inferior, ymax = JACK1_superior, x = Amostras + 0.1), color = &quot;darkorange&quot;) + geom_linerange(aes(ymin = R_inferior, ymax = R_superior, x = Amostras), color = &quot;cyan4&quot;) + ylab (&quot;Riqueza estimada - Jackknife 1&quot;) + xlab (&quot;Número de amostras&quot;) + scale_x_continuous(limits = c(1,15), breaks=seq(1,15,1)) + geom_point(y= 9.9, x = 9, size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(y= 8.6, x = 9, size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_label( y = 9.9, x = 12.5, label = &quot;Riqueza estimada - Jackknife 1&quot;) + geom_label( y = 8.6, x = 11.5, label = &quot;Riqueza observada&quot;) + tema_livro() Interpretação dos resultados Com base no número de espécies raras, o estimador Jackknife 1 estimou possibilidade de encontrarmos mais seis espécies caso o esforço amostral fosse maior e não estimou tendência de estabilização da curva em uma assíntota. 11.3.3 JACKKNIFE 2 (Burnham and Overton 1978, 1979; Palmer 1991): Este método baseia-se no número de espécies que ocorrem em apenas uma amostra e no número de espécies que ocorrem em exatamente duas amostras. \\[S_{jack2} = S_{obs} + \\left[\\frac{Q_1(2m - 3)}{m}-\\frac{Q_2(m - 2)^2}{m(m-1)}\\right]\\] onde: Sobs = o número de espécies observadas na comunidade, m = número de amostras, Q1 = número de espécies observadas em uma amostra (espécies uniques), Q2 = número de espécies observadas em duas amostras (espécies duplicates). 11.3.3.1 Exemplo prático - Jackknife 2 Explicação dos dados Usaremos os mesmos dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Análise Cálculo do estimador de riqueza - Jackknife 2. # Análise. est_jack2 &lt;- poolaccum(dados_coleta, permutations = 100) summary(est_jack2, display = &quot;jack2&quot;) #&gt; $jack2 #&gt; N Jackknife 2 2.5% 97.5% Std.Dev #&gt; [1,] 3 14.27667 7.904167 21.50000 3.750886 #&gt; [2,] 4 15.73500 8.566667 23.77292 4.127584 #&gt; [3,] 5 16.36650 9.150000 24.68625 4.262113 #&gt; [4,] 6 18.16900 10.631667 27.46667 4.274110 #&gt; [5,] 7 19.57786 12.339881 27.21250 3.875295 #&gt; [6,] 8 20.78679 14.133929 28.58527 3.778223 #&gt; [7,] 9 21.82028 13.972222 27.98611 3.960469 #&gt; [8,] 10 22.84444 14.977778 28.18889 3.770196 #&gt; [9,] 11 24.04227 17.445455 28.35455 3.123930 #&gt; [10,] 12 24.99455 20.242424 28.49242 2.618660 #&gt; [11,] 13 26.09481 21.301282 28.60897 1.953804 #&gt; [12,] 14 26.92308 26.923077 26.92308 0.000000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;summary.poolaccum&quot; Visualizar os resultados com intervalo de confiança de 95%. # Preparando os dados para fazer o gráfico. resultados_jack2 &lt;- summary(est_jack2, display = c(&quot;S&quot;, &quot;jack2&quot;)) res_jack2 &lt;- cbind(resultados_jack2$jack2[,1:4], resultados_jack2$S[,2:4]) res_jack2 &lt;- as.data.frame(res_jack2) colnames(res_jack2) &lt;- c(&quot;Amostras&quot;, &quot;JACK2&quot;, &quot;JACK2_inferior&quot;, &quot;JACK2_superior&quot;, &quot;Riqueza&quot;, &quot;R_inferior&quot;, &quot;R_superior&quot;) # Comando para o gráfico. ggplot(res_jack2, aes(y = Riqueza, x = Amostras)) + geom_point(aes(y = JACK2, x = Amostras + 0.1), size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(aes(y = Riqueza, x = Amostras), size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_line (aes(y = JACK2, x = Amostras), color = &quot;darkorange&quot;) + geom_line (aes(y = Riqueza, x = Amostras), color = &quot;cyan4&quot;) + geom_linerange(aes(ymin = JACK2_inferior, ymax = JACK2_superior, x = Amostras + 0.1), color = &quot;darkorange&quot;) + geom_linerange(aes(ymin = R_inferior, ymax = R_superior, x = Amostras), color = &quot;cyan4&quot;) + ylab (&quot;Riqueza estimada - Jackknife 2&quot;) + xlab (&quot;Número de amostras&quot;) + scale_x_continuous(limits = c(1,15), breaks=seq(1,15,1)) + geom_point(y= 9.9, x = 9, size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(y= 8.2, x = 9, size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_label( y = 9.9, x = 12.5, label = &quot;Riqueza estimada - Jackknife 2&quot;) + geom_label( y = 8.2, x = 11.5, label = &quot;Riqueza observada&quot;) + tema_livro() Interpretação dos resultados Com base no número de espécies raras, o estimador Jackknife 2 estimou a possibilidade de encontrarmos mais dez espécies caso o esforço amostral fosse maior e não estimou tendência estabilização da curva em uma assíntota. 11.3.4 BOOTSTRAP (Smith and van Belle 1984): Este método difere dos demais por utilizar dados de todas as espécies coletadas para estimar a riqueza total, não se restringindo às espécies raras. Ele requer somente dados de incidência. A estimativa pelo bootstrap é calculada somando-se a riqueza observada à soma do inverso da proporção de amostras em que cada espécie ocorre. \\[S_{boot} = S_{obs} + \\sum_{k=1}^{S_{obs}}(1-P_k)^m\\] onde: Sobs = o número de espécies observadas na comunidade, m = número de amostragens, Pk = proporção do número de amostras em que cada espécie foi registrada. Bootstrap é um método não paramétrico usado para estimar os parâmetros de uma população por reamostragem. A premissa é que as reamostragens podem ser entendidas como pseudo-populações, com características similares as da população original. Para isso, o método: i) seleciona ao acaso um conjunto de amostras (no nosso exemplo 14 amostras) com reposição; ii) repete este processo n vezes; e iii) estima a média e a variância da riqueza de espécie (Smith and van Belle 1984). 11.3.4.1 Exemplo prático - Bootstrap Explicação dos dados Usaremos os mesmos dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Análise Cálculo do estimador de riqueza - Bootstrap. # Análise. est_boot &lt;- poolaccum(dados_coleta, permutations = 100) summary(est_boot, display = &quot;boot&quot;) #&gt; $boot #&gt; N Bootstrap 2.5% 97.5% Std.Dev #&gt; [1,] 3 11.87407 8.425000 15.51852 2.011130 #&gt; [2,] 4 13.14934 9.771387 16.77627 2.001598 #&gt; [3,] 5 13.83898 10.822584 17.43899 1.964793 #&gt; [4,] 6 14.66163 10.705144 18.37757 1.977243 #&gt; [5,] 7 15.47596 11.981076 18.68644 1.879223 #&gt; [6,] 8 16.18653 12.599602 19.68927 1.830489 #&gt; [7,] 9 16.61378 13.042764 19.61772 1.779771 #&gt; [8,] 10 17.19346 13.077245 19.70960 1.788670 #&gt; [9,] 11 17.82230 14.315556 19.81162 1.558281 #&gt; [10,] 12 18.35152 15.374464 19.58721 1.270158 #&gt; [11,] 13 18.75381 16.570376 19.59107 1.027014 #&gt; [12,] 14 19.27832 19.278321 19.27832 0.000000 #&gt; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;summary.poolaccum&quot; Visualizar os resultados com intervalo de confiança de 95%. # Preparando os dados para fazer o gráfico. resultados_boot &lt;- summary(est_boot, display = c(&quot;S&quot;, &quot;boot&quot;)) res_boot &lt;- cbind(resultados_boot$boot[,1:4], resultados_boot$S[,2:4]) res_boot &lt;- as.data.frame(res_boot) colnames(res_boot) &lt;- c(&quot;Amostras&quot;, &quot;BOOT&quot;, &quot;BOOT_inferior&quot;, &quot;BOOT_superior&quot;, &quot;Riqueza&quot;, &quot;R_inferior&quot;, &quot;R_superior&quot;) # Gráfico. ggplot(res_boot, aes(y = Riqueza, x = Amostras)) + geom_point(aes(y = BOOT, x = Amostras + 0.1), size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(aes(y = Riqueza, x = Amostras), size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_line (aes(y = BOOT, x = Amostras), color = &quot;darkorange&quot;) + geom_line (aes(y = Riqueza, x = Amostras), color = &quot;cyan4&quot;) + geom_linerange(aes(ymin = BOOT_inferior, ymax = BOOT_superior, x = Amostras + 0.1), color = &quot;darkorange&quot;) + geom_linerange(aes(ymin = R_inferior, ymax = R_superior, x = Amostras), color = &quot;cyan4&quot;) + ylab (&quot;Riqueza estimada - Bootstrap&quot;) + xlab (&quot;Número de amostras&quot;) + scale_x_continuous(limits = c(1,15), breaks=seq(1,15,1)) + geom_point(y= 10.4, x = 9, size = 4, color = &quot;darkorange&quot;, alpha = 0.7) + geom_point(y= 9.3, x = 9, size = 4, color = &quot;cyan4&quot;, alpha = 0.7) + geom_label( y = 10.4, x = 12.3, label = &quot;Riqueza estimada - Bootstrap&quot;) + geom_label( y = 9.3, x = 11.5, label = &quot;Riqueza observada&quot;) + tema_livro() Interpretação dos resultados Com base na frequência de ocorrência das espécies, o estimador bootstrap estimou a possibilidade de encontrarmos mais duas espécies caso o esforço amostral fosse maior e não estimou tendência de estabilização da curva em uma assíntota. 11.3.5 Interpolação e Extrapolação baseadas em rarefação usando amostragens de incidência ou abundância (Anne Chao and Jost 2012; Colwell et al. 2012): Este método utiliza teoria de amostragem (e.g. modelos multinomial, Poisson e Bernoulli) para conectar rarefação (interpolação) e predição (extrapolação) com base no tamanho da amostra. Este método utiliza uma abordagem com bootstrap para calcular o intervalo de confiança de 95%. 📝 Importante: A extrapolação torna-se altamente incerta quando estendida para o dobro ou mais do tamanho da amostragem. 11.3.5.1 Exemplo prático 1 Explicação dos dados Usaremos os mesmos dados de 17 espécies de anuros amostradas em 14 dias de coletas de campo em um habitat reprodutivo localizado na região noroeste do estado de São Paulo, Brasil. Análise Cálculo da extrapolação da riqueza com base no número de indivíduos. # Preparando os dados para análises considerando a abundância. dados_inext_abu &lt;- colSums(dados_coleta) resultados_abundancia &lt;- iNEXT(dados_inext_abu, q = 0, datatype = &quot;abundance&quot;, endpoint = 600) # Visualizar os dados no gráfico. anuros_ab &lt;- ggiNEXT(resultados_abundancia, type = 1) anuros_ab + labs(x = &quot;Número de indivíduos&quot;, y = &quot; Riqueza de espécies&quot;) + scale_linetype_discrete(labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = &quot;darkorange&quot;) + scale_fill_manual(values = &quot;darkorange&quot;) + tema_livro() Interpretação dos resultados Veja que o ponto no final da linha contínua representa as 17 espécies de anuros (eixo Y) observadas entre os 304 individuos (eixo X). A extrapolação máxima (600 indivíduos no nosso exemplo), estima um aumento de até oito espécies (intervalo de confiança) caso amostrássemos mais 296 indivíduos. Cálculo da extrapolação da riqueza com base no número de amostras. # Preparando os dados para análises considerando a incidência. # Precisa transpor o dataframe. dados_inext &lt;- as.incfreq(t(dados_coleta)) resultados_incidencia &lt;- iNEXT(dados_inext, q = 0, datatype = &quot;incidence_freq&quot;, endpoint = 28) # Visualizar os dados no gráfico. anuros_IC &lt;- ggiNEXT(resultados_incidencia, type = 1) anuros_IC + labs(x = &quot;Número de amostras&quot;, y = &quot; Riqueza de espécies&quot;) + scale_linetype_discrete(labels = c(&quot;Interpolado&quot;, &quot;Extrapolado&quot;)) + scale_colour_manual(values = &quot;darkorange&quot;) + scale_fill_manual(values = &quot;darkorange&quot;) + tema_livro() Interpretação dos resultados Veja que o ponto no final da linha contínua representa as 17 espécies de anuros (eixo Y) observadas nos 14 dias de coleta (eixo X - amostras). A extrapolação máxima (28 dias de coleta no nosso exemplo), estima um aumento de até 12 espécies (intervalo de confiança) caso amostrássemos mais 14 dias. 11.3.5.2 Exemplo prático 2 Explicação dos dados Neste exemplo, iremos refazer o exemplo do @[Cap8] que usa Generalized Least Squares (GLS) para testar a relação da riqueza de ácaros com a quantidade de água no substrato. Contudo, ao invés de considerar a riqueza de espécies de ácaros observada como variável resposta, iremos utilizar a riqueza extrapolada. Os dados que usaremos estão disponíveis no pacote vegan e representa a composição de espécies de ácaros amostradas em 70 comunidades/amostras. Pergunta: A riqueza extrapolada de espécies de ácaros é maior em comunidades localizadas em áreas com substratos secos? Predições O número de espécies extrapolada será maior em substratos secos uma vez que as limitações fisiológicas impostas pela umidade limitam a ocorrência de várias espécies de ácaros. Variáveis Variáveis resposta e preditoras matriz ou dataframe com as abundâncias das espécies de ácaros (variável resposta) registradas em 70 comunidades/amostras (variável preditora). Checklist Verificar se a sua matriz ou dataframe estão com as espécies nas linhas e as comunidades nas colunas. Análise Vamos iniciar calculando a riqueza extrapolada com base na comunidade com maior abundância. # Os dados estão com as comunidades nas colunas e as espécies nas linhas. # Para as análises teremos que transpor a planilha. composicao_acaros &lt;- t(mite) # A comunidade com maior abundância tem 781 indivíduos. max(colSums(composicao_acaros)) #&gt; [1] 781 # Calcular a riqueza extrapolada de espécies para todas as comunidades # considerando a maior abundância. resultados_extrapolacao &lt;- iNEXT(composicao_acaros, q = 0, datatype = &quot;abundance&quot;, endpoint = 781) Vamos criar umloop para extrair a riqueza extrapolada para as 70 comunidades. # Criando um data.frame vazio para salvar os dados resultados_comunidades_ext &lt;- data.frame() # Criando um vetor vazio para salvar os resultados riqueza_extrapolada &lt;- c() # Loop repetindo as análises para as 70 comunidades # O objetivo é extrair a riqueza estimada extrapolada para 781 individuos for (i in 1:70){ resultados_comunidades_ext &lt;- data.frame(resultados_extrapolacao$iNextEst[i]) riqueza_extrapolada[i] &lt;- resultados_comunidades_ext[40,4] } Agora, seguindo os passos descritos no @[Cap8], vamos identificar o melhor modelo que representa a estrutura espacial dos dados extrapolados. # Criando data frame com todas as variáveis dados_combinado_ext &lt;- data.frame(riqueza_extrapolada, agua, coord) # Modelo gls sem estrutura espacial. no_spat_gls &lt;- gls(riqueza_extrapolada ~ agua, data = dados_combinado_ext, method = &quot;REML&quot;) # Covariância esférica. espher_model &lt;- gls(riqueza_extrapolada ~ agua, data = dados_combinado_ext, corSpher(form = ~lat + long, nugget = TRUE)) # Covariância exponencial (corExp(form=~lat+long)). expon_model &lt;- gls(riqueza_extrapolada ~ agua, data = dados_combinado_ext, corExp(form = ~lat + long, nugget = TRUE)) # Covariância Gaussiana (corGaus(form=~lat+long)). gauss_model &lt;- gls(riqueza_extrapolada ~ agua, data = dados_combinado_ext, corGaus(form = ~lat + long, nugget = TRUE)) # Covariância linear (corLin(form=~lat+long). cor_linear_model &lt;- gls(riqueza_extrapolada ~ agua, data = dados_combinado_ext, corLin(form = ~lat + long, nugget = TRUE)) # Covariância razão quadrática (corRatio(form=~lat+long)). ratio_model &lt;- gls(riqueza_extrapolada ~ agua, data = dados_combinado_ext, corRatio(form = ~lat + long, nugget = TRUE)) Vamos usar o AIC para selecionar o modelo mais “provável” explicando a distribuição da riqueza extrapolada das espécies de ácaros. # Seleção dos modelos. aic_fit_ext &lt;- AIC(no_spat_gls, espher_model, cor_linear_model, expon_model, gauss_model, ratio_model) aic_fit_ext %&gt;% arrange(AIC) #&gt; df AIC #&gt; ratio_model 5 467.9349 #&gt; no_spat_gls 3 469.3103 #&gt; cor_linear_model 5 473.2373 #&gt; espher_model 5 473.2815 #&gt; gauss_model 5 473.3086 #&gt; expon_model 5 473.3103 # Visualizando os resíduos do modelo com menor valor de AIC (veja Capítulo 8). plot(ratio_model) De forma geral, a distribuição dos resíduos está adequada com apenas dois pontos fugindo da nuvem. Contudo, eles podem influenciar os resultados (veja abaixo). # Visualizando os resultados e calculando pseudo-R-squared. summary(ratio_model)$tTable #&gt; Value Std.Error t-value p-value #&gt; (Intercept) 24.09577588 4.816461582 5.002796 4.227862e-06 #&gt; agua -0.01181425 0.006977381 -1.693221 9.499017e-02 rsquared(ratio_model) #&gt; Response family link method R.squared #&gt; 1 riqueza_extrapolada gaussian identity none 0.05977552 # Gráfico. predito_ext &lt;- predict(ratio_model) ggplot(data = dados_combinado_ext, aes(x= agua, y= riqueza_extrapolada)) + labs(x = &quot;Concentração de água no substrato&quot;, y = &quot;Riqueza extrapolada \\ndas espécies de ácaros&quot;, size = 15) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;, alpha = 0.7) + geom_line(aes(y = predito_ext), size = 1) + tema_livro() Interpretação dos resultados A riqueza extrapolada das espécies de ácaros foi maior em comunidades localizadas em áreas com substratos secos do que em áreas com substratos úmidos. Contudo, apesar do modelo apresentar um relação significativa entre as variáveis, a concentração de água explica apenas 5,9% da variação da riqueza extrapolada das espécies de ácaros. O padrão observado, valor de P &lt; 0.05 e o baixo valor de R2, provavelmente está relacionado com as duas comunidades com altos valores de riqueza extapolada (e.g. outilers). Refaça as análises sem os dois pontos e vejam o padrão dos novos resultados. 11.3.6 Para se aprofundar Recomendamos aos interessados que olhem a página do EstimateS software e baixem o manual do usuário que contém informações detalhadas sobre os índices de rarefação e estimadores de riqueza. Este site foi criado e é mantido pelo Dr. Robert K. Colwell, um dos maiores especialistas do mundo em estimativas da biodiversidade Recomendamos também o livro Biological Diversity Frontiers in Measurement and Assessment (Magurran and McGill 2011). Referências "],["cap12.html", "Capítulo 12 Diversidade Taxonômica 12.1 Aspectos teóricos 12.2 Diversidade alfa 12.3 Diversidade de espécies 12.4 Diagramas de Whittaker ou Curva de Dominância 12.5 Curvas de distribuição de abundâncias 12.6 Números de Hill ou Série de Hill 12.7 Diversidade beta", " Capítulo 12 Diversidade Taxonômica Pré-requisitos do capítulo ## Pacotes library(devtools) # install_github(&quot;paternogbc/ecodados&quot;) # para instalar o ecodados library(ecodados) library (vegan) library(ggplot2) library(BiodiversityR) library(hillR) library(betapart) ## Dados necessários composicao_especies &lt;- ecodados::composicao_anuros_div_taxonomica precipitacao &lt;- ecodados::precipitacao_div_taxonomica 12.1 Aspectos teóricos A diversidade biológica é um conceito multifacetado que pode ser definido e analisado de diferentes maneiras (e.g. diversidade genética, taxonômica, funcional, filogenética, ecossistêmica, etc.)(Magurran and McGill 2011; N. J. Gotelli and Chao 2013). Whittaker (1960, 1972) particionou a diversidade em três componentes: i) diversidade alfa que é caracterizada pela diversidade dentro do habitat ou unidade amostral; ii) diversidade beta que é caracterizada pela variação na diversidade entre habitats ou unidades amostrais; e iii) diversidade gama que é caracterizada pela combinação da diversidade alfa e beta ou definida como a diversidade regional englobando todos os habitats ou unidades amostrais. Portanto, não existe um método que quantifique todos os parâmetros associados à diversidade biológica. Consequentemente, a escolha da métrica de diversidade dependerá i) do objetivo do estudo; e ii) das informações disponíveis para o pesquisador. Neste capítulo, iremos abordar a diversidade taxonômica que ignora a relação de parentesco entre as espécies (e.g. diversidade filogenética - @ref[cap13]) e as diferentes funções que as espécies realizam no ecossistema (e.g. diversidade funcional - @ref[cap14]). Na diversidade taxonômica, pesquisadores estão interessados na riqueza de espécies (e.g. número de espécies), na distribuição de abundância das espécies (e.g. fato que algumas espécies são comuns e outras raras) e/ou diversidade de espécies (e.g. índices que descrevem a relação entre a riqueza e a distribuição da abundância relativa das espécies) nas localidades. 12.2 Diversidade alfa 12.2.1 Riqueza de espécies ou número de espécies Riqueza de espécies é uma métrica intuitiva e de fácil compreensão, uma vez que se refere ao número de espécies observadas em uma localidade. É importante ter em mente que a riqueza de espécies é influenciada pelo esforço amostral e sua estimativa real é um imenso desafio (Magurran and McGill 2011). Comparações entre comunidades com diferenças no número de amostragens ou abundância das espécies devem ser realizadas por meio de rarefações (veja @ref[cap10]), enquanto que o número de espécies não detectadas pode ser estimado pelos estimadores de riqueza (veja @ref[cap11]). Embora raramente usados como alternativa a rarefação, existem alguns índices que calculam a riqueza de espécies ponderando a abundância total (i.e. tamanho da amostra) dentro de cada comunidade. Esses índices são: Índice de Margalef \\[D_{Mg} = \\frac{S-1}{ln (N)}\\] onde: S = o número de espécies na comunidade; ln = logaritmo natural; N = número total de indivíduos na comunidade; DMg não tem um valor máximo e sua interpretação é comparativa, com valores maiores indicando maior riqueza de espécies. e Índice de Menhinick \\[D_{Mn} = \\frac{S}{\\sqrt{N}}\\] onde: S = o número de espécies na comunidade; N = número total de indivíduos na comunidade; DMn não tem um valor máximo e sua interpretação é comparativa, com valores maiores indicando maior riqueza de espécies. 12.2.1.1 Exemplo prático 1 - Riqueza de espécies Explicação dos dados Neste exemplo, avaliaremos a riqueza de espécies de 10 comunidades. Os dados de ocorrência das espécies nas comunidades foram simulados para demonstrar as propriedades das métricas de diversidade taxonômicas. Utilizaremos este conjunto de dados para todos os exemplos deste capítulo. Pergunta: A variação espacial na riqueza de espécies nas comunidades está associada com a variação na precipitação? Predições Os valores de riqueza de espécies serão maiores nas comunidades localizadas em regiões que recebem grande volume de precipitação do que em regiões mais secas. Variáveis Variáveis resposta e preditoras Dataframe com as comunidades (unidade amostral) nas linhas e as espécies (variável resposta) nas colunas. Dataframe com as comunidades (unidade amostral) nas linhas e precipitação anual (variável preditora) na coluna. Checklist Verificar se os dataframes de composição de espécies e variáveis ambientais estão com as unidades amostrais nas linhas e variáveis preditores nas colunas. Verificar se as comunidades nos dataframes de composição de espécies e variáveis ambientais estão distribuídos na mesma sequência/ordem nos dois arquivos. Abaixo demonstramos os códigos no R para determinar a riqueza de espécies para cada comunidade a partir da planilha de composição de espécies. Os dados estão disponíveis no pacote ecodados. # Ver os dados das comunidades head(composicao_especies) #&gt; sp1 sp2 sp3 sp4 sp5 sp6 sp7 sp8 sp9 sp10 #&gt; Com_1 10 10 10 10 10 10 10 10 10 10 #&gt; Com_2 91 1 1 1 1 1 1 1 1 1 #&gt; Com_3 1 3 6 25 1 0 0 0 0 0 #&gt; Com_4 0 0 0 0 0 15 15 18 17 16 #&gt; Com_5 0 9 0 6 0 11 0 2 12 0 #&gt; Com_6 3 0 5 0 12 1 0 13 12 0 Vamos ver a riqueza de espécies para cada comunidade. # Calculando a riqueza observada de espécies para cada comunidade. (riqueza_sp &lt;- specnumber(composicao_especies)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 10 10 5 5 5 6 2 4 6 4 Vamos ver a abundância total de cada comunidade. # Calculamos a abundância total para cada comunidade. (abundancia &lt;- apply(composicao_especies, 1, sum)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 100 100 36 81 40 46 4 20 15 11 Calculando o Índice de Margalef. # A função round é para limitar o resultado para duas casas decimais. (Margalef &lt;- round((riqueza_sp-1)/log(abundancia), 2)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 1.95 1.95 1.12 0.91 1.08 1.31 0.72 1.00 1.85 1.25 Calculando o Índice de Menhinick. (Menhinick &lt;- round(riqueza_sp/sqrt(abundancia), 2)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 1.00 1.00 0.83 0.56 0.79 0.88 1.00 0.89 1.55 1.21 Agora vamos analisar a relação entre a riqueza de espécies e a precipitação anual. # Juntando todos os dados em um único dataframe. dados &lt;- data.frame(precipitacao$prec, riqueza_sp, Margalef, Menhinick) # Renomenado as colunas colnames(dados) &lt;- c(&quot;Precipitacao&quot;, &quot;Riqueza&quot;, &quot;Margalef&quot;, &quot;Menhinick&quot;) # Riqueza de espécies e precipitação anova(lm(dados$Riqueza ~ dados$Precipitacao)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados$Riqueza #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados$Precipitacao 1 30.622 30.6224 8.9156 0.01744 * #&gt; Residuals 8 27.478 3.4347 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Há uma relação positiva entre a riqueza de espécies e a precipitação anual (F1,8 = 8,91, P = 0,01). Relação entre o Índice de Margalef e a precipitação anual. anova(lm(dados$Margalef ~ dados$Precipitacao)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados$Margalef #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados$Precipitacao 1 0.37865 0.37865 2.1201 0.1835 #&gt; Residuals 8 1.42879 0.17860 Não há uma relação positiva entre o índice de Margalef e a precipitação anual (F1,8 = 2,12, P = 0,18). Agora vamos analisar a relação entre a riqueza de espécies e a precipitação anual. anova(lm(dados$Menhinick ~ dados$Precipitacao)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados$Menhinick #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados$Precipitacao 1 0.07626 0.076262 1.0992 0.3251 #&gt; Residuals 8 0.55503 0.069378 Não há uma relação positiva entre o índice de Menhinick e a precipitação anual (F1,8 = 1,09, P = 0,32). Vamos plotar o gráfico com os resultados da riqueza de espécies ao longo do gradiente de precipitação anual. ggplot(data = dados, aes(x= Precipitacao, y= Riqueza)) + labs(x = &quot;Precipitação anual (mm)&quot;, y = &quot;Riqueza de espécies&quot;) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;, alpha = 0.7) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) Interpretação dos resultados Percebam que ponderar a riqueza de espécies pela abundância altera a interpretação dos resultados. O número de espécies é maior em comunidades com maior precipitação. Contudo, quando poderamos pela abundância (índices de Margalef ou Menhinick), a relação com a precipitação não é significativa. 12.3 Diversidade de espécies Diferente dos índices de riqueza de espécies que não levam em consideração a abundância relativa das espécies (i.e. todas as espécies tem o mesmo peso), os índices de diversidade avaliam além da riqueza, a dominância ou raridade das espécies nas comunidades. Assim, quando comparamos duas comunidades com a mesma riqueza de espécies, e uma das comunidades é dominada por uma única espécie e a outra comunidade apresenta espécies com abundâncias parecidas, consideramos a segunda comunidade mais diversa. Os índices de diversidade variam porque eles dão pesos diferentes para a riqueza e equitabilidade das espécies. Assim, um determinado índice de diversidade pode indicar que uma comunidade X é mais diversa que Y, enquanto outro índice indica o oposto (Melo 2008). Portanto, uma maneira de determinar qual índice de diversidade usar é saber se você quer dar maior peso para riqueza ou equitabilidade das espécies nas comunidades. 📝 Importante: Ressaltamos que há várias críticas em relação ao uso dos índices de diversidade que são abstratos e difíceis de se interpretar (Hurlbert 1971). Por exemplo, dizer que o valor X estimado por índices de diversidade é alto ou baixo é irrelevante se não tivermos uma base comparativa (para mais detalhes veja Melo 2008). Os dois índices de diversidade mais usados na ecologia são: Índice de Shannon-Wiener - quantifica a incerteza associada em predizer a identidade de uma espécie dado o número de espécies e a distribuição de abundância para cada espécie. Este índice é mais sensível a mudanças nas espécies raras da comunidade. \\[H&#39; = -\\sum_{i=1}^{S}p_i * ln p_i\\] onde: pi = abundância relativa de cada espécie, calculada pela proporção dos indivíduos de uma espécie pelo número total dos indivíduos na comunidade; ln = logaritmo natural, mas outras bases logarítmas podem ser utilizadas; H’ não tem um valor máximo e sua interpretação é comparativa, com valores maiores indicando maior diversidade. e Índice de Simpson - quantifica a probabilidade de dois indivíduos retirados ao acaso da comunidade pertencerem a mesma espécie. Este índice é na verdade uma medida de dominância. Assim, como a probabilidade dos indivíduos serem da mesma espécie diminui com o aumento da riqueza de espécies, o índice de Simpson também diminui com a riqueza. \\[D = \\sum_{i=1}^{S}p_i^2\\] onde: Pi = abundância relativa de cada espécie, calculada pela proporção dos indivíduos de uma espécie pelo número total dos indivíduos na comunidade. D varia de 0 a 1 com valores próximos de 1 indicando menor diversidade enquanto valores próximos de 0 indicam maior diversidade. Para evitar confusão nas interpretações, normalmente o índice de Simpson é expressado como o valor inverso (1 - D) para que os maiores valores representem maior diversidade. Neste caso, o valor inverso é conhecido na literatura como índice Gini-Simpson. Para o índice Gini-Simpson estamos avaliando a probabilidade de dois indivíduos retirados ao acaso da comunidade sejam de espécies diferentes. 12.3.0.1 Exemplo prático 2 - Diversidade de espécies Explicação dos dados Usaremos os mesmos dados simulados do exemplo prático 1. Pergunta: A variação espacial na diversidade de espécies das comunidades está associado com o gradiente de precipitação? Predições Os valores de diversidade de espécies serão maiores nas comunidades localizadas em regiões maior volume de precipitação do que em regiões mais secas. Abaixo demonstramos os comandos no R para determinar a diversidade de espécies para cada comunidade a partir da planilha de composição de espécies. # MARGIN = 1 significa que a função irá calcular o índice considerando # as linhas do data.frame (comunidades). shannon_res &lt;- diversity(composicao_especies, index = &quot;shannon&quot;, MARGIN = 1) shannon_res #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 2.3025851 0.5002880 0.9580109 1.6068659 1.4861894 1.5607038 0.6931472 1.1058899 1.7140875 1.2636544 O argumento index = \"simpson\", calcula o índice Gini-Simpson (1-D). simpson_res &lt;- diversity(composicao_especies, index = &quot;simpson&quot;, MARGIN = 1) simpson_res #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 0.9000000 0.1710000 0.4814815 0.7989636 0.7587500 0.7674858 0.5000000 0.5850000 0.8088889 0.6942149 Interpretação dos resultados A comunidade 1 foi a comunidade que apresentou a maior diversidade de espécies, enquanto a comunidade 2 foi a comunidade que apresentou a menor diversidade. Gostaríamos de chamar a atenção para a importância da distribuição da abundância relativa das espécies dentro das comunidades. Percebam que tanto a comunidade 1 quanto a comunidade 2 abrigam o mesmo número de espécies (10 espécies) e abundância total (100 indivíduos), mas o padrão de distribuição da abundância relativa entre as espécies dentro das comunidades são bem discrepantes. Na comunidade 1 as espécies apresentam abundâncias semelhantes entre elas (i.e. alta equitabilidade), enquanto que na comunidade 2 uma espécie é dominante e as outras raras (i.e. baixa equitabilidade). Essa diferença na distribuição da abundância relativa entre as comunidades é um fator muito importante para os índices de diversidade. Dentro desta perspectiva, alguns índices fornecem uma estimativa sobre a equitabilidade da distribuição da abundância nas comunidades. Entre eles, o mais conhecido foi proposto por Pielou (1966): Índice de Equabilidade (ou Equitabilidade) de Pielou é uma métrica derivada do índice de Shannon-Wiener que descreve o padrão de distribuição da abundância relativa das espécies na comunidade. \\[J = \\frac{H&#39;}{Hmax} = \\frac{H&#39;}{ln (S)}\\] onde: H’ = índice de Shannon-Wiener; Hmax = todas as espécies teriam a mesma abundância relativa. Hmax é calculado aplicando o logaritmo natural (ln) para a riqueza de espécies (S); Se todas as espécies apresentam a mesma abundância relativa, então J = 1. Se uma espécie apresenta forte dominância, J aproxima-se de zero. Não há uma função no R que calcule o índice de Pielou, mas ele pode facilmente ser calculado usando os valores de diversidade de Shannon e o logaritmo da riqueza de espécies de cada comunidade (Pielou &lt;- shannon_res/log(specnumber(composicao_especies))) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 1.0000000 0.2172723 0.5952456 0.9984019 0.9234214 0.8710454 1.0000000 0.7977309 0.9566505 0.9115340 Agora que temos uma ideia de como a riqueza de espécies e a distribuição da abundância relativa são importantes para quantificar os valores dos índices de diversidade, vamos testar se há relação entre os índices de diversidade e precipitação anual nas comunidades. # Juntando todos os dados em um único dataframe. dados_div &lt;- data.frame(precipitacao$prec, shannon_res, simpson_res, Pielou) # Renomeando as colunas colnames(dados_div) &lt;- c(&quot;Precipitacao&quot;, &quot;Shannon&quot;, &quot;Simpson&quot;, &quot;Pielou&quot;) Regressão simples para verificar a relação entre o índice de Shannon-Wiener e a precipitação anual nas comunidades. anova(lm(dados_div$Shannon ~ dados_div$Precipitacao)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_div$Shannon #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_div$Precipitacao 1 0.10989 0.10989 0.3627 0.5637 #&gt; Residuals 8 2.42366 0.30296 Regressão simples para verificar a relação entre o índice de Simpson e a precipitação anual nas comunidades. anova(lm(dados_div$Simpson ~ dados_div$Precipitacao)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_div$Simpson #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_div$Precipitacao 1 0.00132 0.001325 0.0252 0.8778 #&gt; Residuals 8 0.42064 0.052580 Regressão simples para verificar a relação entre o índice de Pielou e a precipitação anual nas comunidades. anova(lm(dados_div$Pielou ~ dados_div$Precipitacao)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_div$Pielou #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_div$Precipitacao 1 0.09080 0.090798 1.5792 0.2443 #&gt; Residuals 8 0.45997 0.057496 📝 Importante: As análises acima são apenas ilustrativas. Não estamos avaliando as premissas de normalidade e homogeneidade da variância dos resíduos (veja @ref[cap7]). Interpretação dos resultados A variação espacial na diversidade de espécies, obtida através dos índices de Shannon-Wiener e Simpson, e a equitabilidade de Pielou não foram associados com a variação na precipitação anual entre as áreas (P &gt; 0,05). 12.4 Diagramas de Whittaker ou Curva de Dominância Embora os índices de diversidade de espécies englobem os componentes riqueza e abundância relativa das espécies nas suas estimativas, não é possível conhecer o número de espécies ou quais são as espécies dominantes ou raras dentro das comunidades. Por exemplo, duas comunidades podem ter o mesmo valor de diversidade e ainda assim apresentar diferenças na riqueza e equitabilidade (Melo 2008). O diagrama de Whittaker é um método que lida com essas questões utilizando informações visuais do número de espécies e abundância relativa de cada espécie nas comunidades. Este método plota as espécies ranqueadas no eixo X da mais abundante para a menos abundante, enquanto que no eixo Y as abundâncias relativas das espécies são plotadas em escala logaritma (log10). Este gráfico permite ao leitor reconhecer: i) a riqueza de espécies observando o eixo X, ii) a equitabilidade da abundância relativa das espécies pela inclinação da reta; e iii) quais são as espécies dominantes, intermediárias e raras nas comunidades através da observação em relação ao eixo Y. A partir destas curvas, vários autores propuseram modelos matemáticos para explicar a distribuição de abundância das espécies gerando diferentes modelos teóricos (e.g. série geométrica, broken-stick, log-series e log-normal). Cada modelo possui predições distintas: o modelo geométrico prediz distribuição de abundâncias desiguais, broken-stick prediz distribuição de abundâncias uniformes, enquanto log-normal e log-series são intermediárias com predições distintas sobre as proporções de espécies raras - alta em log-series, baixa em log-normal (veja McGill et al. (2007) para revisão). Para análises exploratórias onde você tem interesse em visualizar o padrão da distribuição relativa das espécies por comunidade, a função rankabundance do pacote BiodiversityR é uma opção interessante. # cálculo da curva para as comunidades 2 e 3. rank_com2 &lt;- rankabundance(composicao_especies[2, composicao_especies[2,] &gt; 0]) rank_com3 &lt;- rankabundance(composicao_especies[3, composicao_especies[3,] &gt; 0]) # Gráfico # Veja a ajuda da função rankabundplot para outros exemplos de gráficos. rankabunplot(rank_com2, scale = &quot;logabun&quot;, specnames = c(1), pch = 19, col = &quot;darkorange&quot;) rankabunplot(rank_com3, scale = &quot;logabun&quot;, specnames = c(1), pch = 19, xlim = c(0,10), addit = T, col = &quot;cyan4&quot; , legend = T) legend(5, 40, legend = c(&quot;Comunidade 2&quot;, &quot;Comunidade 3&quot;), col = c(&quot;darkorange&quot;, &quot;cyan4&quot;), lty = 1, cex = 0.8, box.lty = 0) Interpretação dos resultados Percebam que olhando os eixos do gráfico conseguimos determinar que a comunidade 2 (círculo laranja) abriga 10 espécies no total (i.e. comprimento do eixo X), com a espécie sp1 apresentando alta dominância e as outras espécies apresentando abundâncias muito baixas. A comunidade 3 (círculo ciano) abriga cinco espécies no total, sendo que a espécie sp4 apresenta alta dominância, duas espécies apresentam abundâncias intermediárias e outras duas abundâncias baixas. 12.5 Curvas de distribuição de abundâncias Caso o interesse seja avaliar qual dos modelos teóricos melhor explica a distribuição das abundâncias das espécies, a função radift do pacote vegan é a melhor opção. A função radfit avalia cinco modelos teóricos para determinar qual deles melhor se ajustam aos dados. Os modelos teóricos avaliados na função são: Null = modelo broken-stick; preemption = série geométrica; log-normal; Zipf; Zipf-Mandelbrot. Você pode realizar as análises separadamente para cada comunidade ou para todas as comunidades ao mesmo tempo. Vamos começar avaliando separadamente a comunidade 2. curvas_dominancia_com2 &lt;- radfit(composicao_especies[2,]) curvas_dominancia_com2 #&gt; #&gt; RAD models, family poisson #&gt; No. of species 10, total abundance 100 #&gt; #&gt; par1 par2 par3 Deviance AIC BIC #&gt; Null 175.242 199.592 199.592 #&gt; Preemption 0.68962 79.560 105.910 106.213 #&gt; Lognormal -0.65366 3.2485 47.350 75.701 76.306 #&gt; Zipf 0.83829 -3.0254 26.612 54.963 55.568 #&gt; Mandelbrot 0.83829 -3.0254 1.6448e-07 26.612 56.963 57.871 Agora vamos fazer um gráfico com as predições dos modelos plot(curvas_dominancia_com2, ylab = &quot;Abundância&quot;, xlab = &quot;Ranqueamento das espécies&quot;) Interpretação dos resultados Os pontos brancos representam as espécies ranqueadas de acordo com a abundância e as linhas representam as predições dos modelos matématicos. Com base nos valores de AIC (veja Capítulo 7), o Zipf é o melhor modelo explicando a distribuição da abundância relativa das espécies na comunidade 2. Agora vamos analisar os dados considerando todas as comunidades. curvas_dominancia_todas &lt;- radfit(composicao_especies) curvas_dominancia_todas #&gt; #&gt; Deviance for RAD models: #&gt; #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 #&gt; Null 8.2193e+01 1.7524e+02 8.9085e+00 4.2265e+01 4.9719e+00 4.7099e+00 1.1507e+00 1.8998e+00 #&gt; Preemption 2.2878e+01 7.9560e+01 1.5423e+00 1.4332e+01 3.0438e+00 4.5536e+00 7.7259e-01 1.7847e+00 #&gt; Lognormal 1.7764e-15 4.7350e+01 1.0161e+00 2.9441e-02 1.9303e+00 4.8898e+00 -2.2053e-25 1.4556e+00 #&gt; Zipf -1.7764e-15 2.6612e+01 2.1659e-01 1.5846e-02 3.6094e+00 8.3245e+00 -2.2073e-25 6.6938e-01 #&gt; Mandelbrot -1.7764e-15 2.6612e+01 2.0926e-01 1.1390e-02 1.8740e+00 4.1131e+00 0.0000e+00 6.6938e-01 #&gt; Com_9 Com_10 #&gt; Null 2.7703e+00 1.1146 #&gt; Preemption 9.2518e-01 0.7428 #&gt; Lognormal 2.0626e-01 0.5079 #&gt; Zipf 4.7931e-01 0.8730 #&gt; Mandelbrot 2.3634e-01 0.4456 # Vamos fazer um gráfico para cada comunidade plot(curvas_dominancia_todas, log = &quot;y&quot;) Interpretação dos resultados A comunidade 1 foi associada com o modelo log-normal, as comunidades 2 e 4 com o modelo Zipf, a comunidade 3 com o modelo série geométrica e as outras comunidades com o modelo nulo. Para explorar a explicação biológica por trás destes modelos veja os artigos (Wilson 1991; B. J. McGill et al. 2007; Magurran and McGill 2011). Contudo, esse link entre o modelo matemático e a explicação biológica precisa ser interpretado com cuidado porque diferentes modelos matemáticos podem levar ao mesmo padrão de distribuição de abundância. 12.6 Números de Hill ou Série de Hill Embora os índices de Shannon-Wiener e Gini-Simpson sejam amplamente usados em estudos ecológicos e de conservação, eles sofrem de propriedades matemáticas e não representam a diversidade propriamente dita (Jost 2006). Portanto, quando o objetivo é avaliar a diversidade, os índices de Shannon-Wiener e Gini-Simpson não deveriam ser utilizados na sua forma padrão, mas transformados em números efetivos de espécies ou diversidade verdadeira (Jost 2006). O número efetivo de espécies é o número de espécies igualmente abundantes (i.e. todas as espécies com a mesma abundância) necessárias para produzir o valor observado para um determinado índice. Por exemplo, uma comunidade com índice de Shannon-Wiener estimado de 4,5 teria um número efetivo de 90 espécies igualmente abundantes. Jost et al. (2006) usam o seguinte exemplo para explicar o conceito do número efetivo de espécies - uma comunidade com 16 espécies igualmente abundantes é duas vezes mais diversa do que uma comunidade com 8 espécies igualmente abundantes. Neste caso, a diversidade deveria ser proporcional ao número de espécies. Contudo, quando aplicamos os índices de diversidade para estas comunidades com 16 e 8 espécies (cada espécie com 5 indivíduos), o índice de Shannon-Wiener é 2,772 e 2,079 respectivamente, e o índice de Gini-Simpson é 0,937 e 0,875 respectivamente. Claramente, os valores estimados pelos índices de diversidade não representam a diferença entre as comunidades porque eles carecem de uma particularidade matemática conhecida como propriedade de duplicação. O próximo exemplo (modificado do website de Lou Jost; http://www.loujost.com/) demostra a importância da transformação dos índices de diversidade em números efetivos de espécies. Imagine que você foi contratado para avaliar a diversidade de peixes em um riacho antes e depois da instalação de uma usina hidrelétrica. Suponha que os valores estimados pelo índice de Gini-Simpson foi de 0,99 antes da instalação e de 0,97 depois da instalação. A princípio, você poderia concluir que a diversidade diminuiu somente 2% e que a instalação da hidrelétrica não afetou a diversidade de peixes no riacho. Contudo, transformando os valores do índice de diversidade em números efetivos, percebemos que antes da instalação a diversidade do riacho equivale a 100 espécies igualmente abundantes enquanto após a instalação, equivale a 33 espécies igualmente abundantes. Portanto, a queda da diversidade é 66% e não 2%. Hill (1973) derivou uma equação geral para o cálculo do número efetivo de espécies ou diversidade verdadeira que depende apenas do valor de q e da abundância relativa das espécies: \\[^qD = (\\sum_{i=1}^{S}p_i^q)^{1/(1-q)}\\] Onde: q = é um parâmetro conhecido como ordem da diversidade e é usado para dar peso as espécies comuns ou raras. q = 0 não considera a frequência das espécies e representa a riqueza observada de espécies; q = 1 equivale a transformação do índice de Shannon-Wiener (i.e. exp(H’)) e da peso as espécies com base na proporção das suas frequências; q = 2 equivale a transformação do índice de Gini-Simpson (i.e. 1/(1-D)) e da peso as espécies mais comuns. Valores de q &lt;1 favorecem espécies raras enquanto valores de q &gt; 1 favorecem espécies comuns. pi = abundância relativa de cada espécie, calculada pela proporção dos indivíduos de uma espécie pelo número total dos indivíduos na comunidade. Vamos calcular o número de Hill para as comunidades do nosso exemplo. Calculando o Número de Hill com q = 0. (hill_res_q_0 &lt;- hill_taxa(composicao_especies, q = 0)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 10 10 5 5 5 6 2 4 6 4 Calculando o Número de Hill com q = 1. (hill_res_q_1 &lt;- hill_taxa(composicao_especies, q = 1)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 10.000000 1.649196 2.606507 4.987156 4.420220 4.762172 2.000000 3.021912 5.551608 3.538328 Calculando o Número de Hill com q = 2. (hill_res_q_2 &lt;- hill_taxa(composicao_especies, q = 2)) #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 10.000000 1.206273 1.928571 4.974223 4.145078 4.300813 2.000000 2.409639 5.232558 3.270270 Criando um data frame com os três resultados anteriores res_hill &lt;- data.frame(hill_res_q_0, hill_res_q_1, hill_res_q_2) colnames(res_hill) &lt;- c(&quot;q=0&quot;, &quot;q=1&quot;, &quot;q=2&quot;) head(res_hill) #&gt; q=0 q=1 q=2 #&gt; Com_1 10 10.000000 10.000000 #&gt; Com_2 10 1.649196 1.206273 #&gt; Com_3 5 2.606507 1.928571 #&gt; Com_4 5 4.987156 4.974223 #&gt; Com_5 5 4.420220 4.145078 #&gt; Com_6 6 4.762172 4.300813 Interpretação dos resultados Como na comunidade 1 todas as espécies são igualmente abundantes, alterar os valores de q não altera o número efetivo de espécies que permanece sempre 10. Contudo, na comunidade 2 que apresenta alta dominância de uma espécie, alterar os valores de q diminui consideravelmente a estimativa de diversidade. A vantagem dos números de Hill é que eles são de fácil interpretação e comparação entre as comunidades. Fator ausente para os índices de diversidade. Neste ponto, esperamos que tenha ficado claro que mais do que a riqueza de espécies, a abundância relativa das espécies (e.g. comuns ou raras) tem um papel fundamental na estimativa da diversidade de espécies. 12.7 Diversidade beta O termo diversidade beta foi proposto por Whittker (1960) e foi definido como a razão entre a diversidade gama e diversidade alfa (i.e. diversidade beta multiplicativa) quantificando não só a relação entre a diversidade regional e local, mas também o grau de diferenciação entre as comunidades. Para demonstrar como a diversidade beta varia entre comunidades locais dentro de uma região usaremos a explicação do Baselga (http://webspersoais.usc.es/persoais/andres.baselga/beta.html). Imagine três comunidades, cada comunidade abrigando as mesmas cinco espécies. Neste caso, a média da diversidade alfa = 5, a diversidade gama = 5 e a razão entre elas (gama/alfa) indica uma diversidade beta = 1. Isso significa que na região existe apenas uma unidade distinta de composição. Quando a composição de espécies das três comunidades é completamente diferente (i.e. diferenciação máxima), temos que a média da diversidade alfa = 5, a diversidade gama = 15 e a razão entre elas indica uma diversidade beta = 3. Neste caso, existem três unidades distintas dentro da região. Assim, a diversidade beta multiplicativa varia de 1 até o número de comunidades dentro da região. A maioria dos índices de (dis)similaridade utilizadas na ecologia (e.g. índices de Jaccard e Sørensen) são índices que padronizam a diversidade beta e geram valores independentes do número de comunidades. Eles podem ser calculados para dados de incidência (presença e ausência) ou abundância (P. Legendre and Legendre 2012b) e considerando comparações par-a-par entre as comunidades ou comparação entre múltiplas comunidades (i.e. multiple-site). Por muito tempo, os valores de (dis)similaridade foram interpretados como sinônimo de substituição de espécies (turnover) entre comunidades. Contudo, índices de (dis)similaridade como Jaccard e Sørensen geram valores de (dis)similaridade para comunidades que não apresentam diferenças na composição de espécies, mas apresentam diferenças na riqueza de espécies (i.e. comunidades aninhadas). Pensando nestes fatores, Baselga (2012) propôs uma abordagem que particiona a diversidade beta total em dois componentes: o componente resultante da substituição de espécies (turnover) e o componente resultante do aninhamento (i.e. diferença na riqueza de espécies). Baselga (2013) propôs a a partição da diversidade beta para índices de dissimilaridade que lidam com dados de abundância. Neste caso os componentes da diversidade beta são chamados de variação balanceada na abundância (similar ao componente substituição de espécies) e gradiente de abundância (similar ao componente aninhamento). Reconhecer estes componentes da diversidade beta é importante porque eles apresentam padrões distintos (substituição de espécies vs perda ordenada de espécies) que provavelmente estão sendo gerados por processos ecológicos diferentes (Baselga 2010, 2012, 2013). Aqui, vamos demonstrar alguns exemplos de como calcular a partição da diversidade beta para os dados deste capítulo. Para isso, primeiro vamos transformar nossa planilha de abundância em presença e ausência. # Transformando dados em presencia e ausência. composicao_PA &lt;- decostand(composicao_especies, method = &quot;pa&quot;) Calculando a diversidade beta par a par usando os dados de presença e ausência. resultado_PA &lt;- beta.pair(composicao_PA, index.family = &quot;sorensen&quot;) A função beta.pairgera três listas com matrizes triangulares: Diversidade beta total = índice de Sorensen (beta.sor); Componente substituição de espécies = índice de Simpson (beta.sim); Componente aninhado = beta.sor - beta.sim. Vamos olhar os resultados da diversidade beta total. resultado_PA$beta.sor #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 #&gt; Com_2 0.0000000 #&gt; Com_3 0.3333333 0.3333333 #&gt; Com_4 0.3333333 0.3333333 1.0000000 #&gt; Com_5 0.3333333 0.3333333 0.6000000 0.4000000 #&gt; Com_6 0.2500000 0.2500000 0.4545455 0.4545455 0.4545455 #&gt; Com_7 0.6666667 0.6666667 0.7142857 0.7142857 1.0000000 0.7500000 #&gt; Com_8 0.4285714 0.4285714 0.7777778 0.3333333 0.3333333 0.2000000 1.0000000 #&gt; Com_9 0.2500000 0.2500000 0.4545455 0.4545455 0.2727273 0.5000000 0.7500000 0.4000000 #&gt; Com_10 0.4285714 0.4285714 0.3333333 0.7777778 0.5555556 0.4000000 0.6666667 0.7500000 0.6000000 Vamos montar um data.frame com os resultados data.frame_PA &lt;- data.frame(round(as.numeric(resultado_PA$beta.sor), 2), round(as.numeric(resultado_PA$beta.sim), 2), round(as.numeric(resultado_PA$beta.sne), 2)) colnames(data.frame_PA) &lt;- c(&quot;Sorensen&quot;, &quot;Simpson&quot;, &quot;Aninhamento&quot;) head(data.frame_PA) #&gt; Sorensen Simpson Aninhamento #&gt; 1 0.00 0 0.00 #&gt; 2 0.33 0 0.33 #&gt; 3 0.33 0 0.33 #&gt; 4 0.33 0 0.33 #&gt; 5 0.25 0 0.25 #&gt; 6 0.67 0 0.67 📝 Importante: Percebam que a primeira linha e primeira coluna do data frame (i.e. 0.00) representa a dissimilaridade de Sorensen entre a Com1 e Com2 (compare com os valores da matriz triangular acima). As linhas subsequentes representam a dissimilaridade da Com1 com todas as outras comunidades, depois da Com2 com todas as comunidades e assim sucessivamente. Lembrem-se que os componentes, subsituição (Simpson) e aninhamento, são um desdobramento da diversidade beta total (Sorensen). Assim, a soma da dissimilaridade de Simpson e aninhamento é igual ao valor de dissimilaridade de Sorensen (Baselga 2009, 2012). Vamos calcular a dissimilaridade entre a precipitação anual das comunidades usando o índice de distância euclidiana. Vejam a ajuda da função vegdist que calcula 17 índices diferentes de dissimilaridade. prec_dis &lt;- vegdist(precipitacao, method = &quot;euclidian&quot;) dados_prec &lt;- as.numeric(prec_dis) Agora vamos juntar os resultados. 📝 Importante: As comunidades devem estar dispostas na mesma ordem nas duas planilhas (composição de espécies e precipitação) para que os resultados representem as dissimilaridades par a par para as mesmas comunidades no data frame. Criando data.frame. dados_dis &lt;- data.frame(dados_prec, data.frame_PA) head(dados_dis) #&gt; dados_prec Sorensen Simpson Aninhamento #&gt; 1 88 0.00 0 0.00 #&gt; 2 400 0.33 0 0.33 #&gt; 3 1400 0.33 0 0.33 #&gt; 4 294 0.33 0 0.33 #&gt; 5 195 0.25 0 0.25 #&gt; 6 2270 0.67 0 0.67 Vamos testar a relação entre as diferença na composição de espécies e precipitação nas comunidades. # Avaliar a relação entre os valores de diversidade beta total (Sorensen) e precipitação anova(lm(dados_dis$Sorensen ~ dados_dis$dados_prec)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_dis$Sorensen #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_dis$dados_prec 1 0.00188 0.001877 0.0358 0.8508 #&gt; Residuals 43 2.25264 0.052387 # Avaliar a relação entre os valores do componente substituição (Simpson) e precipitação anova(lm(dados_dis$Simpson ~ dados_dis$dados_prec)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_dis$Simpson #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_dis$dados_prec 1 0.1403 0.140342 1.4905 0.2288 #&gt; Residuals 43 4.0488 0.094157 # Avaliar a relação entre os valores do componente aninhamento e precipitação anova(lm(dados_dis$Aninhamento ~ dados_dis$dados_prec)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_dis$Aninhamento #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_dis$dados_prec 1 0.17467 0.17467 6.4006 0.01515 * #&gt; Residuals 43 1.17349 0.02729 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Interpretação dos resultados Há uma relação positiva entre o componente aninhado da diversidade beta e a diferença na precipitação entre as comunidades (F1,43 = 6,4, P = 0,01). Contudo, não há relação entre a diversidade beta total (Sorensen) e o componente substituição de espécies (Simpson) com a precipitação (P &gt; 0,05). Agora vamos fazer um gráfico com o componente aninhamento da diversidade beta. ggplot(data = dados_dis, aes(x= dados_prec, y= Aninhamento)) + labs(x = &quot;Diferença precipitação (mm)&quot;, y = &quot;Componente aninhamento da\\n diversidade beta&quot;) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) Interpretação dos resultados As comunidades com baixa precipitação anual apresentam espécies que são um subgrupo das espécies presentes nas comunidades com alta precipitação anual. Agora vamos fazer um exemplo considerando os dados de abundância das espécies. A função beta.pair.abundgera três listas com matrizes triangulares: Diversidade beta total = índice de Bray-Curtis (beta.bray); Componente variação balanceada (beta.bray.bal); Componente gradiente de abundância (beta.bray.gra). Análise. resultado_AB &lt;- beta.pair.abund(composicao_especies, index.family = &quot;bray&quot;) Cria um data.frame com os resultados. # Vamos montar um data.frame com os resultados data.frame_AB &lt;- data.frame(round(as.numeric(resultado_AB$beta.bray), 2), round(as.numeric(resultado_AB$beta.bray.bal), 2), round(as.numeric(resultado_AB$beta.bray.gra), 2)) colnames(data.frame_AB) &lt;- c(&quot;Bray&quot;, &quot;Balanceada&quot;, &quot;Gradiente&quot;) head(data.frame_AB) #&gt; Bray Balanceada Gradiente #&gt; 1 0.81 0.81 0.00 #&gt; 2 0.69 0.42 0.27 #&gt; 3 0.45 0.38 0.06 #&gt; 4 0.47 0.07 0.40 #&gt; 5 0.47 0.15 0.31 #&gt; 6 0.92 0.00 0.92 ## Agora vamos juntar os resultados com a precipitação dados_dis_AB &lt;- data.frame(dados_prec, data.frame_AB) Testar a relação da dissimilaridade considerando a abundância com a diferença na precipitação entre as comunidades. ## Avaliar a relação entre os valores de diversidade beta total e precipitação anova(lm(dados_dis_AB$Bray ~ dados_dis$dados_prec)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_dis_AB$Bray #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_dis$dados_prec 1 0.01782 0.017815 0.8441 0.3634 #&gt; Residuals 43 0.90755 0.021106 ## Avaliar a relação entre os valores do componente balanceada e precipitação anova(lm(dados_dis_AB$Balanceada ~ dados_dis$dados_prec)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_dis_AB$Balanceada #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_dis$dados_prec 1 0.48761 0.48761 7.0742 0.01094 * #&gt; Residuals 43 2.96391 0.06893 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## Avaliar a relação entre os valores do componente gradiente e precipitação anova(lm(dados_dis_AB$Gradiente ~ dados_dis$dados_prec)) #&gt; Analysis of Variance Table #&gt; #&gt; Response: dados_dis_AB$Gradiente #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; dados_dis$dados_prec 1 0.68981 0.68981 18.705 8.903e-05 *** #&gt; Residuals 43 1.58575 0.03688 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Interpretação dos resultados Há uma relação positiva entre os componentes variação balanceada (F1,43 = 7,07, P = 0,01) e gradiente (F1,43 = 18,7, P &lt; 0,001) de abundância da diversidade beta com a diferença na precipitação entre as comunidades. Contudo, não há relação entre a diversidade beta total (Bray) com a precipitação (F1,43 = 0,84, P = 0,36). Vamos fazer um gráfico para cada um dos componentes da diversidade beta. ggplot(data = dados_dis_AB, aes(x= dados_prec, y= Balanceada)) + labs(x = &quot;Diferença precipitação (mm)&quot;, y = &quot;Componente variação balanceada\\n da diversidade beta&quot;) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) Interpretação dos resultados Olhando o ínicio do eixo X onde as comunidades apresentam precipitação anual similares (i.e. baixa diferença na precipitação), o componente variação balanceada indica que há uma tendência das espécies com maiores abundâncias não serem as mesmas quando comparamos duas comunidades (i.e. maiores valores de dissimilaridade). Por outro lado, quando a diferença na precipitação entre duas comunidades é alta, o componente variação balanceada é baixo, indicando que as mesmas espécies estão dominando a abundância nas comunidades comparadas. ggplot(data = dados_dis_AB, aes(x= dados_prec, y= Gradiente)) + labs(x = &quot;Diferença precipitação anual (mm)&quot;, y = &quot;Componente gradiente de abundância\\n da diversidade beta&quot;) + geom_point(size = 4, shape = 21, fill = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) Interpretação dos resultados Olhando o ínicio do eixo X onde as comunidades apresentam precipitação anual similares (i.e. baixa diferença na precipitação), o componente gradiente indica que há uma tendência das espécies apresentarem abundâncias parecidas (i.e. menor valor de dissimilaridade). Por outro lado, quando a diferença na precipitação entre duas comunidades é alta, o componente gradiente é alto, indicando que as mesmas espécies tem valores discrepantes de abundâncias entre as comunidades. 12.7.1 Para se aprofundar Recomendamos aos interessados a leitura dos artigos citados no capítulo e os livros Magurran &amp; McGill (2011) - Biological Diversity Frontiers in Measurement and Assessment and Legendre &amp; Legendre (2012b) - Numerical Ecology. Referências "],["cap13.html", "Capítulo 13 Diversidade Filogenética 13.1 Aspectos teóricos 13.2 Manipulação de filogenias 13.3 Métricas de diversidade alfa filogenética 13.4 Análise da dimensão riqueza da diversidade alfa filogenética 13.5 Phylogenetic Species Richness (PSR, Helmus et al. 2007) 13.6 Phylogenetic Endemism (PE, Rosauer et al. 2009) 13.7 Species Evolutionary Distinctiveness (ED, Redding &amp; Mooers 2006) 13.8 Análise da dimensão divergência da diversidade alfa filogenética 13.9 Mean Pairwise Distance (MPD, Webb et al. 2002) 13.10 Mean Nearest Taxon Distance (MNTD, Webb et al. 2002) 13.11 Phylogenetic Species Variability (PSV, Helmus et al. 2007) 13.12 Análise da dimensão regularidade da diversidade alfa filogenética 13.13 Variance of Pairwise Distance (VPD, Clarke &amp; Warwick 2001) 13.14 Correlação entre as métricas de diversidade alfa filogenética 13.15 Associação entre as métricas de diversidade alfa filogenética e o gradiente de precipitação 13.16 Métricas de diversidade beta filogenética 13.17 Análise da dimensão divergência da diversidade beta filogenética 13.18 Community Mean Pairwise Distance (COMDIST, Webb et al. 2008) 13.19 Community Mean Nearest Taxon Distance (COMDISTNT, Webb et al. 2008) 13.20 Correlação entre as métricas de diversidade beta filogenética 13.21 Associação entre as métricas de diversidade beta filogenética e o gradiente de precipitação 13.22 Análise da dimensão riqueza da diversidade beta filogenética 13.23 Phylogenetic index of beta diversity (Phylosor, Bryant et al. 2008) 13.24 Unique Fraction metric (UniFrac, Lozupone &amp; Knight 2005) 13.25 Vamos avaliar a correlação entre Phylosor e Unifrac 13.26 Partição da diversidade beta filogenética 13.27 Modelos Nulos 13.28 Nearest Relative Index (NRI) ou Standardized Effect Size of MPD (Webb et al. 2008) 13.29 Nearest Taxon Index (NTI) ou Standardized Effect Size of MNTD (Webb et al. 2008) 13.30 Standardized Effect Size of PD (Webb et al. 2008) 13.31 Standardized Effect Size", " Capítulo 13 Diversidade Filogenética Pré-requisitos do capítulo ## Pacotes library(devtools) # install_github(&quot;paternogbc/ecodados&quot;) library(ecodados) # install_github(&quot;jinyizju/V.PhyloMaker&quot;) library(V.PhyloMaker) library(vegan) library(ggplot2) library(GGally) library(ggpubr) library(picante) library(phytools) library(ape) library(geiger) library(phyloregion) library(pez) library(reshape2) library(betapart) ## Dados necessários minha_arvore &lt;- ecodados::filogenia_aves especies_plantas &lt;- ecodados::sp_list comunidade &lt;- ecodados::comm composicao_especies &lt;- ecodados::composicao_aves_filogenetica filogenia_aves &lt;- ecodados::filogenia_aves precipitacao &lt;- precipitacao_filogenetica 13.1 Aspectos teóricos A diversidade filogenética captura a ancestralidade compartilhada entre as espécies em termos de quantidade da história evolutiva e o grau de parentesco entre as espécies. Pesquisadores têm utilizado diferentes métricas de diversidade filogenética em duas linhas de investigações principais: i) incorporar a história evolutiva das espécies na seleção das áreas prioritárias para conservação visando minimizar a perda da diversidade evolutiva (Vane-Wright, Humphries, and Williams 1991; Faith 1992; Véron et al. 2019), e ii) produzir explicações sobre os processos atuando na montagem das comunidades (Webb et al. 2002; Helmus et al. 2007). A quantidade de artigos abordando ecologia, macroecologia e conservação com diversidade filogenética cresceram exponencialmente nas últimas décadas (Véron et al. 2019). Seguindo esta tendência, o número de métricas de diversidade filogenética propostas não param de aumentar. Tucker et al. (2016) revisaram 70 métricas de diversidade filogenética e classificaram estas métricas em três dimensões: i) riqueza - representa a soma da diferença filogenética acumulada entre táxons; ii) divergência - representa o padrão de diferença filogenética entre táxons de uma assembleia; e iii) regularidade - representa o grau de variação das diferenças filogenéticas entre táxons em uma assembleia. Outros autores utilizaram diferentes classificações (S. Pavoine and Bonsall 2010; M. Vellend et al. 2011; Garamszegi 2014). Neste capítulo, iremos seguir a classificação de Tucker et al. (2016) e mostrar algumas das principais métricas dentro de cada uma dessas dimensões. Alguns autores recomendam que os pesquisadores não foquem em apenas uma dimensão, mas comparem métricas de diferentes dimensões (Tucker et al. 2016). 13.2 Manipulação de filogenias Nesta seção, iremos descrever os códigos no R para carregar uma filogenia, plotar a filogenia, acessar os dados da filogenia e excluir e adicionar espécies na filogenia. Estes são códigos introdutórios e necessários para realizarmos as análises de diversidade filogenética. Não iremos descrever os comandos necessários para construir uma filogenia. Estamos assumindo que já existe uma filogenia disponível para os organismos de interesse. Mas antes vamos entender as terminologias de uma filogenia (Figura 1). Árvore filogenética: são hipóteses que representam o relação de parentesco entre as espécies (pode ser também individíduos, genes, etc.) com informações sobre quais espécies compartilham um ancestral comum e a distância (tempo, genética, ou diferenças nos caracteres) que as separam; Nó: o ponto onde uma linhagem da origem a duas ou mais linhagens descendentes; Politomia: Três ou mais linhagens descendendo de um único nó; Ramo: uma linha orientada ao longo de um eixo terminais-raiz que conecta os nós na filogenia; Terminal (do inglês tip): o final do ramo representando uma espécie atual ou extinta (pode também reprentar gêneros, indivíduos, genes, etc.); Raiz: representa o ancestral comum de todas as espécies na filogenia; Clado: um grupo de espécies aparentadas descendendo de um único nó na filogenia; Ultramétrica: a distância de todos os terminais até a raiz são identicas. Característica requerida pela maioria dos índices de diversidade filogenética. Ilustrações de diferentes árvores filogenéticas. A) Árvore enraizada e ultramétrica indicando a raiz da árvore, nós, ramos, comprimento do ramo, politomias e terminais. B) Árvore não enraizada que mostra as relações entre as espécies, mas não define a história evolutiva. C) Árvore não ultramétrica onde as espécies apresentam diferentes distâncias até a raiz.   Agora vamos plotar a filogenia para visualizar as relações entre as 37 espécies de aves endêmicas da Mata Atlântica. filogenia foi extraída de Jetz et al. (2012). Os dados estão disponíveis no pacote ecodados. plot.phylo (minha_arvore, type = &quot;phylogram&quot;, show.tip.label = TRUE, show.node.label = TRUE, edge.color = &quot;black&quot;, edge.width = 1.5, tip.color = &quot;black&quot;, cex = 0.45, label.offset = 2) Podemos alterar o formato de apresentação da filogenia usando o argumento type e a cor dos ramos usando o argumento edge.color. plot.phylo (minha_arvore, type = &quot;fan&quot;, show.tip.label = TRUE, show.node.label = TRUE, edge.color = &quot;blue&quot;, edge.width = 1.5, tip.color = &quot;black&quot;, cex = 0.45, label.offset = 2) Percebam que existem vários argumentos para modificar a largura e cor dos ramos, tamanho da fonte, distância entre a filogenia e o nomes da espécies e muito mais. Uma sugestão é visitar o blog do professor Liam Revell (http://blog.phytools.org/) que é o criador e mantenedor do pacote phytools no R. Um das características mais interessantes do R é que podemos acessar as informações do objeto. Neste caso, o nosso objeto é a filogenia e, muitas vezes, temos interesse nas informações que estão inseridas dentro da filogenia. Para sabermos quais são as informações que podemos acessar na filogenia, vamos usar a função names(). names(minha_arvore) #&gt; [1] &quot;edge&quot; &quot;edge.length&quot; &quot;Nnode&quot; &quot;tip.label&quot; Temos acesso a quatro componentes da filogenia: i) ramo (edge), ii) comprimento do ramo (edge.length), iii) número de nós (Nnode), e iv) nome das espécies (tip.label). Podemos usar o operador $ para acessar estes componentes. Veja abaixo como acessar o nome das 37 espécies de aves na filogenia. minha_arvore$tip.label #&gt; [1] &quot;Cranioleuca_pallida&quot; &quot;Synallaxis_ruficapilla&quot; &quot;Phacellodomus_ferrugineigula&quot; #&gt; [4] &quot;Cinclodes_pabsti&quot; &quot;Conopophaga_melanops&quot; &quot;Herpsilochmus_pileatus&quot; #&gt; [7] &quot;Pyriglena_leucoptera&quot; &quot;Formicivora_serrana&quot; &quot;Chiroxiphia_caudata&quot; #&gt; [10] &quot;Neopelma_aurifrons&quot; &quot;Carpornis_cucullata&quot; &quot;Mionectes_rufiventris&quot; #&gt; [13] &quot;Phylloscartes_kronei&quot; &quot;Dacnis_nigripes&quot; &quot;Ramphocelus_bresilius&quot; #&gt; [16] &quot;Sporophila_frontalis&quot; &quot;Tangara_seledon&quot; &quot;Euphonia_pectoralis&quot; #&gt; [19] &quot;Cyanocorax_caeruleus&quot; &quot;Brotogeris_tirica&quot; &quot;Pionopsitta_pileata&quot; #&gt; [22] &quot;Pyrrhura_frontalis&quot; &quot;Ramphastos_dicolorus&quot; &quot;Pteroglossus_bailloni&quot; #&gt; [25] &quot;Veniliornis_maculifrons&quot; &quot;Melanerpes_flavifrons&quot; &quot;Malacoptila_striata&quot; #&gt; [28] &quot;Strix_hylophila&quot; &quot;Pulsatrix_koeniswaldiana&quot; &quot;Megascops_sanctaecatarinae&quot; #&gt; [31] &quot;Leucopternis_polionotus&quot; &quot;Buteogallus_lacernulatus&quot; &quot;Thalurania_glaucopis&quot; #&gt; [34] &quot;Stephanoxis_lalandi&quot; &quot;Aramides_saracura&quot; &quot;Ortalis_guttata&quot; #&gt; [37] &quot;Tinamus_solitarius&quot; ou o comprimento de cada um dos ramos da filogenia. minha_arvore$edge.length #&gt; [1] 8.3802647 18.8669712 1.7333865 3.6642170 10.6732942 15.2239228 11.0917270 1.7755983 28.3607791 #&gt; [10] 2.9678911 1.7546545 8.0910030 8.0910030 9.8456576 12.8135486 41.1743278 25.4606915 0.5546030 #&gt; [19] 16.9346316 16.9346316 17.4892346 18.4363079 4.6581580 13.5498048 17.3960309 17.3960309 30.9471871 #&gt; [28] 12.4567724 23.1472214 23.1472214 17.4065182 24.1723764 12.4712971 2.4600303 12.6082491 12.5529673 #&gt; [37] 12.6146793 15.2153841 27.6866812 51.8590576 50.4721698 1.0975337 28.3691666 28.3691666 29.4667004 #&gt; [46] 0.4805624 1.9967144 2.7687118 17.0272986 23.4955884 20.5338341 17.3003772 17.3003772 22.2636579 #&gt; [55] 15.5705534 15.5705534 61.3297997 50.6621138 5.3479249 22.3470597 22.3470597 27.6949846 66.5513507 #&gt; [64] 14.5744595 14.5744595 67.7448719 15.3776527 15.3776527 85.3364736 104.2034448 112.5837095 Nas análises de diversidade filogenética, as espécies que estarão presentes na filogenia normalmente são aquelas que foram amostradas no seu estudo. Contudo, muitas vezes utilizamos filogenias contendo espécies que não estão presentes no nosso estudo. Neste caso, precisamos excluir essas espécies da filogenia. A função drop.tip() faz essa tarefa. # Vamos criar um novo nome para o objeto e excluir as espécies Leucopternis polionotus # e Aramides saracura da filogenia filogenia_cortada &lt;- drop.tip(minha_arvore, c(&quot;Leucopternis_polionotus&quot;, &quot;Aramides_saracura&quot;)) filogenia_cortada #&gt; #&gt; Phylogenetic tree with 35 tips and 33 internal nodes. #&gt; #&gt; Tip labels: #&gt; Cranioleuca_pallida, Synallaxis_ruficapilla, Phacellodomus_ferrugineigula, Cinclodes_pabsti, Conopophaga_melanops, Herpsilochmus_pileatus, ... #&gt; #&gt; Rooted; includes branch lengths. Vejam que agora a filogenia tem 35 espécies de aves. As duas espécies que selecionamos foram excluídas da filogenia. Outra situação bem comum é quando precisamos inserir espécies que foram amostradas no nosso estudo, mas não estão presente na filogenia. Para isso, vamos usar a função add.species.to.genus. A função force.ultrametric é usada para que a filogenia continue sendo ultramétrica (sem essa função a árvore perde os comprimentos dos ramos) 📝 Importante: O comprimento do ramo que a espécie irá receber dependerá de onde você indicar a inserção da espécie. As opções são: root que insere a espécie no ancestral comum mais recente (MRCA) de todas as espécies do gênero (default); random que insere a espécie aleatoriamente dentro do clado do MRCA contendo todos as espécies do gênero. # Vamos inserir as espécies Megascops_sp1, Carponis_sp, Strix_sp1, Strix_sp2 e # Strix_sp3 na filogenia Megascops &lt;- c(&quot;Megascops_sp1&quot;) Carpornis &lt;- c(&quot;Carpornis_sp1&quot;) Strix &lt;- c(&quot;Strix_sp1&quot;, &quot;Strix_sp2&quot;, &quot;Strix_sp3&quot;) # Inserindo espécies como politomias filogenia_nova &lt;- add.species.to.genus(force.ultrametric(minha_arvore), Megascops) #&gt; *************************************************************** #&gt; * Note: * #&gt; * force.ultrametric does not include a formal method to * #&gt; * ultrametricize a tree &amp; should only be used to coerce * #&gt; * a phylogeny that fails is.ultramtric due to rounding -- * #&gt; * not as a substitute for formal rate-smoothing methods. * #&gt; *************************************************************** filogenia_nova &lt;- add.species.to.genus(force.ultrametric(filogenia_nova), Carpornis) #&gt; *************************************************************** #&gt; * Note: * #&gt; * force.ultrametric does not include a formal method to * #&gt; * ultrametricize a tree &amp; should only be used to coerce * #&gt; * a phylogeny that fails is.ultramtric due to rounding -- * #&gt; * not as a substitute for formal rate-smoothing methods. * #&gt; *************************************************************** Agora vamos inserir várias espécies dentro do mesmo gênero. # Para inserir mais de uma espécie dentro do gênero, vamos utilizar um loop. for(i in 1:length(Strix)) filogenia_nova &lt;- add.species.to.genus(force.ultrametric(filogenia_nova), Strix[i], where=&quot;root&quot;) #&gt; *************************************************************** #&gt; * Note: * #&gt; * force.ultrametric does not include a formal method to * #&gt; * ultrametricize a tree &amp; should only be used to coerce * #&gt; * a phylogeny that fails is.ultramtric due to rounding -- * #&gt; * not as a substitute for formal rate-smoothing methods. * #&gt; *************************************************************** #&gt; *************************************************************** #&gt; * Note: * #&gt; * force.ultrametric does not include a formal method to * #&gt; * ultrametricize a tree &amp; should only be used to coerce * #&gt; * a phylogeny that fails is.ultramtric due to rounding -- * #&gt; * not as a substitute for formal rate-smoothing methods. * #&gt; *************************************************************** #&gt; *************************************************************** #&gt; * Note: * #&gt; * force.ultrametric does not include a formal method to * #&gt; * ultrametricize a tree &amp; should only be used to coerce * #&gt; * a phylogeny that fails is.ultramtric due to rounding -- * #&gt; * not as a substitute for formal rate-smoothing methods. * #&gt; *************************************************************** plot(filogenia_nova, cex = 0.5, no.margin = TRUE) Vamos fazer outro exemplo usando a função phylo.maker() do pacote V.PhyloMaker que adiciona as espécies nos gêneros ou os gêneros nas famílias usando uma filogênia backbone. Essa função permite a adição dos gêneros ou espécies considerando três cenários diferentes: Cenário 1 - adiciona gêneros ou espécies como politomias basais dentro das famílias ou gêneros da filogenia respectivamente. Cenário 2 - adiciona gêneros e espécies aleatoriamente nas famílias ou gêneros da filogenia respectivamente. Cenário 3 - adiciona gêneros e espécies nas famílias ou gêneros da filogenia respectivamente usando as abordagens implementadas no Phylomatic e BLADJ. # A função phylo.maker usa uma filogenia default de plantas (i.e. GBOTB.extended). # Caso você queira utilizar outra filogenia, é só alterar o argumento tree novas_filogenias &lt;- phylo.maker(especies_plantas, tree = GBOTB.extended, scenarios=c(&quot;S1&quot;,&quot;S2&quot;,&quot;S3&quot;)) #&gt; [1] &quot;Note: 2 taxa fail to be binded to the tree,&quot; #&gt; [1] &quot;Genus7_sp1&quot; &quot;Genus8_sp1&quot; # Gráfico mostrando o resultado para os cenários 1 e 3 par(mfrow = c(1, 2)) plot.phylo(novas_filogenias$scenario.1, cex = 0.5, main = &quot;Cenário 1&quot;) plot.phylo(novas_filogenias$scenario.3, cex = 0.5, main = &quot;Cenário 3&quot;) dev.off() #&gt; null device #&gt; 1 13.3 Métricas de diversidade alfa filogenética Métricas de diversidade alfa utilizam os dados de incidência (presença e ausência) ou abundância das espécies para determinar um valor de diversidade para cada comunidade ou sítio de interesse. 13.3.0.1 Exemplo prático 1 - Medidas de diversidade filogenética Explicação dos dados Avaliaremos a diversidade filogenética de 10 comunidades de aves amostradas ao longo de um gradiente de precipitação. Utilizaremos este conjunto de dados para todos os exemplos deste capítulo. Pergunta: A variação na distribuição espacial dos valores de diversidade filogenética das comunidades está associada com o gradiente de precipitação? Predições Os valores de diversidade filogenética serão maiores nas comunidades localizadas em regiões com altas precipitações do que em regiões mais secas. Variáveis Variáveis resposta e preditoras Dataframe com as comunidades (unidade amostral) nas linhas e as espécies de aves nas colunas (variável resposta). Dataframe com as comunidades (unidade amostral) nas linhas e a variável precipitação anual na coluna (variável preditora). Arquivo com a filogenia das 37 espécies de aves (variável resposta). Checklist Verificar se os dataframes de composição de espécies e variáveis ambientais estão com as unidades amostrais nas linhas e variáveis preditoras nas colunas Verificar se as comunidades nos dataframes de composição de espécies e variáveis ambientais estão distribuídos na mesma sequência/ordem nos dois arquivos. Verificar se o nome das espécies de aves no dataframe de composição de espécies é idêntico ao nome das espécies na filogenia. 13.4 Análise da dimensão riqueza da diversidade alfa filogenética As métricas de riqueza somam a quantidade da diferença filogenética presente em uma comunidade (Tucker et al. 2016). 13.4.1 Phylogenetic diversity (PD, Faith 1992) Esta métrica é definida pela soma do comprimento dos ramos conectando todas as espécies na comunidade. É a métrica mais conhecida e usada nos estudos de conservação e comunidade. Vamos conferir se os nomes das espécies de aves no dataframe de composição são os mesmos da filogenia - OK indica que os nomes estão corretos. Caso contrário, verificar e arrumar. name.check(filogenia_aves, t(composicao_especies)) #&gt; [1] &quot;OK&quot; Os nomes das espécies que estão na planilha são iguais aos nomes das espécies que estão na filogenia. Podemos continuar as análises. Abaixo, demonstramos os códigos no R para o cálculo de PD para as comunidades de aves. # Calculando a métrica de diversidade filogenética proposta por Faith (1992). resultados_PD &lt;- pd(composicao_especies, filogenia_aves) # Mostra o valor de PD e riqueza de espécies para cada comunidade. resultados_PD #&gt; PD SR #&gt; Com_1 1259.3151 27 #&gt; Com_2 1293.1521 26 #&gt; Com_3 1222.3102 25 #&gt; Com_4 1254.5410 25 #&gt; Com_5 1021.9670 22 #&gt; Com_6 856.7810 18 #&gt; Com_7 930.6452 15 #&gt; Com_8 678.9394 12 #&gt; Com_9 673.6288 13 #&gt; Com_10 599.6924 9 A comunidade 2 abriga a maior diversidade filogenética com a composicação de espécies contemplando 1293,15 milhões de anos (i.e. soma do comprimento dos ramos ligando todas as espécies da comunidade). Por outro lado, a comunidade 10 abriga a menor diversidade filogenética contemplando 599,69 milhões de anos. Importante, este índice é correlacionado com a riqueza de espécies. Discutiremos essa questão na seção de modelos nulos. 13.5 Phylogenetic Species Richness (PSR, Helmus et al. 2007) Esta métrica é calculada multiplicando a riqueza de espécies registrada na comunidade pela Phylogenetic Species Variability (PSV) da comunidade. PSR é diretamente comparável ao número de espécies na comunidade, mas inclui o parentesco filogenético entre as espécies. Abaixo, demonstramos os códigos no R para o cálculo do PSR utilizando os dados das comunidades de aves. # Análise com dados de composição das espécies nas comunidades. resultados_PSR &lt;- psr(composicao_especies,filogenia_aves) # Mostra os valores de PSR para cada comunidade. resultados_PSR #&gt; PSR SR vars #&gt; Com_1 18.084236 27 0.04537904 #&gt; Com_2 18.167183 26 0.04881734 #&gt; Com_3 16.230938 25 0.05205832 #&gt; Com_4 17.153972 25 0.05205832 #&gt; Com_5 13.981597 22 0.06060866 #&gt; Com_6 11.287030 18 0.06933707 #&gt; Com_7 10.279983 15 0.07398666 #&gt; Com_8 7.538134 12 0.07721118 #&gt; Com_9 8.060933 13 0.07627517 #&gt; Com_10 5.720063 9 0.07948474 13.6 Phylogenetic Endemism (PE, Rosauer et al. 2009) Esta métrica calcula a fração dos ramos restritas a regiões específicas. PE identifica áreas ou comunidades que abrigam componentes restritos da diversidade filogenética. PE é uma métrica proposta para auxiliar estudos de conservação estabelecendo critérios para priorizar regiões a serem conservadas com base na importância evolutiva (i.e. partes da filogênia com distribuição espacial limitada) das espécies que ocorrem nestes locais (Rosauer et al. 2009). Abaixo, demonstramos os códigos no R para o cálculo do PE utilizando os dados das comunidades de aves. # Transformando data.frame em matriz. dados_matriz &lt;- as.matrix(composicao_especies) # Análise. resultados_PE &lt;- phylo_endemism(dados_matriz, filogenia_aves, weighted = TRUE) # Mostra os valores de PE para cada comunidade. resultados_PE #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 Com_10 #&gt; 232.09145 272.60106 210.22647 218.89037 146.99281 135.06423 148.65234 79.22402 77.95458 68.50266 O índice PE considera as 10 comunidades como o range espacial máximo. Se todas as espécies ocorressem nas 10 comunidades, o valor de PE seria 1 indicando baixo endemismo filogenético. A comunidade 2 abriga um conjunto de espécies cujo os ramos com distribuição espacial restrita contemplam 272,6 milhões de anos. Por outro lado, a comunidade 10 abriga um conjunto de espécies cujo os ramos com distribuição espacial restrita contemplam 68,5 milhões de anos . Assim, as comunidades 2, 1 e 4 são as áreas que abrigam os maiores endemismo filogenéticos. 13.7 Species Evolutionary Distinctiveness (ED, Redding &amp; Mooers 2006) Esta métrica calcula qual é a fração da árvore filogenética que é atribuída para uma espécie. ED reflete quão evolutivamente isolada uma espécie é comparada com as outras espécies na filogenia (Redding and Mooers 2006). ED é uma métrica proposta para auxiliar estudos de conservação estabelecendo critérios para priorizar as espécies a serem conservadas com base na sua importância evolutiva (exclusividade do comprimento do ramo) que não é comportilhada com outras espécies. Portanto, apenas as informações da filogenia são utilizadas para o cálculo de ED. Abaixo, demonstramos os códigos no R para o cálculo do ED utilizando os dados das comunidades de aves. # Análise. resultados_ED &lt;- evol.distinct(filogenia_aves) # Mostra os valores de ED para cada espécie. head(resultados_ED) #&gt; Species w #&gt; 1 Cranioleuca_pallida 14.07447 #&gt; 2 Synallaxis_ruficapilla 14.07447 #&gt; 3 Phacellodomus_ferrugineigula 20.05793 #&gt; 4 Cinclodes_pabsti 30.27020 #&gt; 5 Conopophaga_melanops 47.72685 #&gt; 6 Herpsilochmus_pileatus 26.40947 13.8 Análise da dimensão divergência da diversidade alfa filogenética As métricas de divergência utilizam a média da distribuição das unidades extraídas da árvore filogenética (Tucker et al. 2016). 13.9 Mean Pairwise Distance (MPD, Webb et al. 2002) Esta métrica utiliza a matriz de distância filogenética para quantificar a distância média do parentesco entre pares de espécies em uma comunidade. Este índice pode ser calculado considerando dados de incidência ou considerando dados de abundância das espécies. Importante, o MPD é uma métrica que pesa a estrutura interna da filogenia (e.g. relações entre espécies de famílias diferentes). Abaixo, demonstramos os códigos no R para o cálculo do MPD utilizando os dados das comunidades de aves. Vamos iniciar com dados de incidência (presença e ausência) das espécies nas comunidades. A função cophenetic gera uma matriz com as distâncias par a par entre as espécies. Essas distâncias são utilizadas para computar a distância média do parentesco das espécies dentro das comunidades. resultados_MPD_PA &lt;- mpd(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = FALSE) # Mostra os valores de MPD para cada comunidade. resultados_MPD_PA #&gt; [1] 150.7914 157.3158 146.1622 154.5005 143.0727 141.1926 154.3145 141.4292 139.6198 143.0862 A comunidade 9 abriga a composição de espécies mais aparentada (i.e. menor diversidade filogenética) com distância média entre as espécies de 139,62 milhões de anos. Por outro lado, a comunidade 2 abriga a composição de espécies menos aparentada (i.e. maior diversidade filogenética) com distância média de 157,31 milhões anos. Vamos refazer a análise do MPD, mas desta vez, considerando a abundância das espécies de aves nas comunidades. Para isso, alteramos o argumento abundance.weighted = TRUE. # Análise com dados de abundância das espécies nas comunidades. resultados_MPD_AB &lt;- mpd(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = TRUE) # Mostra os valores de MPD para cada comunidade. resultados_MPD_AB #&gt; [1] 135.0704 143.3156 129.1940 142.8127 131.4027 128.7733 134.0380 132.6389 133.4041 117.8787 Percebam que pesando o comprimento do ramo pela abundância das espécies altera-se os valores do índice de diversidade filogenética. Neste caso, a comunidade 10 passa a ser a comunidade que abriga a composição de espécies mais aparentada (i.e. menor diversidade filogenética) com distância média entre as espécies de 117,88 milhões de anos. 13.10 Mean Nearest Taxon Distance (MNTD, Webb et al. 2002) Esta métrica utiliza a matriz de distância filogenética para quantificar a média dos valores mínimos de parentesco entre pares de espécies em uma comunidade. Ou seja, qual o valor médio da distância para o vizinho mais próximo. Este índice pode ser calculado considerando dados de incidência (presença e ausência) ou considerando dados de abundância das espécies. Diferente do MPD, o MNTD é uma métrica terminal que pesa as relações nas pontas da filogenia (e.g. espécies dentro do mesmo gênero). Abaixo, demonstramos os códigos no R para o cálculo do MNTD utilizando os dados das comunidades de aves. # Análise com dados de presença e ausência das espécies nas comunidades. resultados_MNTD_PA &lt;- mntd(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = FALSE) # Mostra os valores de MPD para cada comunidade. resultados_MNTD_PA #&gt; [1] 63.89727 66.15828 72.96912 67.67170 64.93477 63.72337 93.54980 78.24876 62.34565 112.23127 A comunidade 9 abriga a composição de espécies com distância média do vizinho mais próximo de 62,34 milhões de anos. Esse resultado indica que as espécies terminais são mais aparentada (e.g. espécies do mesmo gênero) do que a composição de espécies da comunidade 10 onde a distância média do vizinho mais próximo é 112,23 milhões de anos (e.g. espécies de gêneros diferentes). Vamos refazer a análise do MNTD, mas desta vez, considerando a abundância das espécies de aves nas comunidades. # Análise com dados de abundância das espécies nas comunidades. resultados_MNTD_AB &lt;- mntd(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = TRUE) # Mostra os valores de MPD para cada comunidade. resultados_MNTD_AB #&gt; [1] 57.11745 53.02212 70.47864 59.12049 61.23225 60.26180 110.13043 97.35404 82.12099 127.70084 13.11 Phylogenetic Species Variability (PSV, Helmus et al. 2007) Esta métrica estima a quantidade relativa dos comprimentos dos ramos não compartilhados entre as comunidades. Quando todas as espécies em uma amostra não são aparentadas (i.e. filogenia em estrela), o valor do PSV é 1 (um), indicando máxima variabilidade. Quando as espécies tornando-se mais aparentadas, o valor de PSV aproxima-se de 0 (zero), indicando reduzida variabilidade. Os valores esperados de PSV são estatisticamente independentes da riqueza de espécies. 📝 Importante: Os valores de PSV são idênticos ao MPD quando a filogenia é ultramétrica. Abaixo, demonstramos os códigos no R para o cálculo do PSV utilizando os dados das comunidades de aves. # Análise com dados de presença e ausência das espécies nas comunidades. resultados_PSV &lt;- psv(composicao_especies,filogenia_aves) # Mostra os valores de PSV para cada comunidade. resultados_PSV #&gt; PSVs SR vars #&gt; Com_1 0.6697865 27 6.224834e-05 #&gt; Com_2 0.6987378 26 7.221499e-05 #&gt; Com_3 0.6492375 25 8.329332e-05 #&gt; Com_4 0.6861589 25 8.329332e-05 #&gt; Com_5 0.6355271 22 1.252245e-04 #&gt; Com_6 0.6270572 18 2.140033e-04 #&gt; Com_7 0.6853322 15 3.288296e-04 #&gt; Com_8 0.6281778 12 5.361887e-04 #&gt; Com_9 0.6200717 13 4.513324e-04 #&gt; Com_10 0.6355626 9 9.812931e-04 13.12 Análise da dimensão regularidade da diversidade alfa filogenética As métricas de regularidade caracterizam a variação das distâncias entre as espécies em uma comunidade (Tucker et al. 2016). 13.13 Variance of Pairwise Distance (VPD, Clarke &amp; Warwick 2001) Esta métrica utiliza a matriz de distância filogenética para quantificar a variância do parentesco entre pares de espécies em uma comunidade (Clarke and Warwick 2001). Abaixo, demonstramos os códigos no R para o cálculo do VPD utilizando os dados das comunidades de aves. # Transformando data.frame em matriz. dados_matriz &lt;- as.matrix(composicao_especies) # Transformar os dados para o formato requerido pelo pacote pez. dados &lt;- comparative.comm (filogenia_aves, dados_matriz) # Análise. resultados_VPD &lt;- .vpd(dados, cophenetic(filogenia_aves)) # Mostra os valores de VPD para cada comunidade. resultados_VPD #&gt; Com_1 Com_10 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 #&gt; 1619.4697 1031.8887 1828.1930 1630.4026 1317.9919 1465.1728 1519.6115 825.5349 1278.0076 1508.0495 13.14 Correlação entre as métricas de diversidade alfa filogenética Vamos avaliar a correlação entre os valores das métricas de diversidade alfa filogenética. Vamos criar um data.frame com os resultados das métricas separados para as dimensões de riqueza e divergência. Não iremos fazer para regularidade pois só apresentamos uma métrica de diversidade filogenética nesta dimensão. # Vamos criar um data.frame com os resultados das métricas da dimensão riqueza. metricas_riqueza &lt;- data.frame(riqueza = resultados_PD$SR, PD = resultados_PD$PD, PSR = resultados_PSR$PSR, PE = resultados_PE) # Gráfico mostrando na parte: # i) inferior a distribuição dos pontos considerando as métricas pareadas; # ii) superior o valor da correlação de pearson; e # iii) diagonal a curva de densidade. ggpairs(metricas_riqueza, upper = list(continuous = wrap(&quot;cor&quot;, size = 4))) Percebam que as três métricas apresentam correlações pareadas acima de 96%. Isso indica que as métricas são redundantes. Portanto, não há necessidade de calcular mais de uma métrica dentro da dimensão da riqueza filogenética. Além disso, as três métricas de diversidade alfa filogenética também apresentam alta correlação com a riqueza de espécies. Veja abaixo na seção de modelos nulos como controlar o efeito da riqueza de espécies nas métricas de diversidade filogenética. Vamos avaliar a correlação entre os valores das métricas de diversidade alfa filogénetica para a dimensão divergência. # Vamos criar um data.frame com os resultados das métricas da dimensão divergência. metricas_divergencia &lt;- data.frame(riqueza = resultados_PD$SR, MPD = resultados_MPD_PA, MPD_AB = resultados_MPD_AB, MNTD = resultados_MNTD_PA, MNTD_AB = resultados_MNTD_AB, PSV = resultados_PSV$PSVs) # Gráfico. ggpairs(metricas_divergencia, upper = list(continuous = wrap(&quot;cor&quot;, size = 4))) Como mencionado, as métricas MPD e PSV são idênticas quando usamos uma filogenia ultramétrica. Contudo, as métricas de divergência não apresentam correlações tão altas como as métricas da dimensão riqueza, com exceção do MNTD usando dados de incidência e abundância que foram fortemente correlacionados (r = 0,9). Além disso, estas métricas não são tão afetadas pela riqueza de espécies das comunidades como as métricas da dimensão riqueza. 13.15 Associação entre as métricas de diversidade alfa filogenética e o gradiente de precipitação Vamos avaliar e plotar a relação entre os valores de algumas métrica de diversidade alfa filogenética (variável resposta) e os valores de precipitação (variável preditora). # Vamos inserir os dados de precipitação na planilha metrica_divergencia. metricas_divergencia$precipitacao &lt;- precipitacao_filogenetica$prec # Gráficos. MPD_PA_plot &lt;- ggplot(metricas_divergencia, aes(precipitacao, MPD)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Mean Pairwise Distance\\n (MPD - Ausência e Presença)&quot;) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() MPD_AB_plot &lt;- ggplot(metricas_divergencia, aes(precipitacao, MPD_AB)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Mean Pairwise Distance\\n (MPD - Abundância)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() MNTD_AP_plot &lt;- ggplot(metricas_divergencia, aes(precipitacao, MNTD)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Mean Nearest Taxon Distance\\n (MNTD - Ausência e Presença)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() MNTD_AB_plot &lt;- ggplot(metricas_divergencia, aes(precipitacao, MNTD_AB)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Mean Nearest Taxon Distance\\n (MNTD - Abundância)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) ggarrange(MPD_PA_plot, MPD_AB_plot, MNTD_AP_plot, MNTD_AB_plot, ncol = 2, nrow = 2) O MPD, que avalia as relações de parentesco mais internas da filogenia (i.e. relações entre espécies de famílias diferentes) não apresentou associação com o gradiente de precipitação. Por outro lado, o MNTD que avalia as relações mais terminais da filogenia (i.e. espécies dentro do mesmo gênero) apresentou uma relação negativa com o gradiente de precipitação. Interessante que a associação só foi significativa quando pesamos a análise pela abundância das espécies nas comunidades. Esses resultados demonstram a importância da seleção das métricas de diversidade filogenética e tipos de dados (e.g. incidência ou abundância) utilizados na interpretação dos padrões observados na natureza. Vamos ver os gráficos das métricas da dimensão riqueza da diversidade alfa filogenética # Vamos inserir os dados de precipitação na planilha metrica_riqueza. metricas_riqueza$precipitacao &lt;- precipitacao$prec # Gráficos. Riqueza_plot &lt;- ggplot(metricas_riqueza, aes(precipitacao, riqueza)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Riqueza de espécies&quot;) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) PD_plot &lt;- ggplot(metricas_riqueza, aes(precipitacao, PD)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Diversidade Filogenética\\n (Faith)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) PSR_plot &lt;- ggplot(metricas_riqueza, aes(precipitacao, PSR)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Phylogenetic Species Richness\\n (PSR)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) PE_plot &lt;- ggplot(metricas_riqueza, aes(precipitacao, PE)) + labs(x = &quot;Precipitação (mm)&quot;, y = &quot;Phylogenetic Endemism\\n (PE)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) ggarrange(Riqueza_plot, PD_plot, PSR_plot, PE_plot, ncol = 2, nrow = 2) As três métricas de diversidade filogenética foram relacionadas com o gradiente de precipitação. Esse resultado indica que comunidades localizadas em áreas com maior precipitação anual abrigaram maior diversidade filogenética do que comunidades localizadas em áreas mais secas. Contudo, estas métricas são dependentes da riqueza de espécies nas comunidades. Veja abaixo a seção de modelos nulos para entender como lidar com essa dependência. 13.16 Métricas de diversidade beta filogenética Métricas de diversidade beta filogenética utilizam dados de presença e ausência ou abundância das espécies para determinar um valor que representa a diferença entre comunidades em relação a história evolutiva das linhagens. 13.17 Análise da dimensão divergência da diversidade beta filogenética 13.18 Community Mean Pairwise Distance (COMDIST, Webb et al. 2008) Esta métrica é uma extensão do MPD. COMDIST calcula a média da distância filogenética entre as espécies de duas comunidades (Webb, Ackerly, and Kembel 2008). COMDIST pode ser calculada usando dados de incidência (presença e ausência) ou abundância das espécies. Esta extensão do MPD também é conhecida na literatura como Dpw (Swenson 2011, 2014). Abaixo, demonstramos os códigos no R para o cálculo do COMDIST utilizando os dados das comunidades de aves. # Análise com dados de presença e ausência das espécies nas comunidades. resultados_Comdist_PA &lt;- comdist(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = FALSE) Vamos refazer a análise do COMDIST, mas desta vez, considerando a abundância das espécies de aves nas comunidades. # Análise com dados de abundância das espécies nas comunidades. resultados_Comdist_AB &lt;- comdist(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = TRUE) 13.19 Community Mean Nearest Taxon Distance (COMDISTNT, Webb et al. 2008) Esta métrica é uma extensão do MNTD. COMDISTNT calcula a média da distância filogenética entre o táxon mais próximo das espécies de duas comunidades. COMDISTNT pode ser calculada usando dados de incidência ou abundância das espécies. Esta extensão do MNTD também é conhecida na literatura como Dnn (Swenson 2011). Abaixo, demonstramos os códigos no R para o cálculo do COMDISTNT utilizando os dados das comunidades de aves. # Análise com dados de presença e ausência das espécies nas comunidades. resultados_Comdistnt_PA &lt;- comdistnt(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = FALSE) Vamos refazer a análise do COMDISTNT, mas desta vez, considerando a abundância das espécies de aves nas comunidades. # Análise com dados de abundância das espécies nas comunidades. resultados_Comdistnt_AB &lt;- comdistnt(composicao_especies, cophenetic(filogenia_aves), abundance.weighted = TRUE) 13.20 Correlação entre as métricas de diversidade beta filogenética Vamos avaliar a correlação entre os valores das métricas da diversidade beta filogenética para a dimensão divergência. # Vamos criar um data.frame com os resultados das métricas da dimensão # divergência. metricas_divergencia_beta &lt;- data.frame( COMDIST_PA = as.numeric(resultados_Comdist_PA), COMDIST_AB = as.numeric(resultados_Comdist_AB), COMDISTNT_PA = as.numeric(resultados_Comdistnt_PA), COMDISTNT_AB = as.numeric(resultados_Comdistnt_AB)) # Gráfico. ggpairs(metricas_divergencia_beta, upper=list(continuous = wrap(&quot;cor&quot;, size = 4))) Os valores das métricas de divergência filogenética beta apresentam correlações mais baixas do que as métricas da dimensão riqueza . Lembrem-se que COMDIST e COMDISTNT dão pesos diferentes para as relações de parentesco. COMDIST pesa as relações mais basais e internas da filogenia, enquanto COMDISTNT pesa as relações nas partes terminais da filogenia. Portanto, elas podem trazer informações complementares. 13.21 Associação entre as métricas de diversidade beta filogenética e o gradiente de precipitação Vamos avaliar e plotar a relação entre os valores de algumas métrica de diversidade beta filogenética (variável resposta) e os valores de precipitação (variável preditora). # Precisamos calcular a dissimilaridade par a par da precipitação entre # as comunidades. dis_prec &lt;- vegdist(precipitacao, &quot;euclidian&quot;) # Vamos inserir estes dados na planilha metrica_divergencia_beta. metricas_divergencia_beta$dis_prec &lt;- as.numeric(dis_prec) # Gráficos. COMDIST_PA_plot &lt;- ggplot(metricas_divergencia_beta, aes(dis_prec, COMDIST_PA)) + labs(x = &quot;Diferença na precipitação (mm)&quot;, y = &quot;COMDIST\\n (Presença e Ausência)&quot;) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() COMDIST_AB_plot &lt;- ggplot(metricas_divergencia_beta, aes(dis_prec, COMDIST_AB)) + labs(x = &quot;Diferença na precipitação (mm)&quot;, y = &quot;COMDIST\\n (Abundância)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) COMDISTNT_PA_plot &lt;- ggplot(metricas_divergencia_beta, aes(dis_prec, COMDISTNT_PA)) + labs(x = &quot;Diferença na precipitação (mm)&quot;, y = &quot;COMDISTNT\\n (Ausência e Presença)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) COMDISTNT_AB_plot &lt;- ggplot(metricas_divergencia_beta, aes(dis_prec, COMDISTNT_AB)) + labs(x = &quot;Diferença na precipitação (mm)&quot;, y = &quot; COMDISTNT\\n (Abundância)&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() ggarrange(COMDIST_PA_plot, COMDIST_AB_plot, COMDISTNT_PA_plot, COMDISTNT_AB_plot, ncol = 2, nrow = 2) dev.off() #&gt; null device #&gt; 1 O COMDIST que avalia as relações de parentesco mais internas da filogenia (i.e. relações entre espécies de famílias diferentes) apresentou associação com o gradiente de precipitação quando avaliado pesado pela abundância das espécies. Por outro lado, o COMDISTNT que avalia as relações mais terminais da filogenia (i.e. espécies dentro do mesmo gênero) apresentou uma relação negativa com o gradiente de precipitação quando avaliado usando a incidência das espécies. 13.22 Análise da dimensão riqueza da diversidade beta filogenética 13.23 Phylogenetic index of beta diversity (Phylosor, Bryant et al. 2008) Phylosor é uma métrica de similaridade e determina o comprimento total dos ramos da filogenia que é compartilhado entre pares de comunidades (Bryant et al. 2008). Abaixo, demonstramos os códigos no R para o cálculo do Phylosor utilizando os dados das comunidades de aves. # Análise com dados de presença e ausência das espécies nas comunidades. resultados_Phylosor &lt;- phylosor(composicao_especies,filogenia_aves) # Mostra uma matriz triangular com a similaridade entre a fração dos ramos # compartilahdos entre duas comunidades resultados_Phylosor #&gt; Com_1 Com_2 Com_3 Com_4 Com_5 Com_6 Com_7 Com_8 Com_9 #&gt; Com_2 0.7856828 #&gt; Com_3 0.8052839 0.7794964 #&gt; Com_4 0.7831520 0.8066793 0.8595462 #&gt; Com_5 0.8586780 0.6919478 0.8083230 0.7930266 #&gt; Com_6 0.6717414 0.5827551 0.6977734 0.7494945 0.7383098 #&gt; Com_7 0.7414284 0.7325727 0.6836231 0.7289449 0.7384561 0.6425717 #&gt; Com_8 0.6826177 0.6283918 0.6443193 0.6404373 0.7123197 0.5928097 0.6146854 #&gt; Com_9 0.6789983 0.6074676 0.6405220 0.6727656 0.7082867 0.6169977 0.6506880 0.9016007 #&gt; Com_10 0.6264594 0.5709671 0.6422800 0.5823317 0.6493935 0.5362575 0.6015983 0.9106658 0.8607104 13.24 Unique Fraction metric (UniFrac, Lozupone &amp; Knight 2005) UniFrac é uma métrica de dissimilaridade e determina a fração única da filogenia contida em cada uma das duas comunidades (Lozupone and Knight 2005). Abaixo, demonstramos os códigos no R para o cálculo da UniFrac utilizando os dados das comunidades de aves. # Análise com dados de presença e ausência das espécies nas comunidades. resultados_UniFrac &lt;- unifrac(composicao_especies,filogenia_aves) 13.25 Vamos avaliar a correlação entre Phylosor e Unifrac # Vamos criar um data.frame com os resultados das métricas separados # para as dimensões de riqueza e divergência. metricas_riqueza_beta &lt;- data.frame(Phylosor = as.numeric(resultados_Phylosor), UniFrac = as.numeric(resultados_UniFrac)) # Gráfico. ggpairs(metricas_riqueza_beta, upper=list(continuous = wrap(&quot;cor&quot;, size = 4))) Os valores de Phylosor e UniFrac apresenta 99% de correlação entre eles. Portanto, essas duas métricas identificam padrões idênticos e não devem ser utilizadas simultaneamente. Gráficos das métricas da dimensão riqueza da diversidade beta filogenética # Vamos inserir os dados de precipitação na planilha metrica_riqueza_beta. metricas_riqueza_beta$dis_prec &lt;- as.numeric(dis_prec) # Gráficos. # Phylosor. plot_phylosor &lt;- ggplot(metricas_riqueza_beta, aes(dis_prec, Phylosor)) + labs(x = &quot;Diferença na precipitação (mm)&quot;, y = &quot;Phylosor&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + scale_y_continuous(limits = c(0, 1.0)) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) # Unifrag. plot_unifrac &lt;- ggplot(metricas_riqueza_beta, aes(dis_prec, UniFrac)) + labs(x = &quot;Diferença na precipitação (mm)&quot;, y = &quot;UniFrac&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + scale_y_continuous(limits = c(0, 1.0)) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) ggarrange(plot_phylosor, plot_unifrac, ncol = 2) Phylosor (similaridade) e UniFrac (dissimilaridade) foram relacionadas com o gradiente de precipitação. Comunidades com quantidade de precipitação parecidas abrigaram linhagens similares enquanto comunidades que recebem quantidade de precipitação diferentes abrigam linhagens mais distintas. 13.26 Partição da diversidade beta filogenética As métricas, Phylosor e UniFrac, podem ser particionadas em dois componentes (Baselga 2009; Leprieur et al. 2012): i) substituição (do inglês turnover) de espécies entre as comunidades; e ii) componente de aninhamento que representa a perda ou ganho de espécies entre comunidades atribuídos a diferença na riqueza de espécies. A partição da diversidade beta nestes componentes permite avaliar diferentes hipóteses sobre os processos e mecanismos atuando na montagem de comunidades. Abaixo, demonstramos os códigos no R para o cálculo da partição da diversidade beta filogenética utilizando os dados das comunidades de aves. # Temos que transformar os dados para presença e ausência das espécies # nas comunidades. dados_PA &lt;- decostand(composicao_especies, &quot;pa&quot;) # Partição dos componentes do Phylosor. resultados_Phylosor_particao &lt;- phylo.beta.pair(dados_PA, filogenia_aves, index.family = &quot;sorensen&quot;) Vamos refazer a análise para UniFrac. # Partição dos componentes do UniFrac. resultados_UniFrac_particao &lt;- phylo.beta.pair(dados_PA, filogenia_aves, index.family = &quot;jaccard&quot;) # Resultado tem três matrizes: # i) dissimilaridade total (phylo.beta.jac); # ii) componente substituição de espécies (phylo.beta.jtu); e # iii) componente aninhamento (phylo.beta.jne). # resultados_UniFrac_particao (para ver os resultados corra este comando) Gráfico com os resultados dos componentes substituição e aninhamento da diversidade beta filogenética - Phylosor. # Vamos preparar os dados para o gráfico. particao_phylosor &lt;- data.frame( substituicao = as.numeric(resultados_Phylosor_particao$phylo.beta.sim), aninhamento = as.numeric(resultados_Phylosor_particao$phylo.beta.sne), sorensen = as.numeric(resultados_Phylosor_particao$phylo.beta.sor), dis_prec = as.numeric(dis_prec)) # Gráficos. sorensen_plot &lt;- ggplot(particao_phylosor, aes(dis_prec, sorensen)) + labs(x = &quot;&quot;, y = &quot;Sorensen&quot;) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) subst_plot &lt;- ggplot(particao_phylosor, aes(dis_prec, substituicao)) + labs(x = &quot;Diferença na precipitação\\n (mm)&quot;, y = &quot;Componente Substituição&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) aninha_plot &lt;- ggplot(particao_phylosor, aes(dis_prec, aninhamento)) + labs(x = &quot;&quot;, y = &quot;Componente aninhamento&quot;, size = 8) + geom_point(size = 4, shape = 19, col = &quot;darkorange&quot;) + tema_livro() + geom_smooth(method = lm, se = FALSE, color = &quot;black&quot;) ggarrange(sorensen_plot, subst_plot, aninha_plot, ncol = 3, nrow = 1) dev.off() #&gt; null device #&gt; 1 Percebam que o componente substituição é maior entre comunidades que apresentam diferenças altas na quantidade de precipitação, enquanto o componente aninhamento é maior entre as comunidades que apresentam quantidade similar de precipitação. 13.27 Modelos Nulos Em muitos casos, os valores de diversidade filogenética são correlacionados com a riqueza de espécies nas comunidades. Por exemplo, se um pesquisador relata que duas comunidades apresentam diferentes valores de PD, é impossível saber se esta diferença é simplesmente porque elas têm diferentes valores de riqueza de espécies ou se há algum fator fundamental sobre a informação filogenética que é importante. Outra questão abordada nos estudos de montagem das comunidades é saber se os valores observados para as métricas (e.g. MPD ou MNTD) relacionadas com a estrutura filogenética das comunidades seriam diferentes se a colonização das espécies do pool regional fosse aleatória? Os modelos nulos respondem estas perguntas. Contudo, a definição do pool regional não é uma tarefa trivial (Lessard et al. 2012; Carstensen et al. 2013). Os modelos nulos são construídos considerando processos ecológicos ou evolutivos de interesse. Eles geram padrões que são baseados na aleatorização dos dados ecológicos ou amostragens aleatórias de uma distribuição conhecida ou hipótetica (N. J. Gotelli and Graves 1996). Neste caso, alguns elementos dos dados (como colunas ou linhas) são mantidos constantes, e outros são permitidos variar aleatoriamente para criar novos padrões. O principal motivo para a construção de modelos nulos é produzir um padrão que seria esperado na ausência de um mecanismo ecológico específico (N. J. Gotelli and Graves 1996). Contudo, ressaltamos que os modelos nulos podem revelar padrões não comuns, mas eles não podem determinar os mecanismos responsáveis por gerar estes padrões (N. J. Gotelli and Graves 1996). Os modelos nulos empregados para contrapor os padrões observados pelas métricas de diversidade filogenética utilizam a aleatorização dos dados de duas formas principais: i) aleatorizando o nome das espécies na árvore filogenética mantendo a estrutura e composição da matriz de co-ocorrência das espécies e o comprimento dos ramos da árvore inalterados; e ii) aleatorizando as linhas e/ou colunas da matriz de co-ocorrência das espécies (N. J. Gotelli 2000; Ulrich and Gotelli 2010). De forma geral, nas análises de diversidade filogenética as aleatorizações são repetidas 999 vezes (pode ser mais ou menos a critério do pesquisador) e calcula-se a média e o desvio padrão dos valores gerados pelo modelos. Com estes dados, calcula-se o tamanho do efeito padronizado (do inglês Standardized Effect Size - SES) utilizando a seguinte fórmula: SES = (valor observado - média dos valores gerados na aleatorização)/ desvio padrão dos valores gerados na aleatorização Os valores de SES são utilizados para rejeitar ou não a hipótese nula de que o padrão observado difere do esperado pelo acaso. Contudo, tenha em mente que a definição do esquema de aleatorização dos modelos nulos não é meramente uma questão técnica (Götzenberger et al. 2011). A definição do esquema de aleatorização irá determinar quais os mecanismos ecológicos são permitidos ou excluídos no modelo nulo (Götzenberger et al. 2011). Consequentemente, ele estará avaliando diferentes hipóteses nulas. Abaixo, demonstramos os códigos no R para calcular os modelos nulos para as métricas de diversidade filogenética. 13.28 Nearest Relative Index (NRI) ou Standardized Effect Size of MPD (Webb et al. 2008) Esta métrica calcula o tamanho do efeito padronizado para a métrica MPD. Contudo, NRI é calculado multiplicando os resultados do SES por -1. Valores positivos de NRI indicam agrupamento filogenético e valores negativos de NRI indicam dispersão filogenética. # NRI ou SES_MPD. resultados_SES_MPD &lt;- ses.mpd(composicao_especies, cophenetic(filogenia_aves), null.model = &quot;taxa.labels&quot;, abundance.weighted = FALSE, runs = 999) # Mostra a riqueza de espéices,MPD observado, média e desvio padrão dos # valores de MPD das aleatorizações, SES e o valor de p. head(resultados_SES_MPD) #&gt; ntaxa mpd.obs mpd.rand.mean mpd.rand.sd mpd.obs.rank mpd.obs.z mpd.obs.p runs #&gt; Com_1 27 150.7914 153.9953 3.891718 215 -0.8232597 0.215 999 #&gt; Com_2 26 157.3158 153.5833 4.367399 770 0.8546215 0.770 999 #&gt; Com_3 25 146.1622 153.9931 4.476428 52 -1.7493791 0.052 999 #&gt; Com_4 25 154.5005 153.5113 4.720348 551 0.2095591 0.551 999 #&gt; Com_5 22 143.0727 153.7490 5.294432 24 -2.0165115 0.024 999 #&gt; Com_6 18 141.1926 153.9709 6.951990 34 -1.8380846 0.034 999 Veja a ajuda destea função usando?ses.mpd para ver todas as possibilidades de modelos nulos disponíveis. 13.29 Nearest Taxon Index (NTI) ou Standardized Effect Size of MNTD (Webb et al. 2008) Esta métrica calcula o tamanho do efeito padronizado para a métrica MNTD. Contudo, NTI é calculado multiplicando os resultados do SES por -1. Valores positivos de NTI indicam agrupamento filogenético e valores negativos de NTI indicam dispersão filogenética. # NTI ou SES_MNTD. resultados_SES_MNTD &lt;- ses.mntd(composicao_especies, cophenetic(filogenia_aves), null.model = &quot;taxa.labels&quot;, abundance.weighted = FALSE, runs = 999) # Mostra a riqueza de espéices,MNTD observado, média e desvio padrão dos # valores de MNTD das aleatorizações, SES e o valor de p. head(resultados_SES_MNTD) #&gt; ntaxa mntd.obs mntd.rand.mean mntd.rand.sd mntd.obs.rank mntd.obs.z mntd.obs.p runs #&gt; Com_1 27 63.89727 63.30504 6.864478 518 0.08627467 0.518 999 #&gt; Com_2 26 66.15828 64.81499 7.217753 575 0.18610860 0.575 999 #&gt; Com_3 25 72.96912 65.76333 7.754651 811 0.92922217 0.811 999 #&gt; Com_4 25 67.67170 65.70886 7.752673 600 0.25318258 0.600 999 #&gt; Com_5 22 64.93477 69.46545 9.133114 305 -0.49607138 0.305 999 #&gt; Com_6 18 63.72337 76.12099 11.819687 162 -1.04889562 0.162 999 13.30 Standardized Effect Size of PD (Webb et al. 2008) Esta métrica calcula o tamanho do efeito padronizado para a métrica PD. # SES_PD. resultados_SES_PD &lt;- ses.pd(composicao_especies, filogenia_aves, null.model = &quot;independentswap&quot;, runs = 999) # Mostra a riqueza de espéices,MNTD observado, média e desvio padrão dos # valores de PD das aleatorizações, SES e o valor de p. head(resultados_SES_PD) #&gt; ntaxa pd.obs pd.rand.mean pd.rand.sd pd.obs.rank pd.obs.z pd.obs.p runs #&gt; Com_1 27 1259.315 1271.5674 67.73874 444 -0.1808764 0.444 999 #&gt; Com_2 26 1293.152 1240.2776 69.17211 783 0.7643905 0.783 999 #&gt; Com_3 25 1222.310 1204.9035 67.51583 590 0.2578167 0.590 999 #&gt; Com_4 25 1254.541 1202.2728 65.90821 772 0.7930463 0.772 999 #&gt; Com_5 22 1021.967 1094.2347 65.59779 129 -1.1016782 0.129 999 #&gt; Com_6 18 856.781 951.3769 65.57431 72 -1.4425755 0.072 999 13.31 Standardized Effect Size Não há pacotes que calculam o SES para a métrica Phylosor. Assim, iremos usar a função phylosor.rnd()para criar modelos nulos para o Physolor, e em seguida, iremos usar uma função para calcular os valores de SES e os valores de P. # Modelo nulo que rearranja o nome das espécies na filogenia. modelos_nulo &lt;- phylosor.rnd(composicao_especies, filogenia_aves, null.model = &quot;taxa.labels&quot;, runs = 9) # Função para calcular o SES eo valor de P. ses.physo &lt;- function(obs, nulo_phylosor){ nulo_phylosor &lt;- t(as.data.frame(lapply (nulo_phylosor, as.vector))) physo.obs &lt;- as.numeric(obs) physo.mean &lt;- apply(nulo_phylosor, MARGIN = 2, FUN = mean, na.rm = TRUE) physo.sd &lt;- apply(nulo_phylosor, MARGIN = 2, FUN = sd, na.rm = TRUE) physo.ses &lt;- (physo.obs - physo.mean)/physo.sd physo.obs.rank &lt;- apply(X = rbind(physo.obs, nulo_phylosor), MARGIN = 2, FUN = rank)[1, ] physo.obs.rank &lt;- ifelse(is.na(physo.mean), NA, physo.obs.rank) data.frame(physo.obs, physo.mean, physo.sd, physo.obs.rank, physo.ses, physo.obs.p = physo.obs.rank/ (dim(nulo_phylosor)[1] + 1)) } resultados &lt;- ses.physo (resultados_Phylosor, modelos_nulo) head(resultados) #&gt; physo.obs physo.mean physo.sd physo.obs.rank physo.ses physo.obs.p #&gt; 1 0.7856828 0.8161982 0.04667325 4 -0.6538076 0.4 #&gt; 2 0.8052839 0.8767804 0.03480329 1 -2.0543045 0.1 #&gt; 3 0.7831520 0.8051510 0.03618897 4 -0.6078898 0.4 #&gt; 4 0.8586780 0.8682653 0.03871925 4 -0.2476110 0.4 #&gt; 5 0.6717414 0.7472615 0.04222288 1 -1.7886082 0.1 #&gt; 6 0.7414284 0.6764137 0.03653558 10 1.7794910 1.0 13.31.1 Para se aprofundar Recomendamos aos interessados os livros: i) Swenson (2014) Functional and Phylogenetic Ecology in R; ii) Paradis (2012) Analysis of Phylogenetics and Evolution in R; iii) Cadotte &amp; Davies (2016) Phylogenies in Ecology, iv) Gotelli &amp; Graves (1996) Null Models in Ecology; e v) Magurran &amp; McGill (2011) Biological Diversity Frontiers in Measurement and Assessment. Referências "],["cap14.html", "Capítulo 14 Diversidade Funcional 14.1 Aspectos teóricos 14.2 Definindo a dis(similaridade) entre espécies 14.3 Métricas de diversidade funcional (alpha) 14.4 Métricas de diversidade funcional (beta) 14.5 Variação Intraspecífica", " Capítulo 14 Diversidade Funcional Pré-requisitos do capítulo ## Pacotes library(FD) library(ade4) library(ecodados) library(gridExtra) library(ggplot2) library(ggrepel) library(tidyverse) library(picante) library(vegan) library(SYNCSA) library(GGally) library(FD) library(betapart) library(nlme) library(ape) library(TPD) library(cati) library(kableExtra) ## Dados e funções necessárias comun_fren_dat &lt;- ecodados::fundiv_frenette2012a_comu ambie_fren_dat &lt;- ecodados::fundiv_frenette2012a_amb trait_fren_dat &lt;- ecodados::fundiv_frenette2012a_trait trait_dat &lt;- ecodados::fundiv_barbaro2009a_trait comun_dat &lt;- ecodados::fundiv_barbaro2009a_comu ambie_dat &lt;- ecodados::fundiv_barbaro2009a_amb trait_baselga &lt;- ecodados::trait_baselga comm_baselga &lt;- ecodados::comm_baselga anuros_comm &lt;- ecodados::anuros_comm traits &lt;- ecodados::traits env &lt;- ecodados::env # ecodados::wITV # funtion: wITV 14.1 Aspectos teóricos Até a década de 1990, a teoria ecológica investigava basicamente quais processos determinavam a abundância e riqueza de espécies no espaço e tempo. As décadas de 1980 e 1990 foram marcadas por intensos debates sobre as regras de montagem de comunidades e como interações e filtros ambientais determinavam a coexistência de espécies (Strong et al. 1984). Porém, a década 2000 foi marcada pelo uso mais explícito da características das espécies como uma variável fundamental tanto para explicar como a distribuição dos organismos seria afetada pelo ambiente, quanto para entender como tais espécies afetariam o ecossistema (Dı́az and Cabido 2001; Brian J. McGill et al. 2006). O primeiro estudo que utilizou o termo Diversidade Funcional foi publicado por Williams (1967), que comparou espécies de naúplios filogenéticamente relacionadas e demonstrou que elas possuem alta plasticidade funcional que favorecem ampla variação de comportamentos e, desse modo, permitem que sejam espécies generalistas em ambientes em contante mudança. A unidade básica desses estudos, o atributo funcional (do inglês “functional trait”), é definido como uma propriedade mensurável dos organismos (geralmente em nível individual) que represente características morfológicas, fisiológicas ou fenológicas que afetam a aptidão alterando aspectos do crescimento, reprodução e sobrevivência (Violle et al. 2007). Mais especificamente, o atributo funcional pode ser divido em atributo efeito (i.e., atributos do organismo que afetam condições ambientais ou propriedades do ecossistema) e resposta (i.e., atributos do organismo que variam em resposta a condições ambientais) (Violle et al. 2007). Dessa forma, as medidas de diversidade passam a ser representadas não somente por diferenças no número e na quantidade de espécies, mas pelas diferenças e/ou semelhanças dos atributos funcionais das espécies dentro e entre localidades. Assim, a variação no grau de expressão de diferentes atributos funcionais entre diferentes populações, comunidades ou ecossistemas é definida como Diversidade Funcional (sensu Garnier, Navas, and Grigulis 2015). Porém, a diversidade funcional não deve ser usada como medida única, uma vez que tais diferenças entre os atributos funcionais pode ser medida a partir da abundância relativa, riqueza e variação dos atributos funcionais. Desse modo, podemos dividir a diversidade funcional em três diferentes medidas: (1) riqueza funcional, (2) divergência funcional, e (3) regularidade funcional (Villéger, Mason, and Mouillot 2008). Existem dezenas de métricas que calculam cada uma dessas dimensões da diversidadade funcional, mas se destacam aquelas baseadas em dendrograma (e.g., FD: Petchey and Gaston 2002) ou em medidas de distância (e.g., Villéger, Mason, and Mouillot 2008). Assim como a diversidade taxonômica 12, a diversidade funcional pode ser medida em componentes alfa e beta. A seguir, apresentamos diferentes maneiras de calcular a distância entre localidades tendo como base os atributos funcionais das espécies e, além disso, demonstramos como calcular algumas das métricas de diversidade (alfa e beta) funcional mais usadas em ecologia. A parte final deste capítulo apresenta dois exemplos de como podemos testar hipóteses ecológicas comparando a diversidade funcional alfa e beta. 14.2 Definindo a dis(similaridade) entre espécies Definir o quão diferente ou semelhante são duas espécies que ocorrem em uma determinada localidade é a base para calcular a diversidade alfa e beta funcional. Para isso, é fundamental ter em mente que os atributos funcionais podem ser de vários tipos como, por exemplo, contínuo (e.g., tamanho corporal em centímetro), categórico (e.g., guilda: frugívoro, detritívoro, etc.), ordinal (e.g., 1 para organismo até 5 cm, 2 para organismos entre 5 e 30 cm, e 3 para organismos maiores do que 30 cm), binários (e.g., presença ou ausência de espinho), entre outros (veja Tabela 1 em Gonçalves-Souza, Provete, et al. 2019). Por este motivo, a decisão do método de distância só será possível após o reconhecimento dos tipos de atributos funcionais escolhidos. Em linhas gerais, para variáveis contínuas a distância euclideana é a melhor opção, enquanto para os outros tipos de variáveis ou para conjuntos de atributos com mais de um tipo de variável, a distância de Gower geralmente deve ser a melhor opção (Sandrine Pavoine et al. 2009). 14.2.0.1 Exemplo prático Exemplo1: variáveis contínuas Vamos utilizar um conjunto de dados com atributos contínuos (e.g., área foliar específica, massa foliar seca) de 34 espécies de plantas em um gradiente de aridez (Frenette-Dussault et al. 2012). Diversas análises funcionais podem ser afetadas por valores extremos ou pela diferença de unidade/escala entre as variáveis utilizadas. Por este motivo, é importante padronizar a matriz de atributos com média 0 e desvio padrão 1. Esta padronização é necessária tanto para fazer uma PCA como para PCoA 9. Pergunta Quais são as espécies de plantas mais semelhantes? (Neste caso, sem predição, pois representa uma avaliação exploratória com as características funcionais das espécies) Variáveis Dependentes: atributos funcionais (matriz de atributos contínuos por espécie: trait_fren_dat) ## 1. Padronização dos dados trait_pad &lt;- decostand(trait_fren_dat, &quot;standardize&quot;) euclid_dis &lt;- vegdist(trait_pad, &quot;euclidean&quot;) ## 2. PCoA # Resultados são idênticos aos resultados de uma PCA. pcoa_traits_cont &lt;- pcoa(euclid_dis, correction=&quot;cailliez&quot;) ## 3. Exportandos dados para gráfico # Ao usar &#39;[,1:2]&#39; você irá selecionar os dois primeiros eixos. eixos_cont &lt;- as.data.frame(pcoa_traits_cont$vectors[,1:2]) ## 4. Gráfico de ordenação eixos_cont %&gt;% ggplot(aes(x=Axis.1, y=Axis.2)) + geom_point(pch=21, size=4, color = &quot;black&quot;, alpha = 0.7, fill=&quot;#525252&quot;) + geom_text_repel(aes(Axis.1, Axis.2, label = rownames(eixos_cont))) + xlab(&quot;PCO 1&quot;) + ylab(&quot;PCO 2&quot;) + theme(axis.title.x = element_text(face=&quot;bold&quot;, size=14), axis.text.x = element_text(vjust=0.5, size=12)) + theme(axis.title.y = element_text(face=&quot;bold&quot;, size=14), axis.text.y = element_text(vjust=0.5, size=12)) + geom_hline(yintercept = 0, linetype=2) + geom_vline(xintercept = 0, linetype=2)+ theme(legend.position = &quot;top&quot;, legend.title=element_blank()) + tema_livro()-&gt; plot_trait_cont plot_trait_cont Exemplo 2: variáveis categóricas Ao contrário dos dados contínuos, para dados categóricos não é possível utilizar PCA. No próximo exemplo, utilizamos atributos funcionais de besouros distribuídos na Europa (Barbaro and Van Halder 2009). Esses dados são categóricos e incluem atributos como período de atividade (noturno, diurno, dioturno), tendência da população na europa (estável, aumentando, diminuíndo), entre outros. Pergunta: Quais são as espécies de besouros mais semelhantes? (Neste caso, sem predição, pois representa uma avaliação exploratória com as características funcionais das espécies) Variáveis Dependentes: atributos funcionais (matriz de atributos categóricos por espécie: trait_dat) # 1. Selecionar somente os atributos categóricos trait_dat %&gt;% dplyr::select_if(is.character) -&gt; trait_cat # 2. Calcular a distância de Gower dist_categ &lt;- gowdis(trait_cat) # 3. PCoA da matriz de distância funcional (Gower) pcoa_traits_cat &lt;- pcoa(dist_categ, correction=&quot;cailliez&quot;) # 4. Exportar dados (escores) para ggiplot eixos_cat &lt;- as.data.frame(pcoa_traits_cat$vectors[,1:2]) # Selecionar os dois primeiros eixos # 5. Gráfico de ordenação eixos_cat %&gt;% ggplot(aes(x=Axis.1, y=Axis.2)) + geom_point(pch=21, size=4, alpha = 0.7, color = &quot;black&quot;, fill=&quot;cyan4&quot;) + geom_text_repel(aes(Axis.1, Axis.2, label = rownames(eixos_cat))) + xlab(&quot;PCO 1&quot;) + ylab(&quot;PCO 2&quot;) + theme(axis.title.x = element_text(face=&quot;bold&quot;, size=14), axis.text.x = element_text(vjust=0.5, size=12)) + theme(axis.title.y = element_text(face=&quot;bold&quot;, size=14), axis.text.y = element_text(vjust=0.5, size=12)) + geom_hline(yintercept = 0, linetype=2) + geom_vline(xintercept = 0, linetype=2)+ theme(legend.position = &quot;top&quot;, legend.title=element_blank()) + tema_livro() + ggtitle(&quot;Dados categóricos&quot;)-&gt; plot_trait_cat plot_trait_cat Exemplo 3: variáveis mistas Em casos mais complexos, a pesquisa inclui diversos atributos funcionais com natureza diferente, como atributos contínuos, categóricos, ordinais, circulares, entre outros. Desse modo, é possível utilizar medidas como Gower (FD::gowdis). Porém, existe uma alternativa mais apropriada que generalizou coeficiente de Gower para tratar cada conjunto de variáveis de acordo com sua natureza (Sandrine Pavoine et al. 2009). Vamos usar o mesmo conjunto de dados que foram considerados no exemplo anterior. Porém, ao invés de utilizar somente as variáveis categóricas, usaremos todas elas. O primeiro passo é identificar para o programa as classes apropriadas para cada tipo de variável e, além disso, preparar os dados para a função ade4::dist.ktab. Pergunta Quais são as espécies de besouros mais semelhantes? (Neste caso, sem predição, pois representa uma avaliação exploratória com as características funcionais das espécies) Variáveis Dependentes: atributos funcionais (matriz de atributos contínuos e categóricos por espécie: trait_dat) ## 1. Verifique a classe de todos os traits e veja se estão de acordo com sua expectativa trait_dat %&gt;% dplyr::summarise_all(class) %&gt;% tidyr::gather(variable, class) #&gt; variable class #&gt; 1 trend character #&gt; 2 redlist character #&gt; 3 regio integer #&gt; 4 biog character #&gt; 5 activ character #&gt; 6 diet character #&gt; 7 winter character #&gt; 8 color character #&gt; 9 breed character #&gt; 10 body integer #&gt; 11 wing character #&gt; 12 period character ## 2. Neste exemplo, algumas variáveis que são ordinais (regio e body) # foram reconhecidas como numéricas ou categóricas. trait_dat$regio &lt;- as.ordered(trait_dat$regio) trait_dat$body &lt;- as.ordered(trait_dat$body) ## 3. Combinar cada conjunto de atributos de acordo com sua natureza em um # data.frame separado. # 3.1. Categóricos. trait_categ &lt;- cbind.data.frame(trend=trait_dat$trend, redlist=trait_dat$redlist, biog=trait_dat$biog, activ=trait_dat$activ, diet=trait_dat$diet, winter=trait_dat$winter,color=trait_dat$color, breed=trait_dat$breed,wing=trait_dat$wing, period=trait_dat$period) # 3.2 Ordinais. trait_ord &lt;- cbind.data.frame(regio=trait_dat$regio, body=trait_dat$body) rownames(trait_categ) &lt;- rownames(trait_dat) rownames(trait_ord) &lt;- rownames(trait_dat) # Agora, combinar os dois data.frames em uma lista chamada &quot;ktab&quot;. ktab_list &lt;- ktab.list.df(list(trait_categ, trait_ord)) # Por fim, calcular a distância funcional entre as espécies. # Em &quot;type&quot;, a letra &quot;N&quot; indica variável categórica (ou nominal), # enquanto a letra &quot;O&quot; indica variável ordinal. dist_mist &lt;- dist.ktab(ktab_list, type= c(&quot;N&quot;, &quot;O&quot;)) ## Visualize os dados com uma PCoA (\\@ref(cap9)) pcoa_traits_mist &lt;- pcoa(dist_mist, correction=&quot;cailliez&quot;) eixos_mist &lt;- as.data.frame(pcoa_traits_mist$vectors[,1:2]) eixos_mist %&gt;% ggplot(aes(x=Axis.1, y=Axis.2)) + geom_point(pch=21, size=4, alpha = 0.7, color = &quot;black&quot;, fill=&quot;darkorange&quot;) + geom_text_repel(aes(Axis.1, Axis.2, label = rownames(eixos_mist)))+ xlab(&quot;PCO 1&quot;) + ylab(&quot;PCO 2&quot;) + theme(axis.title.x = element_text(face=&quot;bold&quot;, size=14), axis.text.x = element_text(vjust=0.5, size=12)) + theme(axis.title.y = element_text(face=&quot;bold&quot;, size=14), axis.text.y = element_text(vjust=0.5, size=12)) + geom_hline(yintercept = 0, linetype=2) + geom_vline(xintercept = 0, linetype=2)+ theme(legend.position = &quot;top&quot;, legend.title=element_blank()) + tema_livro() + ggtitle(&quot;Dados mistos&quot;) -&gt; plot_trait_mist plot_trait_mist Podemos combinar os dois gráficos (baseado em variáveis categóricas e em variáveis mistas) para comparar as duas medidas de distância, uma somente com dados categóricos (FD::gower) e uma com dados categóricos e ordinais (ade4::dist.ktab). grid.arrange(plot_trait_cat, plot_trait_mist, ncol=2) 14.3 Métricas de diversidade funcional (alpha) 14.3.1 Riqueza funcional A riqueza funcional mede a quantidade de espaço funcional preenchido pela espécies de uma comunidade (Mason and Mouillot 2013). A estimativa desse espaço pode ser calculada usando dengrogramas (Petchey and Gaston 2002) ou através do método Convex Hull (Cornwell, Schwilk, and Ackerly 2006) que dão origem, respectivamente, as duas métricas mais usadas: (1) Diversidade Funcional (FD) e (2) Riqueza Funcional (FRic). Os índices de riqueza funcional geralmente são usados como indicadores do espaço de nicho que é potencialmente usado ou não (Schleuter et al. 2010). 14.3.1.1 Exemplo prático Explicação dos dados Os dados utilizados neste exemplo são os mesmos do exemplo com dados mistos, i.e., categóricos e contínuos (objeto dist_mist). Pergunta Qual a relação entre riqueza de espécies e diversidade funcional? Todos os índices são correlacionados com a riqueza? Variáveis Dependentes: atributos funcionais e composição de espécies para cálculo da diversidade funcional e riqueza em cada parcela. ## Estrutura dos dados # matriz de distância: distância entre as seis primeiras espécies as.matrix(dist_mist)[1:6, 1:6] #&gt; sp1 sp2 sp3 sp4 sp5 sp6 #&gt; sp1 0.0000000 0.5000000 0.7107801 0.7771900 0.6107116 0.5041691 #&gt; sp2 0.5000000 0.0000000 0.6808389 0.8538292 0.7345988 0.6487320 #&gt; sp3 0.7107801 0.6808389 0.0000000 0.7179711 0.7381353 0.6527339 #&gt; sp4 0.7771900 0.8538292 0.7179711 0.0000000 0.5106682 0.6522593 #&gt; sp5 0.6107116 0.7345988 0.7381353 0.5106682 0.0000000 0.5177440 #&gt; sp6 0.5041691 0.6487320 0.6527339 0.6522593 0.5177440 0.0000000 # composição de espécies: seis primeiras espécies nas seis primeiras localidades head(comun_dat)[1:6, 1:6] #&gt; sp1 sp2 sp3 sp4 sp5 sp6 #&gt; 3 0 19 2 0 0 0 #&gt; 4 0 4 0 0 0 0 #&gt; 6 1 58 2 0 0 0 #&gt; 7 1 0 0 0 0 0 #&gt; 9 3 0 0 0 0 0 #&gt; 10 3 15 0 0 0 0 ## Antes de calcular as métricas de diversidade funcional, vamos calcular # a riqueza de espécies com intuito de comparação entre métricas. richness &lt;- dbFD(dist_mist, comun_dat)$nbsp #&gt; FRic: Dimensionality reduction was required. The last 17 PCoA axes (out of 19 in total) were removed. #&gt; FRic: Quality of the reduced-space representation = 0.3243851 #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. head(richness) #&gt; 3 4 6 7 9 10 #&gt; 12 3 7 7 4 7 ## É preciso definir uma distância apropriada (veja descrição anterior) para os cálculos # abaixo # O índice &quot;Functional Richness&quot; só funciona para comunidades com 3 ou mais espécies. # Caso você tenha comunidades com 1 ou 2 espécies, o valor será NA. fric &lt;- dbFD(dist_mist, comun_dat)$FRic #&gt; FRic: Dimensionality reduction was required. The last 17 PCoA axes (out of 19 in total) were removed. #&gt; FRic: Quality of the reduced-space representation = 0.3243851 #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. head(fric) #&gt; 3 4 6 7 9 10 #&gt; 0.226236923 0.009033539 0.158760885 0.158529234 0.014290140 0.200075112 ## Functional Diversity # Passo 1: análise de agrupamento para criar o dendrograma. dend &lt;- hclust(dist_mist, &quot;average&quot;) # Passo 2: transformar o dengrograma em um arquivo da classe phylo. tree_dend &lt;-as.phylo(dend) # Passo 3: calcular o valor da diversidade funcional. FD &lt;- pd(comun_dat, tree_dend)$PD head(FD) #&gt; [1] 3.590053 1.115574 2.255337 2.356478 1.472314 2.430329 14.3.2 Divergência funcional A divergência funcional é uma medida que descreve a irregularidade na distribuição dos valores dos atributos no volume do espaço funcional ocupado por todas as espécies de uma certa comunidade (Garnier, Navas, and Grigulis 2015). Para obter os valores de divergência, o espaço funcional é calculado através do método Convex Hull (Functional Divergence) ou do espaço multidimensional calculado com um PCoA (Functional Dispersion). Nos dois casos, o valor da métrica representa a distância média das espécies para o centro de gravidade ou centroide do espaço funcional, ponderado pela abundância relativa das espécies (Villéger, Mason, and Mouillot 2008; Laliberté and Legendre 2010). Desse modo, a divergência funcional é uma medida que calcula o grau de diferenciação em que a distribuição da abundância maximiza a divergência entre entre os atributos funcionais (Mason and Mouillot 2013). Em geral, estudos que usam esses índices buscam entender o grau de diferenciação de recursos de espécies que coexistem em uma comunidade (Garnier, Navas, and Grigulis 2015). ## Aqui, iremos utilizar a matriz de distância obtida dos dados # trait_dat (variáveis categóricas e ordinais) e nomeada como dist_mist. ## O índice &quot;Functional Divergence&quot; só é calculado para comunidades com 3 ou mais espécies # Caso você tenha comunidades com 1 ou 2 espécies, a análise irá retornar o valor &quot;NA&quot; fdiv &lt;- dbFD(dist_mist, comun_dat)$FDiv #&gt; FRic: Dimensionality reduction was required. The last 17 PCoA axes (out of 19 in total) were removed. #&gt; FRic: Quality of the reduced-space representation = 0.3243851 #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. head(fdiv) #&gt; 3 4 6 7 9 10 #&gt; 0.9692023 0.8838557 0.4082808 0.9147644 0.9010790 0.6982640 # O índice &quot;Functional Dispersion&quot; atribui valor 0 para comunidades com 1 ou 2 espécies fdis &lt;- dbFD(dist_mist, comun_dat)$FDis #&gt; FRic: Dimensionality reduction was required. The last 17 PCoA axes (out of 19 in total) were removed. #&gt; FRic: Quality of the reduced-space representation = 0.3243851 #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. head(fdis) #&gt; 3 4 6 7 9 10 #&gt; 0.2977975 0.3203602 0.2218237 0.3261248 0.3683898 0.3910530 14.3.3 Regularidade funcional A regularidade funcional (do inglês Functional Evenness) mede o quão regular é a distribuição da abundância dos valores dos atributos funcionais no espaço funcional. Diferente dos outros métodos, a versão multidimensional deste índice utiliza um método chamado Minimum Spanning Tree (MST) para conectar todas espécies no espaço funcional. A distância par-a-par das espécies na MST é ponderada pela abundância relativa das espécies e, desse modo, o valor final da regularidade funcional (FEve) vai variar de 0 (máxima irregularidade da distribuição da abundância ou distância funcional das espécies) a 1 (máxima regularidade). ## Aqui, iremos utilizar a matriz de distância obtida dos dados trait_dat (variáveis categóricas e ordinais) e nomeada como dist_mist ## O índice &quot;Functional evenness&quot; só funciona para comunidades com 3 ou mais espécies # Caso você tenha comunidades com 1 ou 2 espécies, a análise irá retornar o valor NA feve &lt;- dbFD(dist_mist, comun_dat)$FEve #&gt; FRic: Dimensionality reduction was required. The last 17 PCoA axes (out of 19 in total) were removed. #&gt; FRic: Quality of the reduced-space representation = 0.3243851 #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. head(feve) #&gt; 3 4 6 7 9 10 #&gt; 0.4054808 0.5587917 0.5406140 0.6974712 0.9575697 0.6297941 ## Você pode criar uma tabela com os resultados de todas as métricas metricas &lt;- data.frame(richness=richness, FD_gp = FD, fric = fric, fdiv = fdiv, fdis = fdis, feve = feve) head(metricas) #&gt; richness FD_gp fric fdiv fdis feve #&gt; 3 12 3.590053 0.226236923 0.9692023 0.2977975 0.4054808 #&gt; 4 3 1.115574 0.009033539 0.8838557 0.3203602 0.5587917 #&gt; 6 7 2.255337 0.158760885 0.4082808 0.2218237 0.5406140 #&gt; 7 7 2.356478 0.158529234 0.9147644 0.3261248 0.6974712 #&gt; 9 4 1.472314 0.014290140 0.9010790 0.3683898 0.9575697 #&gt; 10 7 2.430329 0.200075112 0.6982640 0.3910530 0.6297941 ### Gráfico para comparar o comportamento das métricas ggpairs(metricas) Os resultados indicam que a Diversidade Funcional de Petchey &amp; Gaston (r = 0.985) e a riqueza funcional (r = 0.813) são altamente correlacionadas com a riqueza de espécies. Porém, a divergência funcional, regularidade funcional e dispersão funcional não estão correlacionadas com a riqueza de espécies. A figura obtida com o comando ggpairs(metricas) representa uma matriz de correlação comparando cada par de variáveis (neste caso, os índices de diversidade). No lado esquerdo da figura (abaixo da diagonal) são representados scatterplots 6, a no lado direito (acima da diagonal) pode-se encontrar os valores das correlações (r) entre os pares comparados. No caso das correlações, quanto mais próximo de +1 ou -1, mais forte é a relação entre essas variáveis do par comparado. O gráfico de linhas na diagonal demonstra a densidade de cada variáveis individualmente 6. 14.4 Métricas de diversidade funcional (beta) Assim como na diversidade beta taxonômica 12, a diversidade beta funcional é uma medida que compara a composição (e a variação na composição) de atributos funcionais das espécies entre duas ou mais localidades. Porém, assim como na medida tradicional taxonômica (como Jaccard ou Sorensen), diferenças na diversidade beta podem ser geradas pela mudança na identidade das espécies (ou do atributo) ou na riqueza de espécies (ou de atributos) entre duas localidades (Figura 1). Desse modo, é possível particionar a diversidade beta funcional em aninhamento e substituição (do inglês turnover) 12. Além disso, os cálculos da diversidade beta funcional podem ser realizados par-a-par (functional.beta.pair) ou para a comparações de múltiplas localidades (funcional.beta.multi). Figura 1. Partição da diversidade beta taxonômica (A) e funcional (B). Os três cenários apresentados tanto para a diversidade beta taxonômica como funcional representam, respectivamente, diversidade beta explicada somente por substituição, aninhamento e uma combinação dos dois. Exemplo 4 Os dados no exemplo a seguir utilizam somente a informação de presença (1) ou ausência (0) das espécies nas localidades. Neste exemplo hipotético criado por Baselga et al. (2021), foram amostradas 11 espécies (sp1-sp11) em quatro localidades (A-D). Para cada espécie, criamos dois atributos contínuos hipotéticos (trait1 e trait2). Pergunta Qual a contribuição relativa do aninhamento e substituição para a diversidade beta? Variáveis Dependentes: atributos funcionais e composição de espécies. ## Partição da Diversidade beta (Método Baselga) fun_beta_multi &lt;- functional.beta.multi(x = comm_baselga, trait=trait_baselga, index=&quot;jaccard&quot;) fun_beta_multi #&gt; $funct.beta.JTU #&gt; [1] 0.7101449 #&gt; #&gt; $funct.beta.JNE #&gt; [1] 0.1509662 #&gt; #&gt; $funct.beta.JAC #&gt; [1] 0.8611111 ## Partição da Diversidade beta (Método Baselga) fun_beta &lt;- functional.beta.pair(x = comm_baselga, trait=trait_baselga, index=&quot;jaccard&quot;) # Os comandos abaixo permitem extrair a matriz de distância (par-a-par) com a partição em substituição e nestedness fun_turnover &lt;- fun_beta$funct.beta.jne fun_nestedness &lt;- fun_beta$funct.beta.jtu fun_jaccard &lt;- fun_beta$funct.beta.jac # Gráfico de comparação do substituição e aninhamento dat_betapart &lt;- data.frame(turnover=as.numeric(fun_turnover), nested = as.numeric(fun_nestedness)) dat_betapart %&gt;% ggplot(aes(x=turnover, y=nested)) + geom_point(pch=21, size=4, alpha = 0.7, color = &quot;black&quot;, fill=&quot;#525252&quot;) + xlab(&quot;Beta Diveristy (Substituição)&quot;) + ylab(&quot;Beta Diveristy (Aninhamento)&quot;) + theme(axis.title.x = element_text(face=&quot;bold&quot;, size=14), axis.text.x = element_text(vjust=0.5, size=12)) + theme(axis.title.y = element_text(face=&quot;bold&quot;, size=14), axis.text.y = element_text(vjust=0.5, size=12)) + theme(legend.position = &quot;top&quot;, legend.title=element_blank()) + tema_livro() -&gt; plot_betapart plot_betapart Os resultados da análise de partição (fun_beta_multi) indicam que 82,5% (0,710 / 0,861) da variação na diversidade beta é explicada pelo componente substituição, enquanto 17,5% (0,151 / 0,861) pelo componente aninhamento. As matrizes de distância obtidas na análise par a par pode ser utilizadas para testar, a posteriori, a relação entre gradientes ambientais e diversidade beta funcional (mais detalhes abaixo). 14.4.1 Composição Funcional As medidas de diversidade beta funcional apresentadas acima fornecem matrizes de distância com comparações par-a-par de localidades em termos da composição de atributos funcionais. Porém, muitas vezes o pesquisador quer medir o “atributo médio” da comunidade para investigar, por exemplo, se um determinado gradiente ambiental afeta a expressão (em termos de abundância ou densidade) de dado atributo funcional. Em geral, a medida utilizada é o CWM (do inglês Community Wegihed Means). O CWM é basicamente uma média ponderada de um determinado atributo (coluna m na matriz T) em relação a abundância de todas as espécies que ocorrem na localidade n (matrix X). Para calcular no R a função FD::functcomp usa somente as duas matrizes (T e X). Os leitores que pretendem usar essas métricas devem ler críticas em Peres-Neto et al. (2017). ## Matriz T head(trait_baselga) #&gt; Trait.1 Trait.2 #&gt; sp1 1 1 #&gt; sp2 1 2 #&gt; sp3 1 4 #&gt; sp4 2 1 #&gt; sp5 2 2 #&gt; sp6 3 3 ## Matriz X head(comm_baselga) #&gt; sp1 sp2 sp3 sp4 sp5 sp6 sp7 sp8 sp9 sp10 sp11 #&gt; A 1 1 0 1 1 0 0 0 0 0 0 #&gt; B 1 0 1 0 0 0 0 1 1 0 0 #&gt; C 0 0 0 0 0 1 1 0 0 1 1 #&gt; D 0 1 0 1 0 0 1 0 1 0 0 ## Função functcomp calcula o cwm para combinar as matrizes T e X cwm_ex &lt;- functcomp(trait_baselga, as.matrix(comm_baselga)) cwm_ex #&gt; Trait.1 Trait.2 #&gt; A 1.5 1.5 #&gt; B 2.5 2.5 #&gt; C 4.0 4.0 #&gt; D 2.5 3.0 A matriz resultante cwm_es é formada pelas localidades (linhas) e os atributos “médios” (colunas) nestas localidades. Essa matriz pode ser utilizada em diversas análises como dbRDA, RDA ou RDA parcial 9. Na sequência, vamos utilizar testes de hipóteses para entender como podemos calcular as diversidades funcional alfa e beta com outros testes estatísticos apresentados neste livro. Exemplo 5 Neste exemplo, usaremos novamente os dados de 34 espécies de plantas (Frenette-Dussault et al. 2012), mas agora vamos testar o efeito de um gradiente de aridez sobre a diversidade alfa funcional. Pergunta O gradiente de aridez influencia a divergência e regularidade funcional de plantas? Predições Predição 1: locais mais áridos possuem menor divergência funcional de plantas (métrica escolhida: FDis) Predição 2: locais mais úmidos possuem menor regularidade funcional de plantas (métrica escolhida: FEve) Variáveis Preditora: gradiente de aridez (matriz de variáveis ambientais por localidade: ambie_fren_dat) Dependentes: composição de espécies (matriz de espécies por localidade: comun_fren_dat) e atributos funcionais (matriz de atributos contínuos por espécie: trait_fren_dat) ## Passo 1: calcular a distância funcional trait_pad &lt;- decostand(trait_fren_dat, &quot;standardize&quot;) euclid_dis &lt;- vegdist(trait_pad, &quot;euclidean&quot;) ## Passo 2: calcular a Divergência funcional (FDis) e Regularidade Funcional (FEve) fdis &lt;- dbFD(euclid_dis, comun_fren_dat)$FDis# Fdis=0 em locais com somente uma espécie #&gt; FRic: No dimensionality reduction was required. All 5 PCoA axes were kept as &#39;traits&#39;. #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. feve &lt;- dbFD(euclid_dis, comun_fren_dat)$FEve #&gt; FRic: No dimensionality reduction was required. All 5 PCoA axes were kept as &#39;traits&#39;. #&gt; CWM: When &#39;x&#39; is a distance matrix, CWM cannot be calculated. ## Passo 3: Utilizar um modelo linear para comparar o efeito da aridez sobre FDis (predição 1) e FEve (predição 2) # Combinar dados em um data.frame. lm_dat &lt;- data.frame(aridez = ambie_fren_dat$Aridity, fdis = fdis, feve = feve) # Modelo 1 mod1 &lt;- lm(fdis ~ aridez, data = lm_dat) # conferir os pressupostos da análise par(mfrow=c(2,2)) plot(mod1) # Conclusão: a aridez não tem efeito sobre a divergência funcional anova(mod1) #&gt; Analysis of Variance Table #&gt; #&gt; Response: fdis #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; aridez 1 0.2083 0.20834 0.9945 0.3241 #&gt; Residuals 44 9.2179 0.20950 # Modelo 2 mod2 &lt;- lm(feve ~ aridez, data = lm_dat) # conferir os pressupostos da análise par(mfrow=c(2,2)) plot(mod2) # Conclusão: a aridez não tem efeito sobre a regularidade funcional anova(mod2) #&gt; Analysis of Variance Table #&gt; #&gt; Response: feve #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; aridez 1 0.02098 0.020979 1.0447 0.3123 #&gt; Residuals 44 0.88353 0.020080 ## Passo 4: gráfico para visualizar os dois resultados # Gráfico modelo 1. lm_dat %&gt;% ggplot(aes(x=aridez, y=fdis)) + geom_point(pch=21, size=4, alpha = 0.7, color = &quot;black&quot;, fill=&quot;darkorange&quot;) + xlab(&quot;Aridez&quot;) + ylab(&quot;Divergência Funcional (FDis)&quot;) + theme(axis.title.x = element_text(face=&quot;bold&quot;, size=14), axis.text.x = element_text(vjust=0.5, size=12)) + theme(axis.title.y = element_text(face=&quot;bold&quot;, size=14), axis.text.y = element_text(vjust=0.5, size=12)) + theme(legend.position = &quot;top&quot;, legend.title=element_blank())+ tema_livro() -&gt; plot_pred1 # Gráfico modelo 2. lm_dat %&gt;% ggplot(aes(x=aridez, y=feve)) + geom_point(pch=21, size=4, alpha = 0.7, color = &quot;black&quot;, fill=&quot;cyan4&quot;) + xlab(&quot;Aridez&quot;) + ylab(&quot;Regularidade Funcional (FEve)&quot;) + theme(axis.title.x = element_text(face=&quot;bold&quot;, size=14), axis.text.x = element_text(vjust=0.5, size=12)) + theme(axis.title.y = element_text(face=&quot;bold&quot;, size=14), axis.text.y = element_text(vjust=0.5, size=12)) + theme(legend.position = &quot;top&quot;, legend.title=element_blank()) + tema_livro() -&gt; plot_pred2 ## Visualização dos dois gráficos em um única janela grid.arrange(plot_pred1, plot_pred2, ncol=2) Os resultados dos modelos anova(mod1) e anova(mod2)indicam que o gradiente de aridez não afeta a dispersão e regularidade funcional. Os detalhes para conferir os pressupostos das análise foram descritos no 7. Exemplo 6 Agora, vamos utilizar novamente os dados de 34 espécies de plantas (Frenette-Dussault et al. 2012), mas agora para testar o efeito do pastejo sobre a diversidade beta funcional. Pergunta: O pastejo determina a ocorrência de espécies de plantas com diferentes atributos funcionais ? Predição * A composição funcional de plantas é diferente entre áreas com e sem pastejo? Variáveis * Preditora: áreas com e sem pastejo de gado (variável categórica com dois níveis: grazed e ungrazed: ambie_fren_dat) Dependentes: composição de espécies (matriz de espécies por localidade: comun_fren_dat) e atributos funcionais (matriz de atributos contínuos por espécie: trait_fren_dat) ## Passo 1: CWM cwm_fren &lt;- functcomp(trait_pad, as.matrix(comun_fren_dat)) head(cwm_fren) #&gt; LA SLA LDMC LN15 LCC #&gt; 1 -0.2411700 -0.3485515 0.19745200 0.1874003 -0.5367368 #&gt; 2 -0.3977371 0.2326622 -0.09093270 -0.2859777 0.1643190 #&gt; 3 -0.1857134 0.2010756 -0.39877265 -0.1250643 -0.4304617 #&gt; 4 -0.2284064 0.1604101 0.80496307 -0.3704253 0.7193853 #&gt; 5 -0.1664790 0.3486956 0.02232213 -0.2041931 0.2051391 #&gt; 6 -0.3258821 0.3664583 0.04996829 -0.3352572 0.4713089 ## Passo 2: calcular a distância funcional cwm_dis &lt;- vegdist(cwm_fren, &quot;euclidean&quot;) ## Passo 3: testar se a composição funcional varia entre as áreas com uma PERMANOVA perman_fren &lt;- adonis(cwm_fren ~ Grazing, data = ambie_fren_dat) perman_fren #&gt; #&gt; Call: #&gt; adonis(formula = cwm_fren ~ Grazing, data = ambie_fren_dat) #&gt; #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Terms added sequentially (first to last) #&gt; #&gt; Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) #&gt; Grazing 1 -174.5 -174.46 -0.61591 -0.0142 0.547 #&gt; Residuals 44 12463.0 283.25 1.0142 #&gt; Total 45 12288.5 1.0000 ## Passo 4: comparar a variação dentro de cada grupo com Betadisper betad_fren &lt;- betadisper(cwm_dis, ambie_fren_dat$Grazing) permutest(betad_fren) #&gt; #&gt; Permutation test for homogeneity of multivariate dispersions #&gt; Permutation: free #&gt; Number of permutations: 999 #&gt; #&gt; Response: Distances #&gt; Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) #&gt; Groups 1 0.0539 0.053858 0.1946 999 0.669 #&gt; Residuals 44 12.1763 0.276735 ## Passo 5: visualização com PCoA plot(betad_fren) Neste exemplo, os resultados perman_fren demonstram que a composição funcional de plantas não é afetada pelo pastejo (P &gt; 0,05) e que a dispersão da composição (uma medida potencial de diversidade beta: Marti J. Anderson, Ellingsen, and McArdle 2006) de espécies também não muda entre áreas com ou sem pastejo (permutest(betad_fren)). A função betadisper deve ser sempre utilizada em conjunto com a PERMANOVA (adonis) para poder interpretar quais as fontes de variação na composição de espécies. Sendo assim, esta análise representa um método fundamental para comparar se o potencial efeito (quando houver) é fruto de diferença na composição de espécies (i.e., diferença na posição dos centróides entre dois ou mais grupos) ou na variação da composição de espécies entre os grupos (i.e., diferença na dispersão dos dados em relação aos centróides)9. Esta última informação, dispersão, é geralmente interpretada como uma analogia a homogeneidade de variâncias de uma ANOVA (i.e., teste de Levene). A hipótese nula do betadisper é que a dispersão dos grupos é homogênea (ou seja, o valor de probabilidade nos casos que existem dispersões homogêneas será maior do que 0,05). Porém, se esse valor for menor do que 0,05, você deve rejeitar a hipótese nula e concluir que as dispersões são heterogêneas. Os gráficos de PCoA são uma ferramenta poderosa para interpretar os resultados da PERMANOVA + Betadisper. Quanto mais diferente a composição de espécies entre dois ou mais grupos, mais distante devem ser os centroides desse grupo. Além disso, se as áreas dos polígonos que conectam todas as réplicas de cada grupo forem diferentes em tamanho (hipótese que será testada com o Betadisper), é possível também visualizar esta diferença. Em conclusão, para testar se diferenças de composição funcional existem entre dois ou mais grupos, será fundamental (1) comparar a variação da posição dos centróides (função adonis) e (2) a variação da dispersão da composição funcional entre os grupos (função betadisper). 14.5 Variação Intraspecífica Os métodos discutidos anteriormente utilizam valores médios dos atributos das espécies para descrever a estrutura funcional da comunidade e interpretar as relações entre determinadas variáveis preditoras (como clima, por exemplo) com a diverisdade funcional. Porém, ao utilizar atributos médios estamos desconsiderando que a variação deste atributo dentro da espécie seja determinante para a resposta da espécie ao ambiente ou seu efeito sobre o ecossistema (Bolnick et al. 2011 ; Violle et al. 2012). Os estudos que usam dados médios para testar hipóteses em ecologia funcional argumentam que a variação dentro da espécie é menor do que a variação entre espécies e, desse modo, o ruído causado ao desconsiderar a variância do atributo dentro da espécies é desprezível. Porém, diversos estudos têm mostrado que esse argumento é frágil e que a inclusão da variação intraespecífica melhora nossa capacidade preditiva em ecologia funcional (Violle et al. 2012; Siefert et al. 2015). Um abordagem geralmente utilizada é a decomposição da variância do atributo em diferentes níveis de organização: (1) variação dentro da população da mesma espécie em uma mesma unidade amostral, (2) variação dentro das populações (independente da espécie) de uma comunidade em uma mesma unidade amostral, e (3) variação entre populações. Conhecida como estatística T, esta abordagem permite entender as fontes (intra ou interespecífica) de variação no atributos em diferentes escalas (Violle et al. 2012). Outro método que quantifica a variância explicada pela variabilidade intraespecífica, interespecífica e a covariância entre elas foi proposto por Leps et al. (2011). Este método permite calcular a contribuição da variação intraespecífica dentro e entre comunidades. Agora, vamos entender a contribuição da variação de um atributo dentro da espécie comparada à variação entre espécies. Exemplo 7 Vamos utilizar os dados de 11 espécies de anuros associados com 26 poças no Parque Nacional Lagoa do Peixe (Dalmolin, Tozetti, and Pereira 2020). Atributos morfológicos foram coletados em todos os indivíduos coletados em cada poça. Desse modo, é possível comparar a variação morfológica entre indivíduos da mesma espécie e entre espécies diferentes. Além disso, é possível quantificar a contribuição da variação dentro e entre diferentes poças. No exemplo abaixo, criamos cinco atributos com nomes diferentes daqueles usados no artigo de Dalmolin et al. (2020). Em cada poça, os autores coletaram os seguintes dados das poças: (1) profundidade, (2) area, (3) distância entre poças, e (4) distância da poça para a floresta mais próxima. Pergunta 1 Qual a contribuição da variação intraespecífica para a variação total dos atributos morfológicos de anuros? Predição A alta plasticidade fenotípica de anuros indica alta contribuição da variação intraespecífica comparada a interespecífica. Variáveis Preditora: espécies (categórica). Dependente: variação dos atributos morfológicos. ## Dados necessários # Matriz de traits. head(traits) #&gt; pond Species body_size biomass eye_size leg_size flatness #&gt; 1 DN1 Sp2 2.405 2.291 3.104 0.450 0.794 #&gt; 2 DN1 Sp3 1.882 2.039 2.926 0.345 1.063 #&gt; 3 DN1 Sp4 0.699 0.342 0.782 0.104 3.055 #&gt; 4 DN1 Sp4 0.725 0.598 1.120 0.136 2.759 #&gt; 5 DN1 Sp4 0.448 0.385 0.844 0.107 3.557 #&gt; 6 DN1 Sp4 0.640 0.470 0.861 0.093 3.420 ## Partição da variação intra e interespecífica ## Passo 1: Tamanho corporal mod_body_size &lt;- aov(body_size~Species, data = traits) summary(mod_body_size) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Species 10 95.91 9.591 25.5 &lt;2e-16 *** #&gt; Residuals 195 73.35 0.376 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Contribuição da variação intra-específica para o tamanho corporal. itv_BS &lt;- 100*(73.35 / (95.92+73.35)) itv_BS #&gt; [1] 43.33314 ## Passo 2: Biomassa mod_biomass &lt;- aov(biomass~Species, data = traits) summary(mod_biomass) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Species 10 118.17 11.817 23.95 &lt;2e-16 *** #&gt; Residuals 195 96.22 0.493 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Contribuição da variação intra-específica para a biomassa. itv_biomass &lt;- 100*(96.22 / (118.17+96.22)) itv_biomass #&gt; [1] 44.88082 ## Passo 3: Tamanho do olho mod_eye_size &lt;- aov(eye_size~Species, data = traits) summary(mod_eye_size) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Species 10 203.1 20.309 50.51 &lt;2e-16 *** #&gt; Residuals 195 78.4 0.402 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Contribuição da variação intra-específica para o tamanho do olho. itv_eye_size &lt;- 100*(78.39 / (203.09+78.39)) itv_eye_size #&gt; [1] 27.84923 ## Passo 4: Achatamento dorso-ventral mod_flatness &lt;- aov(flatness~Species, data = traits) summary(mod_flatness) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; Species 10 104.47 10.447 92.07 &lt;2e-16 *** #&gt; Residuals 195 22.13 0.113 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Contribuição da variação intra-específica para o achatamento dorso-ventral. itv_flatness &lt;- 100*(22.13 / (104.48+22.13)) itv_flatness #&gt; [1] 17.47887 ## Passo 5: Combinar os valores de cada trait em um vetor valores &lt;- c(itv_BS, itv_biomass, itv_eye_size, itv_flatness) # Passo 6: Combinar valores e traits em um data.frame. itv_results &lt;- data.frame(trait = c(&quot;body_size&quot;, &quot;biomass&quot;, &quot;eye_size&quot;, &quot;flatness&quot;), itv_explic = valores) ## Tabela com resultados da explicação atribuida para a variação intraespecífica itv_results %&gt;% mutate(&quot;explained intraspecific variance&quot; = round(itv_explic, 2)) %&gt;% dplyr::select(trait, &quot;explained intraspecific variance&quot;) #&gt; trait explained intraspecific variance #&gt; 1 body_size 43.33 #&gt; 2 biomass 44.88 #&gt; 3 eye_size 27.85 #&gt; 4 flatness 17.48 Pergunta 2 Qual a contribuição da variação entre poças para a variação total dos atributos morfológicos de anuros? Predição A variação morfológica de anuros é afetada por mudanças dentro das espécies e entre diferentes espécies de poças distintas. Variáveis Preditoras: poças e espécies (ambas categóricas). Dependente: variação dos atributos morfológicos. ## Dados necessários # Matriz de traits sem nomes de espécies ou localidades trait_m &lt;- traits[,c(&quot;body_size&quot;, &quot;biomass&quot;, &quot;eye_size&quot;, &quot;leg_size&quot;, &quot;flatness&quot;)] head(trait_m) #&gt; body_size biomass eye_size leg_size flatness #&gt; 1 2.405 2.291 3.104 0.450 0.794 #&gt; 2 1.882 2.039 2.926 0.345 1.063 #&gt; 3 0.699 0.342 0.782 0.104 3.055 #&gt; 4 0.725 0.598 1.120 0.136 2.759 #&gt; 5 0.448 0.385 0.844 0.107 3.557 #&gt; 6 0.640 0.470 0.861 0.093 3.420 trait_decomp &lt;- decompCTRE(traits = trait_m, sp = traits$Species, ind.plot = traits$pond, print = FALSE) barplot.decompCTRE(trait_decomp) Pergunta 3 Características ambientais das poças afetam a variação intraespecífica? Predição A profunidade e área da poça aumentam a contribuição da variação intraespecífica em relação a variação interespecífica. Variáveis Preditora: características das poças. Dependentes: variação dos atributos morfológicos e contribuição da variação intraespecífica. Para calcular a contribuição relativa da variação intraespecífica em relação a variação interespecífica dentro de uma comunidade, por exemplo, Siefert et al. (2015) sugeriram uma métrica chamada de wITV (“within-community Intraspecific Trait Variation”). A wITV representa a razão da variação intraespecífica em relação a variação total dentro de uma comunidade (e.g., parcela, poça) que inclui: (i) a abundância relativa de cada espécie j ocorrendo na comunidade i, (ii) o valor médio do atributo da espécie j na comunidade i, e (iii) o valor do atributo k de cada indivíduo da espécie j que ocorre na comunidade i. Como esta medida é feita por unidade amostral (ou seja, sua comunidade de interesse), é possível testar hipóteses ecológicas que tentem explicar processos que aumentem ou diminuam a variação de um determinado atributo dentro ou entre espécies diferentes. A função wITV foi adaptada para a linguagem R por de Bello et al. (2021). Para facilitar o cálculo do wITV para cada comunidade, de Bello et al. (2021) executaram os comandos com a função for que repete iterativamente a análise para gerar os valores de todas as comunidades em uma forma dinâmica. Após executar as análises com o for, a função salva os resultados dentro do objeto `wITVResults`. Após obter esses resultados, é possível utilizar modelos lineares para testar quais variáveis preditoras (em nosso exemplo, características das poças) afetam o aumento ou diminuição da contribuição relativa da variação intraespecífica. ## Dados necessários # Matriz de traits. head(traits) #&gt; pond Species body_size biomass eye_size leg_size flatness #&gt; 1 DN1 Sp2 2.405 2.291 3.104 0.450 0.794 #&gt; 2 DN1 Sp3 1.882 2.039 2.926 0.345 1.063 #&gt; 3 DN1 Sp4 0.699 0.342 0.782 0.104 3.055 #&gt; 4 DN1 Sp4 0.725 0.598 1.120 0.136 2.759 #&gt; 5 DN1 Sp4 0.448 0.385 0.844 0.107 3.557 #&gt; 6 DN1 Sp4 0.640 0.470 0.861 0.093 3.420 # Matriz de comunidades e padronização para abundância relativa head(anuros_comm) #&gt; Sp10 Sp11 Sp2 Sp3 Sp4 Sp6 Sp7 Sp8 Sp1 Sp9 Sp5 #&gt; DN1 1 8 1 1 6 8 4 0 0 0 0 #&gt; DN2 0 0 0 0 1 1 4 2 0 0 0 #&gt; DN3 1 0 0 0 0 0 0 0 0 0 0 #&gt; DN4 0 0 2 2 1 0 0 0 6 0 0 #&gt; DN5 0 0 3 0 1 0 4 1 0 0 0 #&gt; FIG1 0 0 1 0 0 0 1 0 0 0 0 anuros_comm_rel &lt;- decostand(anuros_comm, &quot;total&quot;) # Variáveis ambientais. head(env) #&gt; depth area dits_bt_pond dist_for #&gt; DN1 0.50 3800 115 2650 #&gt; DN2 0.60 54600 250 2500 #&gt; DN3 0.80 29110 150 1800 #&gt; DN4 1.00 1386 410 195 #&gt; DN5 1.00 590 770 100 #&gt; FIG1 0.15 30 25 135 ## Prearação da matriz para receber os resultados do `for` wITVResults &lt;- data.frame(ITV = matrix(ncol=1, nrow=length(unique(traits$pond)))) rownames(wITVResults) &lt;- unique(traits$pond) for(i in 1:length(unique(traits$pond))){ commAux&lt;-subset(traits, traits$pond==unique(traits$pond)[i]) commAux$Species&lt;-droplevels(factor(commAux$Species)) spNames &lt;- unique(commAux$Species) relAbund&lt;- anuros_comm_rel[i ,as.character(spNames)] traitsVector &lt;- commAux$body_size spVector &lt;- commAux$Species wITVResults[i,1] &lt;- wITV(spIDs = spVector, traitVals = traitsVector, relAbund = relAbund) } wITVResults$ITV #&gt; [1] 0.82517670 0.23326457 NaN 0.15341806 0.10298952 0.00000000 0.02338235 0.68170997 0.79275763 0.66446945 #&gt; [11] 0.81726278 1.00000000 0.00000000 1.00000000 1.00000000 0.99220999 1.00000000 0.55519098 0.58945126 0.55148974 #&gt; [21] 0.80178255 1.00000000 1.00000000 NaN 0.19621528 0.14467854 env$wITV &lt;- wITVResults$ITV # NaN = locais com uma única espécie ## Remover NAs para executar o modelo linear env2 &lt;- na.omit(env) head(env2) #&gt; depth area dits_bt_pond dist_for wITV #&gt; DN1 0.50 3800 115 2650 0.82517670 #&gt; DN2 0.60 54600 250 2500 0.23326457 #&gt; DN4 1.00 1386 410 195 0.15341806 #&gt; DN5 1.00 590 770 100 0.10298952 #&gt; FIG1 0.15 30 25 135 0.00000000 #&gt; FIG2 0.15 30 25 135 0.02338235 ## Modelo linear mod_itv &lt;- lm(wITV~depth+area+dits_bt_pond+dist_for, data = env) ## Testar pressuposto da análise par(mfrow=c(2,2)) plot(mod_itv) ## Resultado summary(mod_itv) #&gt; #&gt; Call: #&gt; lm(formula = wITV ~ depth + area + dits_bt_pond + dist_for, data = env) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.6298 -0.3937 0.0448 0.3387 0.5266 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 4.555e-01 2.113e-01 2.156 0.0449 * #&gt; depth 2.767e-01 3.789e-01 0.730 0.4746 #&gt; area -3.116e-06 9.276e-06 -0.336 0.7409 #&gt; dits_bt_pond -3.653e-04 6.193e-04 -0.590 0.5626 #&gt; dist_for 5.698e-05 1.419e-04 0.401 0.6928 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.4103 on 18 degrees of freedom #&gt; (3 observations deleted due to missingness) #&gt; Multiple R-squared: 0.03155, Adjusted R-squared: -0.1837 #&gt; F-statistic: 0.1466 on 4 and 18 DF, p-value: 0.9621 Combinando os resultados das três análises é possível compreender que existem diferenças morfológicas entre as espécies de poças diferentes (componente substituição). Porém, é evidente que a variação dentro da espécie é bastante relevante para compreender a diversidade funcional de anuros. Na primeira análise, os resultados dessas quatro análises indicam que a variação intraspecifica explica de 17% a 45% da variação morfológica nas metacomunidades de anuros. A segunda, por sua vez, demonstra que a variação morfológica entre espécies de poças diferentes representa o principal componente de variação, mas que a variação intraespecífica não pode ser ignorada. Por fim, ao combinar a métrica wITV com modelos lineares, percebe-se que as características das poças não determinam a contribuição da variação intraespecífica. Além disso, existe uma variação muito grande entre poças. Ao passo que em algumas poças a variação intraespecífica não contribui para a variação total (wITV = 0), em outras, este componente representou 100% da variação (wITV = 1). Os resultados obtidos nas análises das perguntas 1 a 3 indicam que utilizar somente a média dos atributos morfológicos pode refletir em interpretações incorretas em estudos que compararam a diversidade funcional no espaço/tempo (veja discussão em Dalmolin, Tozetti, and Pereira 2020). Referências "],["cap15.html", "Capítulo 15 Dados geoespaciais no R Pré-requisitos do capítulo 15.1 Introdução 15.2 Vetor 15.3 Raster 15.4 Sistema de Referência de Coordenadas e Unidades 15.5 Principais fontes de dados geoespaciais 15.6 Importar e exportar dados geoespaciais 15.7 Descrição de objetos espaciais 15.8 Reprojeção de dados geoespaciais 15.9 Principais operações com dados geoespaciais 15.10 Visualização de dados geoespaciais 15.11 Exemplos de aplicações de análises geoespaciais para dados ecológicos 15.12 Para se aprofundar", " Capítulo 15 Dados geoespaciais no R Pré-requisitos do capítulo Pacotes que serão utilizados nesse capítulo. ## Pacotes library(ecodados) library(here) library(tidyverse) library(sf) library(raster) library(rgdal) library(spData) library(rnaturalearth) library(geobr) library(ggplot2) library(ggspatial) library(tmap) library(tmaptools) library(grid) library(mapview) library(leaflet) library(viridis) library(knitr) library(sidrar) library(janitor) 15.1 Introdução Nesta seção, vamos fazer uma breve introdução aos principais conceitos sobre a manipulação e visualização de dados geoespaciais no R. Iremos abordar temas de forma teórica e prática, utilizando a linguagem R, focando em: formatos de dados vetoriais e dados raster; Sistemas de Referências de Coordenadas e unidades (geográficas e projetadas); fontes de dados; importar e exportar dados; descrição de objetos geoespaciais e principais operações (atributos, espaciais e geométricas). Num segundo momento, criaremos mapas com seus principais elementos, como mapas principal e secundário, título, legenda, barra de escala, indicador de orientação (Norte), gride de coordenadas, descrição do Sistema de Referência de Coordenadas e informações de origem dos dados. Por fim, apresentaremos exemplos de aplicações de análises espaciais para dados ecológicos, focadas em agregar informações sobre a biodiversidade, preparar dados para compor variáveis preditoras, e como fazer predições espaciais de distribuição de uma espécie e riqueza de espécies. Esse capítulo segue parte da estrutura organizada por Lovelace, Nowosad, and Münchow (2019), principalmente os Capítulos 2 a 8, sendo adaptado para atender aos principais requisitos que julgamos necessários a estudos ecológicos. Entretanto, não foi possível cobrir todos os assuntos sobre o uso de dados geoespaciais no R, sendo um assunto muito extenso que requer a leitura de livros especializados na área como Mas et al. (2019), Wegmann, Leutner, and Dech (2016), Wegmann, Schwalb-Willmann, and Dech (2020) e Fletcher and Fortin (2018). Outros livros sobre a análise geoespacial no R podem ser consultados no Capítulo 11 - Geospatial do Big Book of R. 15.2 Vetor Dados vetoriais são usados para mapear fenômenos ou objetos espacialmente explícitos que possuem localização ou dimensões bem definidas, representado a partir de formas geométricas (pontos, linhas e polígonos) e possuem a possibilidade de ter associado a eles informações tabulares. A tabela de atributos é uma tabela que inclui dados geográficos e dados alfanuméricos. Os dados geoespaciais são representados por feição geolocalizada espacialmente (ponto, linha ou polígono), e os dados alfanuméricos. Dessa forma, a tabela de atributos reúne informações sobre cada feição e pode ser utilizada para realizar de filtros ou agregações dos dados de cada feição (Figura 15.1). Figura 15.1: Representação das geometrias de ponto, linha e polígono e atributos. Adaptado de: Olaya Ferrero (2020). 15.2.1 sf: principal pacote no R para dados vetoriais Atualmente o principal pacote para trabalhar com dados vetoriais no R é o sf, que implementou o Simple Feature (Pebesma 2018). Entretanto, outro pacote pode ser tão versátil quanto o sf, no caso o terra, com algumas mudanças na sintaxe que não abordaremos nesse livro. Os tipos de geometrias apresentadas são representadas por diferentes classes: POINT, LINESTRING e POLYGON para apenas uma feição de cada tipo de geometria; MULTIPOINT, MULTILINESTRING e MULTIPOLYGON para várias feições de cada tipo de geometria e; GEOMETRYCOLLECTION para várias feições e tipos de geometrias e classes. Ao olharmos as informações de um objeto da classe sf, podemos notar diversas informações que descrevem o mesmo, numa espécie de cabeçalho: resumo do vetor: indica o número de feições (linhas) e campos (colunas) tipo da geometria: umas das sete classes listadas anteriormente dimensão: número de dimensões, geralmente duas (XY) bbox (bordas): coordenadas mínimas e máximas da longitude e latitude informação do CRS: epsg ou proj4string indicando o CRS tibble: tabela de atributos, com destaque para a coluna geom ou geometry que representa cada feição ou geometria ## Dados vetoriais de polígonos do mundo data(world) world #&gt; Simple feature collection with 177 features and 10 fields #&gt; Geometry type: MULTIPOLYGON #&gt; Dimension: XY #&gt; Bounding box: xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.64513 #&gt; Geodetic CRS: WGS 84 #&gt; # A tibble: 177 × 11 #&gt; iso_a2 name_long continent region_un subregion type area_km2 pop lifeExp gdpPercap #&gt; * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 FJ Fiji Oceania Oceania Melanesia Sovereig… 1.93e4 8.86e5 70.0 8222. #&gt; 2 TZ Tanzania Africa Africa Eastern Africa Sovereig… 9.33e5 5.22e7 64.2 2402. #&gt; 3 EH Western Sahara Africa Africa Northern Africa Indeterm… 9.63e4 NA NA NA #&gt; 4 CA Canada North America Americas Northern America Sovereig… 1.00e7 3.55e7 82.0 43079. #&gt; 5 US United States North America Americas Northern America Country 9.51e6 3.19e8 78.8 51922. #&gt; 6 KZ Kazakhstan Asia Asia Central Asia Sovereig… 2.73e6 1.73e7 71.6 23587. #&gt; 7 UZ Uzbekistan Asia Asia Central Asia Sovereig… 4.61e5 3.08e7 71.0 5371. #&gt; 8 PG Papua New Guinea Oceania Oceania Melanesia Sovereig… 4.65e5 7.76e6 65.2 3709. #&gt; 9 ID Indonesia Asia Asia South-Eastern Asia Sovereig… 1.82e6 2.55e8 68.9 10003. #&gt; 10 AR Argentina South America Americas South America Sovereig… 2.78e6 4.30e7 76.3 18798. #&gt; # … with 167 more rows, and 1 more variable: geom &lt;MULTIPOLYGON [°]&gt; Podemos fazer um mapa simples utilizando a função plot() desse objeto. Para facilitar, escolheremos apenas a primeira coluna [1] (Figura 15.2). Caso não escolhermos apenas uma colunas, um mapa para cada coluna será plotado. IMPORTANTE: faremos mapas mais elaborados na seção de visualização de dados geoespaciais deste capítulo. ## Plot dos polígonos do mundo plot(world[1], col = viridis::viridis(100), main = &quot;Mapa do mundo&quot;) Figura 15.2: Mapa vetorial do mundo. 15.3 Raster Os dados no formato raster consistem em uma matriz (com linhas e colunas) representando células, geralmente igualmente espaçadas (pixels; Figura 15.3). As células dos dados raster possuem duas informações: 1. identificação das células (IDs das células) para especificar sua posição na matriz (Figura 15.3 A) e; 2. valores das células (Figura 15.3 B), que geralmente são coloridos para facilitar a interpretação da variação dos valores no espaço (Figura 15.3 C). Além disso, valores ausentes ou não amostrados são representados por NA, ou seja, not available (Figura 15.3 B e C). Figura 15.3: Raster: (A) IDs das células, (B) valores das células, (C) células coloridas. Adaptado de: Lovelace, Nowosad, and Münchow (2019). 15.3.1 raster: principal pacote no R para dados raster Atualmente, o principal pacote para trabalhar com dados raster é o raster, apesar de existir outros dois em desenvolvimento e já sendo aplicados, como o terra e o stars, com algumas mudanças na sintaxe que não abordaremos nesse livro. O pacote raster fornece uma ampla gama de funções para criar, importar, exportar, manipular e processar dados raster no R. O objeto raster pode assumir três classes no R: RasterLayer, RasterStack e RasterBrick. A classe RasterLayer representa apenas uma camada raster. Para criar ou importar um raster no R podemos utilizar a função raster::raster(). Observando essa classe, podemos notar as seguintes informações: class: classe raster do objeto raster dimensions: número de linhas, colunas e células resolution: largura e altura da célula extent: coordenadas mínimas e máximas da longitude e latitude crs: Sistema de Referência de Coordenadas (CRS) source: fonte dos dados (memória ou disco) names: nome das camadas values: valores máximos e mínimos das células Vamos utilizar os dados volcano, que possui informações topográficas (elevação) do vulcão Maunga Whau de Auckland na Nova Zelândia. ## Dados de altitude de um vulcão volcano[1:5, 1:5] #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 100 100 101 101 101 #&gt; [2,] 101 101 102 102 102 #&gt; [3,] 102 102 103 103 103 #&gt; [4,] 103 103 104 104 104 #&gt; [5,] 104 104 105 105 105 Vamos transformar essa matriz de dados em um raster com a função raster::raster(). ## Rasterlayer raster_layer &lt;- raster::raster(volcano) raster_layer #&gt; class : RasterLayer #&gt; dimensions : 87, 61, 5307 (nrow, ncol, ncell) #&gt; resolution : 0.01639344, 0.01149425 (x, y) #&gt; extent : 0, 1, 0, 1 (xmin, xmax, ymin, ymax) #&gt; crs : NA #&gt; source : memory #&gt; names : layer #&gt; values : 94, 195 (min, max) Um mapa simples do objeto raster pode ser obtido utilizando a função plot(), do próprio pacote raster (Figura 15.4). ## Plot raster layers plot(raster_layer, col = viridis::viridis(n = 100)) Figura 15.4: Mapa simples de um RasterLayer. Além da classe RasterLayer, há mais duas classes que trabalham com múltiplas camadas: RasterBrick e RasterStack. Elas diferem em relação ao número de formatos de arquivo suportados, tipo de representação interna e velocidade de processamento. A classe RasterBrick geralmente corresponde a importação de um único arquivo de imagem de satélite multiespectral (multicamadas) ou a um único objeto com várias camadas na memória. A função raster::brick() cria um objeto RasterBrick. ## Raster layers raster_layer1 &lt;- raster_layer raster_layer2 &lt;- raster_layer * raster_layer raster_layer3 &lt;- sqrt(raster_layer) raster_layer4 &lt;- log10(raster_layer) ## Raster brick raster_brick &lt;- raster::brick(raster_layer1, raster_layer2, raster_layer3, raster_layer4) raster_brick #&gt; class : RasterBrick #&gt; dimensions : 87, 61, 5307, 4 (nrow, ncol, ncell, nlayers) #&gt; resolution : 0.01639344, 0.01149425 (x, y) #&gt; extent : 0, 1, 0, 1 (xmin, xmax, ymin, ymax) #&gt; crs : NA #&gt; source : memory #&gt; names : layer.1, layer.2, layer.3, layer.4 #&gt; min values : 94.000000, 8836.000000, 9.695360, 1.973128 #&gt; max values : 195.000000, 38025.000000, 13.964240, 2.290035 Ao utilizarmos a função plot() do pacote raster, podemos visualizar todos os raster contidos no objeto RasterBrick (Figura 15.5). ## Plot raster brick plot(raster_brick, col = viridis::viridis(n = 25), main = &quot;&quot;) Figura 15.5: Mapas simples de um raster RasterBrick. Já a classe RasterStack permite conectar vários objetos raster armazenados em arquivos diferentes ou vários objetos na memória. Um RasterStack é uma lista de objetos RasterLayer com a mesma extensão, resolução e CRS. Uma maneira de criá-lo é com a junção de vários objetos espaciais já existentes no ambiente do R ou listar vários arquivos raster em um diretório armazenado no disco. A função raster::stack() cria um objeto RasterStack. Outra diferença é que o tempo de processamento para objetos RasterBrick geralmente é menor do que para objetos RasterStack. A decisão sobre qual classe Raster deve ser usada depende principalmente do caráter dos dados de entrada. ## Raster layers raster_layer1 &lt;- raster_layer raster_layer2 &lt;- raster_layer * raster_layer raster_layer3 &lt;- sqrt(raster_layer) raster_layer4 &lt;- log10(raster_layer) ## Raster stack raster_stack &lt;- raster::stack(raster_layer1, raster_layer2, raster_layer3, raster_layer4) raster_stack #&gt; class : RasterStack #&gt; dimensions : 87, 61, 5307, 4 (nrow, ncol, ncell, nlayers) #&gt; resolution : 0.01639344, 0.01149425 (x, y) #&gt; extent : 0, 1, 0, 1 (xmin, xmax, ymin, ymax) #&gt; crs : NA #&gt; names : layer.1, layer.2, layer.3, layer.4 #&gt; min values : 94.000000, 8836.000000, 9.695360, 1.973128 #&gt; max values : 195.000000, 38025.000000, 13.964240, 2.290035 Da mesma forma, ao utilizar a função plot() do pacote raster, podemos visualizar todos os raster contidos no objeto RasterStack (Figura 15.6). ## Plot raster stack plot(raster_stack, col = viridis::viridis(n = 25), main = &quot;&quot;) Figura 15.6: Mapas simples de um raster RasterStack. 15.4 Sistema de Referência de Coordenadas e Unidades Os dados geoespaciais (vetor e raster) possuem ainda um outro componente fundamental que é o Sistema de Referência de Coordenadas, ou do inglês Coordinate Reference System (CRS). Esse componente define a referência espacial de elementos geoespaciais (vetor e raster) na superfície da Terra. Esse componente é composto por dois principais conceitos: primeiro, que tipo de unidades estão sendo utilizadas para a representação geográfica, podendo assumir dois tipos - ângulos ou metros, que definem o Sistema de Coordenadas Geográficas e o Sistema de Coordenadas Projetadas, respectivamente. O segundo componente é o datum, que é a relação do sistema de coordenadas (geográfica ou projetada) com a superfície da Terra. Esse último componente faz parte de uma área da Cartografia denominada Geodésia que estuda a forma e dimensões da Terra, campo gravitacional e a localização de pontos fixos e sistemas de coordenadas. O livro de Lapaine and Usery (2017) é um excelente material para se aprofundar nesse assunto. 15.4.1 Sistema de Coordenadas Geográficas O Sistema de Coordenadas Geográficas utiliza ângulos (graus) para representar feições na superfície da Terra através de dois valores: longitude e latitude. A longitude representa o eixo Leste-Oeste e a latitudeo eixo Norte-Sul. Nesse sistema, a superfície da Terra é representada geralmente por uma superfície elipsoidal, pois a Terra é ligeiramente achatada nos polos. 15.4.2 Sistema de Coordenadas Projetadas O Sistema de Coordenadas Projetadas utiliza um Sistema Cartesiano de Coordenadas em uma superfície plana. Dessa forma, a partir de uma origem traçam-se eixos x e y e uma unidade linear como o metro é utilizada. Todos as projeções feitas de sistemas geográficos convertem uma superfície tridimensional em uma superfície plana bidimensional. Sendo assim, essa conversão traz consigo algum tipo de distorção em relação à porção real, podendo ser distorções em: 1) formas locais, 2) áreas, 3) distâncias, 4) flexão ou curvatura, 5) assimetria ou 6) lacunas de continuidade. Dessa forma, um sistema de coordenadas projetadas pode preservar somente uma ou duas dessas propriedades. Existem três grandes grupos de projeções: cilíndricos, cônicos e planares. Na projeção cilíndrica, a superfície da Terra é mapeada em um cilindro, criada tocando a superfície da Terra ao longo de uma ou duas linhas de tangência, sendo utilizada com mais frequência para mapear todo o globo tendo como exemplo mais conhecido a Projeção Universal Transversa de Mercator (UTM). Na projeção cônica, a superfície da Terra é projetada em um cone ao longo de uma linha ou duas linhas de tangência, de modo que as distorções são minimizadas ao longo das linhas e aumentam com a distância das mesmas, sendo portanto, mais adequada para mapear áreas de latitudes médias, tendo como exemplo mais conhecido a Projeção Cônica Equivalente de Albers e a Projeção Cônica Conforme de Lambert. E na projeção plana, também denominada Projeção azimutal, o mapeamento toca o globo em um ponto ou ao longo de uma linha de tangência, sendo normalmente usado no mapeamento de regiões polares, sendo a mais comum a Projeção Azimutal Equidistante, a mesma utilizada na bandeira da ONU. 15.4.3 Datum Como dito anteriormente, o datum é a relação do sistema de coordenadas com a superfície da Terra. Ele representa o ponto de intersecção do elipsoide de referência com a superfície da Terra (geoide, forma verdadeira da Terra), compensando as diferenças do campo gravitacional da Terra. Existem dois tipos de datum - local e geocêntrico. Em um datum local, como o SAD69 - South American Datum 1969, o elipsoide de referência é deslocado para se alinhar com a superfície em um determinado local, por exemplo, na América do Sul. Já em um datum geocêntrico, como WGS84 - World Geodetic System 1984, o centro do elipsoide é o centro de gravidade da Terra e a precisão das projeções não é otimizada para um local específico do globo. No Brasil, desde 2015, o Instituto Brasileiro de Geografia e Estatística (IBGE) ajudou a desenvolver e reafirmou o uso do datum SIRGAS2000 - Sistema de Referencia Geocéntrico para las Américas 2000 para todos os mapeamentos realizados no Brasil, um esforço conjunto para adotar o mesmo datum em toda a América. Mais sobre esse datum pode ser lido aqui: SIRGAS2000. 15.4.4 Sistema de Referência de Coordenadas (CRS) no R No R, há duas formas principais de representar um Sistema de Referência de Coordenadas: 1. código epsg e 2. proj4string. O código EPSG (European Petroleum Survey Group) é uma sequência de números curta, referindo-se apenas a um CRS. O site epsg.io permite consultar diversas informações sobre um código, como procurar por um código, representação de mapas e fazer transformações de CRS. Já proj4string permite mais flexibilidade para especificar diferentes parâmetros, como o tipo de projeção, datum e elipsoide. Dessa forma, é possível especificar muitas projeções, ou mesmo modificar as projeções existentes, tornando a representação proj4string mais complexa e flexível. Além disso, ainda é possível consultar uma extensa lista de CRSs no site spatialreference.org, que fornece descrições em diversos formatos, baseados em GDAL e Proj.4. Essa abordagem permite consultar uma URL que pode produzir uma referência espacial em um formato que seu software SIG ou o R pode utilizar como referência. Os pacotes espaciais no R suportam uma ampla variedade de CRSs e usam a biblioteca PROJ. A função rgdal::make_EPSG() retorna um data frame das projeções disponíveis, com informações dos códigos epsg e proj4string numa mesma tabela, facilitando a busca e uso de CRSs (Tabela 15.1). ## Listagem dos Sistemas de Referências de Coordenadas no R crs_data &lt;- rgdal::make_EPSG() head(crs_data) Tabela 15.1: Listagem de Sistemas de Referências de Coordenadas disponíveis no R, com informações dos códigos epsg e proj4string code note prj4 prj_method 3819 HD1909 +proj=longlat +ellps=bessel +no_defs +type=crs (null) 3821 TWD67 +proj=longlat +ellps=aust_SA +no_defs +type=crs (null) 3822 TWD97 +proj=geocent +ellps=GRS80 +units=m +no_defs +type=crs (null) 3823 TWD97 +proj=longlat +ellps=GRS80 +no_defs +type=crs (null) 3824 TWD97 +proj=longlat +ellps=GRS80 +no_defs +type=crs (null) 3887 IGRS +proj=geocent +ellps=GRS80 +units=m +no_defs +type=crs (null) 15.5 Principais fontes de dados geoespaciais Existem diversas fontes de dados geoespaciais em diferentes bases de dados disponíveis gratuitamente. Geralmente essas bases de dados são disponibilizadas separadamente em apenas dados vetoriais e dados raster. Para dados vetoriais, grande parte dos dados disponibilizados são utilizados em mapas como limites políticos, limites de geo_vetor_biomas ou distribuição de espécies para polígonos; estradas e rios para dados lineares, ou ainda pontos de ocorrência de espécies ou comunidades, ou medidas tomadas em campo sobre condições naturais como clima ou relevo, como pontos. Entretanto, é sempre recomendado o uso de bases oficiais, principalmente em relação a dados vetoriais de limites políticos. Para tanto, é fundamental buscar as bases oficiais de cada país, entretanto, há bases que podem ser utilizadas globalmente, como veremos. Sobre as bases de dados raster, há uma infinidade de dados para diferentes objetivos, mas grande parte deles são relativos à condições ambientais, representando uma variável de interesse de forma contínua no espaço, como temperatura, precipitação, elevação, etc. Há uma compilação de dados geoespaciais vetoriais e raster feita por Marcus Vinícius Alves de Carvalho e Angelica Carvalho Di Maio, chamada GeoLISTA. Entretanto, como as bases de dados tendem a ser muito dinâmicas é possível que muitas bases tenham surgido e desaparecido desde a listagem realizada. Além das bases de dados, há pacotes específicos no R que fazem o download de dados vetoriais e rasters, facilitando a aquisição e reprodutibilidade. Para conferir uma listagem completa de pacotes para diversas análises espaciais, veja CRAN Task View: Analysis of Spatial Data. 15.5.1 Vetor Dentre as bases vetoriais, destacamos as seguintes na Tabela 15.2: Tabela 15.2: Principais bases de dados vetoriais para o Brasil e o Mundo. Bases de dados Descrição IBGE Limites territoriais e censitários do Brasil FBDS Uso da terra, APP e hidrografia - Mata Atlântica e Cerrado GeoBank Dados geológicos do Brasil Pastagem.org Dados de pastagens e gado para o Brasil CanaSat Dados de cana-de-açúcar para o Brasil CSR Maps Diversos dados vetoriais e raster para o Brasil Ecoregions Dados de biorregiões e geo_vetor_biomas do mundo UN Biodiversity Lab Diversas bases de dados para o mundo Biodiversity Hotspots Dados dos limites dos Hotspots de Biodiversidade IUCN Red List of Threatened Species Dados dos limites das distribuições das espécies para o mundo Map of Life (MOL) Dados da distribuição de espécies e outros dados para o mundo Key Biodiversity Areas Dados dos limites das Key Biodiversity Areas HydroSHEDS Informações hidrológicas do mundo Global Roads Inventory Project (GRIP) Dados de estradas do mundo todo Database of Global Administrative Areas (GADM) Limites de áreas administrativas do mundo Natural Earth Diversos limites para o mundo Protected Planet Limites de áreas protegidas para o mundo Global Biological Information Facility (GBIF) Dados de ocorrências de espécies para o mundo Species Link Dados de ocorrências de espécies para o Brasil Global Invasive Species Information Network (GISIN) Dados de ocorrências de espécies invasoras para o Mundo 15.5.2 Raster Dentre as bases raster, destacamos as seguintes na Tabela 15.3: Tabela 15.3: Principais bases de dados raster para o Brasil e o Mundo. Bases de dados Descrição Mapgeo_vetor_biomas Uso e cobertura da terra para o Brasil, Panamazonia Legal e Chaco, de 1985 a 2019 Bahlu Distribuições históricas de terras agrícolas e pastagens para todo o Brasil de 1940 a 2012 USGS Dados de diversos satélites livres para o mundo SRTM Dados de elevação para o mundo Geoservice Maps Dados de elevação e florestas para o mundo Global Forest Watch Dados de florestas para o mundo GlobCover Dados de uso e cobertura da terra para todo o planeta Landcover Dados de uso e cobertura da terra para todo o planeta Global Human Footprint Dados de pegada ecológica para o mundo GHSL - Global Human Settlement Layer Dados e ferramentas abertos e gratuitos para avaliar a presença humana no planeta Land-Use Harmonization (LUH2) Dados atuais e previsões de uso da terra ESA Climate Change Initiative Arquivos globais de observação da Terra nos últimos 30 anos da Agência Espacial Europeia (ESA) WorldClim Dados climáticos para o mundo CHELSA Dados climáticos para o mundo EarthEnv Dados de cobertura da terra, nuvens, relevo e hidrografia SoilGrids Dados de solo para o mundo Global Wetlands Dados de áreas úmidas para o mundo Global Surface Water Explorer Dados de águas superficiais para o mundo MARSPEC Dados de condições do oceano para o mundo Bio-ORACLE Dados de condições do oceano para o mundo 15.5.3 Pacotes do R Dentre os pacotes no R para download de dados geoespaciais, destacamos os seguintes na Tabela 15.4: Tabela 15.4: Principais pacotes no R para download de dados vetoriais e raster. Pacotes Descrição geobr Carrega Shapefiles de Conjuntos de Dados Espaciais Oficiais do Brasil rnaturalearth Dados do mapa mundial da Natural Earth rworldmap Mapeando Dados Globais spData Conjuntos de dados para análise espacial OpenStreetMap Acesso para abrir imagens raster de mapas de ruas osmdata Baixe e importe dados do OpenStreetMap geonames Interface para o serviço da Web de consulta espacial ‘Geonames’ rgbif Interface para o Global ‘Biodiversity’ Information Facility API maptools Ferramentas para lidar com objetos espaciais marmap Importar, traçar e analisar dados batimétricos e topográficos oce Fonte e processamento de dados oceanográficos envirem Geração de Variáveis ENVIREM sdmpredictors Conjuntos de dados preditor de modelagem de distribuição de espécies metScanR Encontre, Mapeie e Colete Dados e Metadados Ambientais ClimDown Biblioteca de redução de escala do clima para a produção diária do modelo climático rWBclimate Acessa dados climáticos do Banco Mundial rnoaa Dados meteorológicos ‘NOAA’ de R RNCEP Obtenha, organize e visualize dados meteorológicos NCEP smapr Aquisição e processamento de dados ativos-passivos (SMAP) de umidade do solo da NASA 15.6 Importar e exportar dados geoespaciais Agora que sabemos o que são dados geoespaciais e em quais bases de dados podemos buscar e baixar esses dados, veremos seus principais formatos e como importá-los e exportá-los do R. 15.6.1 Principais formatos de arquivos geográficos Há diversos formatos de arquivos geográficos, alguns específicos para dados vetoriais e raster, e outros no formato de banco de dados geoespaciais, como PostGIS, que podem armazenar ambos os formatos. Entretanto, todos os formatos para serem importados para o R usam do GDAL (Geospatial Data Abstraction Library), uma interface unificada para leitura e gravação de diversos formatos de arquivos geográficos, sendo utilizado também por uma série de softwares de GIS como QGIS, GRASS GIS e ArcGIS. Dentre esses formatos, destacamos os seguintes na Tabela 15.5. Tabela 15.5: Principais formatos de arquivos geográficos. Adaptado de: Lovelace, Nowosad, and Münchow (2019). Nome extensão Descrição Tipo Modelo ESRI Shapefile .shp (arquivo principal) Formato popular que consiste em pelo menos quatro arquivos: .shp (feição), .dbf (tabela de atributos), .shx (ligação entre .shp e .dbf) e .prj (projeção) Vetor Parcialmente aberto GeoJSON .geojson Estende o formato de troca JSON incluindo um subconjunto da representação de recurso simples Vetor Aberto KML .kml Formato baseado em XML para visualização espacial, desenvolvido para uso com o Google Earth. O arquivo KML compactado forma o formato KMZ Vetor Aberto GPX .gpx Esquema XML criado para troca de dados de GPS Vetor Aberto GeoTIFF .tif/.tiff Formato raster popular. Um arquivo TIFF contendo metadados espaciais adicionais. Raster Aberto Arc ASCII .asc Formato de texto em que as primeiras seis linhas representam o cabeçalho raster, seguido pelos valores das células raster organizadas em linhas e colunas Raster Aberto NetCDF .nc NetCDF (Network Common Data Form) é um conjunto de bibliotecas de software e formatos de dados independentes para criação Raster Aberto BIL .bil/.hdr BIL (Banda intercalada por linha) são métodos comuns de organização para imagens multibanda, geralmente acompanhados por um arquivo .hdr, descrevendo atributos específicos da imagem Raster Aberto R-raster .gri/ .grd Formato raster nativo do raster do pacote R Raster Aberto SQLite/SpatiaLite .sqlite Banco de dados relacional autônomo Vetor e raster Aberto ESRI FileGDB .gdb Objetos espaciais e não espaciais criados pelo ArcGIS. Permite: várias classes de recursos; topologia Vetor e raster Proprietário GeoPackage .gpkg Contêiner de banco de dados leve baseado em SQLite permitindo uma troca fácil e independente de plataforma de geodados Vetor e raster Aberto O formato mais comum para arquivos vetoriais é o ESRI Shapefile, para arquivos raster é o GeoTIFF, e para dados climáticos em múltiplas camadas, geralmente há a disponibilização de dados no formato NetCDF. Entretanto, recentemente tivemos o surgimento do GeoPackage, que possui diversas vantagens em relação aos formatos anteriores, podendo armazenar em apenas um arquivo, dados no formato vetorial, raster e também dados não-espaciais, além de possuir uma grande integração com diversos softwares e bancos de dados. 15.6.2 Importar dados As principais funções para importar dados no R são: 1) para vetores a função sf::st_read(), e 2) para raster a função raster::raster() e suas variações raster::brick() e raster::stack() para múltiplas camadas. Essas funções atribuem objetos ao seu espaço de trabalho, armazenando-os na memória RAM disponível em seu hardware, sendo essa a maior limitação para trabalhar com dados geoespaciais no R. Por exemplo, se um arquivo raster possui mais de 8 Gb de tamanho, e seu computador possui exatamente 8 Gb de RAM, é muito provável que ele não seja importado ou mesmo criado como um objeto dentro do ambiente R. Existem soluções para esses problemas, mas não as abordaremos nesse capítulo. 15.6.2.1 Vetor Como vimos, os arquivos vetoriais são disponibilizados em diversos formatos. Para sabermos se um determinado formato pode ser importado ou exportado utilizando o pacote sf, podemos utilizar a função sf::st_drivers(). Uma amostra desses formatos é apresentado na Tabela 15.6: ## Formatos vetoriais importados e exportados pelo pacote sf head(sf::st_drivers()) Tabela 15.6: Alguns formatos vetoriais importados e exportados pelo pacote sf. name long_name write copy is_raster is_vector vsi ESRIC Esri Compact Cache FALSE FALSE TRUE TRUE TRUE FITS Flexible Image Transport System TRUE FALSE TRUE TRUE FALSE PCIDSK PCIDSK Database File TRUE FALSE TRUE TRUE TRUE netCDF Network Common Data Format TRUE TRUE TRUE TRUE TRUE PDS4 NASA Planetary Data System 4 TRUE TRUE TRUE TRUE TRUE VICAR MIPL VICAR file TRUE TRUE TRUE TRUE TRUE 15.6.2.1.1 Importar dados vetoriais existentes Para importar vetores existentes para o R, utilizaremos a função sf::st_read(). A estrutura é semelhante para todos os formatos descritos na Tabela 15.6, de modo que sempre preencheremos o argumento dsn (data source name) com o nome do arquivo a ser importado. Entretanto, para banco de dados, como GeoPackage, pode ser necessário especificar a camada que se tem interesse com um segundo argumento chamado layer, com o nome da camada. Para quase todas as operações vetoriais nesse capítulo, usaremos os dados disponíveis para o município de Rio Claro/SP. Primeiramente, baixaremos esses dados da FBDS (Fundação Brasileira para o Desenvolvimento Sustentável), através desse repositório de dados. Em 2013, a FBDS deu início ao Projeto de Mapeamento em Alta Resolução dos geo_vetor_biomas Brasileiros, mapeando a cobertura da terra, hidrografia (nascentes, rios e lagos) e Áreas de Preservação Permanente (APPs). O mapeamento foi concluído para os municípios dos geo_vetor_biomas Mata Atlântica e Cerrado. Para fazer o download dos arquivos de interesse, utilizaremos o R, através da função download.file(). Primeiramente, criaremos um diretório com a função create.dir(), usando a função here::here() para indicar o repositório (ver o Capítulo 5). ## Criar diretório dir.create(here::here(&quot;dados&quot;)) dir.create(here::here(&quot;dados&quot;, &quot;vetor&quot;)) Em seguida, vamos fazer o download de pontos de nascentes, linhas de hidrografia e polígonos de cobertura da terra para o município de Rio Claro/SP. ## Aumentar o tempo de download options(timeout = 1e3) ## Download for(i in c(&quot;.dbf&quot;, &quot;.prj&quot;, &quot;.shp&quot;, &quot;.shx&quot;)){ # Pontos de nascentes download.file( url = paste0(&quot;http://geo.fbds.org.br/SP/RIO_CLARO/HIDROGRAFIA/SP_3543907_NASCENTES&quot;, i), destfile = here::here(&quot;dados&quot;, &quot;vetor&quot;, paste0(&quot;SP_3543907_NASCENTES&quot;, i)), mode = &quot;wb&quot;) # Linhas de hidrografia download.file( url = paste0(&quot;http://geo.fbds.org.br/SP/RIO_CLARO/HIDROGRAFIA/SP_3543907_RIOS_SIMPLES&quot;, i), destfile = here::here(&quot;dados&quot;, &quot;vetor&quot;, paste0(&quot;SP_3543907_RIOS_SIMPLES&quot;, i)), mode = &quot;wb&quot;) # Polígonos de cobertura da terra download.file( url = paste0(&quot;http://geo.fbds.org.br/SP/RIO_CLARO/USO/SP_3543907_USO&quot;, i), destfile = here::here(&quot;dados&quot;, &quot;vetor&quot;, paste0(&quot;SP_3543907_USO&quot;, i)), mode = &quot;wb&quot;) } Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_nascentes ecodados::geo_vetor_hidrografia ecodados::geo_vetor_cobertura Agora podemos importar esses dados para o R. Primeiro vamos importar as nascentes (Figura 15.7). ## Importar nascentes geo_vetor_nascentes &lt;- sf::st_read( here::here(&quot;dados&quot;, &quot;vetor&quot;, &quot;SP_3543907_NASCENTES.shp&quot;), quiet = TRUE) ## Plot plot(geo_vetor_nascentes[1], pch = 20, col = &quot;blue&quot;, main = NA, axes = TRUE, graticule = TRUE) Figura 15.7: Mapa de nascentes de Rio Claro/SP. Agora vamos importar a hidrografia (Figura 15.8). ## Importar hidrografia geo_vetor_hidrografia &lt;- sf::st_read( here::here(&quot;dados&quot;, &quot;vetor&quot;, &quot;SP_3543907_RIOS_SIMPLES.shp&quot;), quiet = TRUE) ## Plot plot(geo_vetor_hidrografia[1], col = &quot;steelblue&quot;, main = NA, axes = TRUE, graticule = TRUE) Figura 15.8: Mapa da hidrografia de Rio Claro/SP. E por fim, vamos importar a cobertura da terra (Figura 15.9). ## Importar cobertura da terra geo_vetor_cobertura &lt;- sf::st_read( here::here(&quot;dados&quot;, &quot;vetor&quot;, &quot;SP_3543907_USO.shp&quot;), quiet = TRUE) ## Plot plot(geo_vetor_cobertura[5], col = c(&quot;blue&quot;, &quot;orange&quot;, &quot;gray30&quot;, &quot;forestgreen&quot;, &quot;green&quot;), main = NA, axes = TRUE, graticule = TRUE) legend(x = .1, y = .3, pch = 15, cex = .7, pt.cex = 2.5, legend = (geo_vetor_cobertura$CLASSE_USO), col = c(&quot;blue&quot;, &quot;orange&quot;, &quot;gray30&quot;, &quot;forestgreen&quot;, &quot;green&quot;)) Figura 15.9: Mapa de cobertura da terra de Rio Claro/SP. 15.6.2.1.2 Importar utilizando pacotes Além de dados existentes, podemos importar dados vetoriais de pacotes, como listado anteriormente na Tabela 15.4. Para o Brasil, o pacote mais interessante trata-se do geobr, do Instituto de Pesquisa Econômica Aplicada (IPEA), que possui dados oficiais do Instituto Brasileiro de Geografia e Estatística (IBGE). É possível listar todos os dados disponíveis no pacote através da função geobr::list_geobr(). Na Tabela 15.7 é possível ver alguns desses dados. ## Listar todos os dados do geobr geobr::list_geobr() #&gt; # A tibble: 27 × 4 #&gt; `function` geography years source #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 `read_country` Country 1872, 1900, 1911, 1920, 1933, 194… IBGE #&gt; 2 `read_region` Region 2000, 2001, 2010, 2013, 2014, 201… IBGE #&gt; 3 `read_state` States 1872, 1900, 1911, 1920, 1933, 194… IBGE #&gt; 4 `read_meso_region` Meso region 2000, 2001, 2010, 2013, 2014, 201… IBGE #&gt; 5 `read_micro_region` Micro region 2000, 2001, 2010, 2013, 2014, 201… IBGE #&gt; 6 `read_intermediate_region` Intermediate region 2017, 2019, 2020 IBGE #&gt; 7 `read_immediate_region` Immediate region 2017, 2019, 2020 IBGE #&gt; 8 `read_municipality` Municipality 1872, 1900, 1911, 1920, 1933, 194… IBGE #&gt; 9 `read_municipal_seat` Municipality seats (sedes municipais) 1872, 1900, 1911, 1920, 1933, 194… IBGE #&gt; 10 `read_weighting_area` Census weighting area (área de ponderação) 2010 IBGE #&gt; # … with 17 more rows Tabela 15.7: Alguns dados disponíveis no pacote geobr. function geography years source read_country Country 1872, 1900, 1911, 1920, 1933, 1940, 1950, 1960, 1970, 1980, 1991, 2000, 2001, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 IBGE read_region Region 2000, 2001, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 IBGE read_state States 1872, 1900, 1911, 1920, 1933, 1940, 1950, 1960, 1970, 1980, 1991, 2000, 2001, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 IBGE read_meso_region Meso region 2000, 2001, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 IBGE read_micro_region Micro region 2000, 2001, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020 IBGE read_intermediate_region Intermediate region 2017, 2019, 2020 IBGE Como exemplo, vamos fazer o download o limite do município de Rio Claro/SP, utilizando o código do município (3543907) (Figura 15.10). ## Polígono do limite do município de Rio Claro geo_vetor_rio_claro &lt;- geobr::read_municipality(code_muni = 3543907, year = 2020, showProgress = FALSE) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_rio_claro ## Plot plot(geo_vetor_rio_claro[1], col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) Figura 15.10: Limite do município de Rio Claro/SP. Já para o mundo, o pacote mais interessante trata-se do rnaturalearth, que faz o download de dados do Natural Earth. Vamos fazer o download do limite do Brasil (Figura 15.11). ## Polígono do limite do Brasil geo_vetor_brasil &lt;- rnaturalearth::ne_countries(scale = &quot;large&quot;, country = &quot;Brazil&quot;, returnclass = &quot;sf&quot;) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_brasil ## Plot plot(geo_vetor_brasil[1], col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) Figura 15.11: Limite do Brasil. 15.6.2.1.3 Criar um objeto espacial de uma tabela de coordenadas É muito comum em coletas de campo ou fontes de dados, ter coordenadas de locais de estudo ou de ocorrências de espécies organizadas em tabelas. Essas tabelas devem possuir duas colunas: longitude e latitude, ou X e Y para dados UTM, por exemplo. Ao importá-las para o R, o formato que assumem pode ser de uma das classes: matrix, data frame ou tibble, ou seja, ainda não são da classe vetorial sf. Nesta seção iremos ver como fazer essa conversão. Para tanto, vamos usar os dados de comunidades de anfíbios da Mata Atlântica (Atlantic Amphibians, Vancine et al. (2018)). Fazeremos o download diretamente do site da fonte dos dados. Antes vamos criar um diretório. ## Criar diretório dir.create(here::here(&quot;dados&quot;, &quot;tabelas&quot;)) Em seguida, vamos fazer o download de um arquivo .zip e vamos extrair usando a função unzip() nesse mesmo diretório. ## Download download.file(url = &quot;https://esajournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fecy.2392&amp;file=ecy2392-sup-0001-DataS1.zip&quot;, destfile = here::here(&quot;dados&quot;, &quot;tabelas&quot;, &quot;atlantic_amphibians.zip&quot;), mode = &quot;wb&quot;) ## Unzip unzip(zipfile = here::here(&quot;dados&quot;, &quot;tabelas&quot;, &quot;atlantic_amphibians.zip&quot;), exdir = here::here(&quot;dados&quot;, &quot;tabelas&quot;)) Agora podemos importar a tabela de dados com a função readr::read_csv(). ## Importar tabela de locais geo_anfibios_locais &lt;- readr::read_csv( here::here(&quot;dados&quot;, &quot;tabelas&quot;, &quot;ATLANTIC_AMPHIBIANS_sites.csv&quot;) ) geo_anfibios_locais #&gt; # A tibble: 1,163 × 25 #&gt; id reference_number species_number record sampled_habitat active_methods passive_methods complementary_me… #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 amp1001 1001 19 ab fo,ll as pt &lt;NA&gt; #&gt; 2 amp1002 1002 16 co fo,la,ll as pt &lt;NA&gt; #&gt; 3 amp1003 1002 14 co fo,la,ll as pt &lt;NA&gt; #&gt; 4 amp1004 1002 13 co fo,la,ll as pt &lt;NA&gt; #&gt; 5 amp1005 1003 30 co fo,ll,br as &lt;NA&gt; &lt;NA&gt; #&gt; 6 amp1006 1004 42 co tp,pp,la,ll,is &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 7 amp1007 1005 23 co sp as &lt;NA&gt; &lt;NA&gt; #&gt; 8 amp1008 1005 19 co sp,la,sw as,sb,tr &lt;NA&gt; &lt;NA&gt; #&gt; 9 amp1009 1005 13 ab fo &lt;NA&gt; pt &lt;NA&gt; #&gt; 10 amp1010 1006 1 ab fo &lt;NA&gt; pt &lt;NA&gt; #&gt; # … with 1,153 more rows, and 17 more variables: period &lt;chr&gt;, month_start &lt;dbl&gt;, year_start &lt;dbl&gt;, #&gt; # month_finish &lt;dbl&gt;, year_finish &lt;dbl&gt;, effort_months &lt;dbl&gt;, country &lt;chr&gt;, state &lt;chr&gt;, #&gt; # state_abbreviation &lt;chr&gt;, municipality &lt;chr&gt;, site &lt;chr&gt;, latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, #&gt; # coordinate_precision &lt;chr&gt;, altitude &lt;dbl&gt;, temperature &lt;dbl&gt;, precipitation &lt;dbl&gt; Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_anfibios_locais Por fim, podemos facilmente criar um objeto espacial do tipo MULTIPOINT utilizando a função sf::st_as_sf(). Podemos ver essas coordenadas plotadas no mapa simples da Figura 15.12. É necessário antes se ater primeiramente ao argumento coords que deve indicar as colunas de longitude e latitude, nessa ordem; e também ao argumento crs para indicar o CRS correspondente dessas coordenadas, que aqui sabemos se tratar de coordenadas geográficas e datum WGS84. Então podemos facilmente utilizar o código EPSG 4326. Entretanto, se as coordenadas estiverem em metros, por exemplo, teremos de nos ater a qual CRS as mesmas foram coletadas, ou seja, se forem coordenadas de GPS, é preciso saber como o GPS estava configurado (projeção e datum). ## Converter dados tabulares para sf geo_anfibios_locais_vetor &lt;- geo_anfibios_locais %&gt;% sf::st_as_sf(coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) geo_anfibios_locais_vetor #&gt; Simple feature collection with 1163 features and 23 fields #&gt; Geometry type: POINT #&gt; Dimension: XY #&gt; Bounding box: xmin: -56.74194 ymin: -33.51083 xmax: -34.79667 ymax: -3.51525 #&gt; Geodetic CRS: WGS 84 #&gt; # A tibble: 1,163 × 24 #&gt; id reference_number species_number record sampled_habitat active_methods passive_methods complementary_me… #&gt; * &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 amp1001 1001 19 ab fo,ll as pt &lt;NA&gt; #&gt; 2 amp1002 1002 16 co fo,la,ll as pt &lt;NA&gt; #&gt; 3 amp1003 1002 14 co fo,la,ll as pt &lt;NA&gt; #&gt; 4 amp1004 1002 13 co fo,la,ll as pt &lt;NA&gt; #&gt; 5 amp1005 1003 30 co fo,ll,br as &lt;NA&gt; &lt;NA&gt; #&gt; 6 amp1006 1004 42 co tp,pp,la,ll,is &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; #&gt; 7 amp1007 1005 23 co sp as &lt;NA&gt; &lt;NA&gt; #&gt; 8 amp1008 1005 19 co sp,la,sw as,sb,tr &lt;NA&gt; &lt;NA&gt; #&gt; 9 amp1009 1005 13 ab fo &lt;NA&gt; pt &lt;NA&gt; #&gt; 10 amp1010 1006 1 ab fo &lt;NA&gt; pt &lt;NA&gt; #&gt; # … with 1,153 more rows, and 16 more variables: period &lt;chr&gt;, month_start &lt;dbl&gt;, year_start &lt;dbl&gt;, #&gt; # month_finish &lt;dbl&gt;, year_finish &lt;dbl&gt;, effort_months &lt;dbl&gt;, country &lt;chr&gt;, state &lt;chr&gt;, #&gt; # state_abbreviation &lt;chr&gt;, municipality &lt;chr&gt;, site &lt;chr&gt;, coordinate_precision &lt;chr&gt;, altitude &lt;dbl&gt;, #&gt; # temperature &lt;dbl&gt;, precipitation &lt;dbl&gt;, geometry &lt;POINT [°]&gt; ## Plot plot(geo_anfibios_locais_vetor[1], pch = 20, col = &quot;black&quot;, main = NA, axes = TRUE, graticule = TRUE) Figura 15.12: Coordenadas das comunidades do Atlantic Amphinians (Vancine et al. (2018)). 15.6.2.1.4 Converter dados espaciais sp para sf O pacote sf é mais recente e mais fácil de manipular objetos vetoriais no R, como vimos. Seu predecessor, o pacote sp possui uma classe própria e homônima. Entretanto, muitos pacotes de análises espaciais ainda utilizam essa classe em suas funções, apesar dessa migração ter ocorrido rapidamente recentemente. Dessa forma, a conversão entre essas classes pode ser necessária em alguns momentos. Abaixo, veremos como podemos fazer essa conversão facilmente. Primeiramente, vamos importar dados sp. ## Polígonos países sp co110_sp &lt;- rnaturalearth::countries110 class(co110_sp) #&gt; [1] &quot;SpatialPolygonsDataFrame&quot; #&gt; attr(,&quot;package&quot;) #&gt; [1] &quot;sp&quot; Agora, podemos converter facilmente com a função sf::st_as_sf(). ## Polígonos países sf co110_sf &lt;- sf::st_as_sf(co110_sp) class(co110_sf) #&gt; [1] &quot;sf&quot; &quot;data.frame&quot; Podemo facilmente converter esse objeto novamente para a classe sp com a função sf::as_Spatial. ## Polígonos países sp co110_sp &lt;- sf::as_Spatial(co110_sf) class(co110_sp) #&gt; [1] &quot;SpatialPolygonsDataFrame&quot; #&gt; attr(,&quot;package&quot;) #&gt; [1] &quot;sp&quot; 15.6.2.2 Raster Para importar dados raster no R, utilizaremos a função raster::raster(), raster::brick() ou raster::stack(). Para apenas uma camada raster, usaremos a função raster::raster(), com o argumento x sendo o nome do arquivo. Já para mais camadas, usaremos raster::brick() para um arquivo que possua múltiplas camadas, ou ainda a função raster::stack() para vários arquivos em diferentes camadas também no argumento x, sendo necessário listar os arquivos no diretório, geralmente utilizando a função dir() ou list.files(). Entretanto, para especificar uma camada, podemos utilizar o argumento band ou layer e o nome dessa camada. 15.6.2.2.1 Raster Layer Primeiramente, vamos criar um diretório como para os dados raster que fazeremos o download. ## Criar diretório dir.create(here::here(&quot;dados&quot;, &quot;raster&quot;)) Em seguida, vamos fazer o download de dados de elevação, na verdade dados de Modelo Digital de Elevação (Digital Elevation Model - DEM), localizados também para o município de Rio Claro. Utilizaremos os dados do Shuttle Radar Topography Mission - SRTM. Para saber mais sobre esses dados, recomendamos a leitura do artigo Farr et al. (2007). ## Aumentar o tempo de download options(timeout = 1e3) ## Download download.file(url = &quot;https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm_27_17.zip&quot;, destfile = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;srtm_27_17.zip&quot;), mode = &quot;wb&quot;) ## Unzip unzip(zipfile = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;srtm_27_17.zip&quot;), exdir = here::here(&quot;dados&quot;, &quot;raster&quot;)) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_raster_srtm Agora podemos importar essa camada para o R, e visualizá-la em relação ao limite do município de Rio Claro/SP (Figura 15.13). ## Importar raster de altitude geo_raster_srtm &lt;- raster::raster(here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;srtm_27_17.tif&quot;)) geo_raster_srtm #&gt; class : RasterLayer #&gt; dimensions : 6000, 6000, 3.6e+07 (nrow, ncol, ncell) #&gt; resolution : 0.0008333333, 0.0008333333 (x, y) #&gt; extent : -50, -45, -25, -20 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : srtm_27_17.tif #&gt; names : srtm_27_17 #&gt; values : -32768, 32767 (min, max) ## Plot plot(geo_raster_srtm, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.13: Camada raster do DEM em relação ao limite do município de Rio Claro/SP. 15.6.2.2.2 Raster Stack Além dos dados de elevação, dados de temperatura e precipitação podem ser obtidos do WorldClim. Para saber mais sobre esses dados, recomendamos a leitura do artigo Fick and Hijmans (2017). ## Aumentar o tempo de download options(timeout = 1e3) ## Download download.file(url = &quot;https://biogeo.ucdavis.edu/data/worldclim/v2.1/base/wc2.1_10m_bio.zip&quot;, destfile = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;wc2.0_10m_bio.zip&quot;), mode = &quot;wb&quot;) ## Unzip unzip(zipfile = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;wc2.0_10m_bio.zip&quot;), exdir = here::here(&quot;dados&quot;, &quot;raster&quot;)) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_raster_bioclim Para importar essa série de camadas, primeiramente listaremos os arquivos e depois importar no formato RasterStack (Figura 15.14). ## Listar arquivos arquivos_raster &lt;- dir(path = here::here(&quot;dados&quot;, &quot;raster&quot;), pattern = &quot;wc&quot;) %&gt;% grep(&quot;.tif&quot;, ., value = TRUE) arquivos_raster #&gt; [1] &quot;wc2.1_10m_bio_1.tif&quot; &quot;wc2.1_10m_bio_10.tif&quot; &quot;wc2.1_10m_bio_11.tif&quot; &quot;wc2.1_10m_bio_12.tif&quot; #&gt; [5] &quot;wc2.1_10m_bio_13.tif&quot; &quot;wc2.1_10m_bio_14.tif&quot; &quot;wc2.1_10m_bio_15.tif&quot; &quot;wc2.1_10m_bio_16.tif&quot; #&gt; [9] &quot;wc2.1_10m_bio_17.tif&quot; &quot;wc2.1_10m_bio_18.tif&quot; &quot;wc2.1_10m_bio_19.tif&quot; &quot;wc2.1_10m_bio_2.tif&quot; #&gt; [13] &quot;wc2.1_10m_bio_3.tif&quot; &quot;wc2.1_10m_bio_4.tif&quot; &quot;wc2.1_10m_bio_5.tif&quot; &quot;wc2.1_10m_bio_6.tif&quot; #&gt; [17] &quot;wc2.1_10m_bio_7.tif&quot; &quot;wc2.1_10m_bio_8.tif&quot; &quot;wc2.1_10m_bio_9.tif&quot; ## Importar vários rasters como stack geo_raster_bioclim &lt;- raster::stack(here::here(&quot;dados&quot;, &quot;raster&quot;, arquivos_raster)) geo_raster_bioclim #&gt; class : RasterStack #&gt; dimensions : 1080, 2160, 2332800, 19 (nrow, ncol, ncell, nlayers) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; names : wc2.1_10m_bio_1, wc2.1_10m_bio_10, wc2.1_10m_bio_11, wc2.1_10m_bio_12, wc2.1_10m_bio_13, wc2.1_10m_bio_14, wc2.1_10m_bio_15, wc2.1_10m_bio_16, wc2.1_10m_bio_17, wc2.1_10m_bio_18, wc2.1_10m_bio_19, wc2.1_10m_bio_2, wc2.1_10m_bio_3, wc2.1_10m_bio_4, wc2.1_10m_bio_5, ... #&gt; min values : -54.724354, -37.781418, -66.311249, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 9.131122, 0.000000, -29.686001, ... #&gt; max values : 30.98764, 38.21617, 29.15299, 11191.00000, 2381.00000, 484.00000, 229.00169, 5284.00000, 1507.00000, 5282.00000, 4467.00000, 21.14754, 100.00000, 2363.84595, 48.08275, ... ## Plot plot(geo_raster_bioclim[[c(1, 4)]], col = viridis::viridis(10)) Figura 15.14: Camadas rasters do WorldClim (BIO01 e BIO12) para o mundo. 15.6.3 Exportar dados Saber a melhor forma de exportar dados geoespaciais de objetos recém-criados no R é fundamental, principalmente porque essa ação dependerá do tipo de dado (vetor ou raster), classe do objeto (por exemplo, MULTIPOINT ou RasterLayer) e tipo e quantidade de informações armazenadas (por exemplo, tamanho do objeto, intervalo de valores, etc.). 15.6.3.1 Vetor Para dados vetoriais, a principal função utilizada é a sf::st_write(). Essa função permite gravar objetos sf em vários formatos de arquivos vetoriais, como .shp, .gpkg ou .geojson. O formato a ser exportado vai influenciar na velocidade do processo de gravação. Os argumentos dessa função será o obj que é o objeto sf criado no ambiente R, e o dsn (data source name), ou seja, o nome que o arquivo terá ao ser exportado do R, de modo que o complemento .shp no nome de saída, por exemplo, definirá que o arquivo terá a extensão ESRI Shapefile. Entretanto, essa extensão pode ser definida também utilizando o argumento driver, com as possibilidades listadas nesse site. ## Exportar o polígono de Rio Claro na extensão ESRI Shapefile sf::st_write(obj = geo_vetor_rio_claro, dsn = here::here(&quot;dados&quot;, &quot;vetor&quot;, &quot;geo_vetor_rio_claro.shp&quot;)) Ou podemos ainda exportar o objeto vetorial na extensão GeoPackage. Entretanto, aqui é interessante acrescentar um argumento chamado layer para definir o nome das camadas a serem exportadas no mesmo arquivo GeoPackage, por exemplo. ## Exportar o polígono de Rio Claro na extensão Geopackage sf::st_write(obj = geo_vetor_rio_claro, dsn = here::here(&quot;dados&quot;, &quot;vetor&quot;, &quot;vetores.gpkg&quot;), layer = &quot;rio_claro&quot;) Ainda sobre o formato GeoPackage, há algo muito interessante que podemos fazer: podemos acrescentar outros arquivos vetoriais ao mesmo arquivo já criado. Como exemplo, exportaremos o limite do Brasil para o mesmo arquivo. ## Exportar o polígono do Brasil na extensão Geopackage sf::st_write(obj = geo_vetor_brasil, dsn = here::here(&quot;dados&quot;, &quot;vetor&quot;, &quot;vetores.gpkg&quot;), layer = &quot;brasil&quot;) 15.6.3.2 Raster Para exportar dados raster utilizamos geralmente a função raster::writeRaster(). Exportar dados raster é um pouco mais complexo que exportar dados vetoriais. Teremos de definir se exportaremos arquivos em uma ou várias camadas, quantidade de informações por pixel, e ainda diferentes extensões de saída. Um ponto fundamental: arquivos raster escritos em discos geralmente ocupam bastante espaço, e dessa forma, há parâmetros específicos para certos tipos de dados, que detalharemos a seguir para contornar esse problema e comprimir os arquivos. Na função raster::writeRaster(), o argumento x diz respeito ao objeto raster no ambiente R. O argumento filename é nome do arquivo que será exportado do R, podendo ou não possuir a extensão que se pretende que o arquivo tenha. O argumento format é o formato do arquivo, sendo as principais possibilidades resumidas na Tabela 15.8, e para saber das possibilidades suportadas, use a função raster::writeFormats(). O argumento bylayer diz se de um objeto com múltiplas camadas, cada uma delas será exportada em um arquivo diferente. Tabela 15.8: Principais formatos de arquivos raster exportados do R. Tipo de arquivo Nome longo Extensão Suporte a múltiplas camadas raster Formato pacote raster .grd Sim ascii ESRI Ascii .asc Não SAGA SAGA GIS .sdat Não IDRISI IDRISI .rst Não CDF netCDF (requer ncdf4) .nc Sim GTiff GeoTiff (requer rgdal) .tif Sim ENVI ENVI .hdr .envi Sim EHdr ESRI .hdr .bil Sim HFA Erdas imagem (.img) .img Sim Dentre os argumentos adicionais, temos ainda o datatype, que faz referência a um dos nove tipos de dados detalhados na Tabela 15.9, sendo que o tipo de dado determina a representação em bits (quantidade de informação) na célula do objeto raster exportado e depende da faixa de valores do objeto raster em cada pixel. Quanto mais valores um tipo de dado puder representar, maior será o arquivo exportado no disco. Dessa forma é interessante utilizar um tipo de dado que diminua o tamanho do arquivo a ser exportado, dependendo do tipo de dado em cada pixel. Para a função raster::writeRaster(), o default é FLT4S, o que pode ocupar mais espaço em disco do que o necessário. Tabela 15.9: Tipos de dados suportados pelo pacote raster. Tipo de dado Valor mínimo Valor máximo LOG1S FALSE (0) TRUE (1) INT1S -127 127 INT1U 0 255 INT2S -32.767 32.767 INT2U 0 65534 INT4S -2.147.483.647 2.147.483.647 INT4U 0 42.94.967.296 FLT4S -3,4e+38 3,4e+38 FLT8S -1,7e+308 1,7e+308 Outros argumentos de suporte são: overwrite para sobrescrever um arquivo que já exista, progress para mostrar uma barra de progresso da exportação como “text” ou “window,” e options que permite opções do GDAL. Para esse último , quando exportar especificamente na extensão GeoTIFF, podemos utilizar options = c(\"COMPRESS=DEFLATE\", \"TFW=YES\") para que haja compressão do arquivo, diminuindo consideravelmente seu tamanho (cerca de um terço), aliado à criação de um arquivo auxiliar .tfw, para ser carregado em softwares específicos de SIG, como o ArcGIS. Para exportar apenas uma camada RasterLayer, podemos utilizar a função raster::writeRaster() em um formato mais simples. ## Criar diretório dir.create(here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;exportados&quot;)) ## Exportar raster layer raster::writeRaster(geo_raster_srtm, filename = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;exportados&quot;, &quot;elevation&quot;), format = &quot;GTiff&quot;, datatype = &quot;INT2S&quot;, options = c(&quot;COMPRESS=DEFLATE&quot;, &quot;TFW=YES&quot;), progress = &quot;text&quot;, overwrite = TRUE) Para mais de uma camada RasterBrick ou RasterStack, podemos utilizar a função raster::writeRaster() com mais s, como o bylayer = TRUE. ## Exportar raster stack raster::writeRaster(x = geo_raster_bioclim, filename = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;exportados&quot;, names(geo_raster_bioclim)), bylayer = TRUE, format = &quot;GTiff&quot;, datatype = &quot;INT2S&quot;, options = c(&quot;COMPRESS=DEFLATE&quot;, &quot;TFW=YES&quot;), progress = &quot;text&quot;, overwrite = TRUE) 15.7 Descrição de objetos espaciais Muitas vezes precisaremos verificar as informações dos objetos geográficos importados para o R. Apesar de chamar o objeto trazer grande parte das informações que precisamos consultar, existem funções específicas que nos auxiliam nesse processo de descrição dos objetos. 15.7.1 Vetor Podemos acessar as informações geográficas e a tabela de atributos de um objeto importado como vetor simplesmente chamando o nome do objeto no R. ## Município de Rio Claro geo_vetor_rio_claro #&gt; Simple feature collection with 1 feature and 7 fields #&gt; Geometry type: MULTIPOLYGON #&gt; Dimension: XY #&gt; Bounding box: xmin: -47.76521 ymin: -22.55203 xmax: -47.46188 ymax: -22.24368 #&gt; Geodetic CRS: SIRGAS 2000 #&gt; code_muni name_muni code_state abbrev_state name_state code_region name_region geom #&gt; 493 3543907 Rio Claro 35 SP São Paulo 3 Sudeste MULTIPOLYGON (((-47.46875 -... Mas também podemos acessar informações geográficas com funções específicas, como tipo de geometria, limites geográficos do vetor (extensão), sistema de referência de coordenadas (CRS), e a tabela de atributos. ## Tipo de geometria sf::st_geometry_type(geo_vetor_rio_claro) #&gt; [1] MULTIPOLYGON #&gt; 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT MULTILINESTRING MULTIPOLYGON ... TRIANGLE ## Extensão sf::st_bbox(geo_vetor_rio_claro) #&gt; xmin ymin xmax ymax #&gt; -47.76521 -22.55203 -47.46188 -22.24368 ## CRS sf::st_crs(geo_vetor_rio_claro) #&gt; Coordinate Reference System: #&gt; User input: SIRGAS 2000 #&gt; wkt: #&gt; GEOGCRS[&quot;SIRGAS 2000&quot;, #&gt; DATUM[&quot;Sistema de Referencia Geocentrico para las AmericaS 2000&quot;, #&gt; ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, #&gt; LENGTHUNIT[&quot;metre&quot;,1]]], #&gt; PRIMEM[&quot;Greenwich&quot;,0, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; CS[ellipsoidal,2], #&gt; AXIS[&quot;geodetic latitude (Lat)&quot;,north, #&gt; ORDER[1], #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; AXIS[&quot;geodetic longitude (Lon)&quot;,east, #&gt; ORDER[2], #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; USAGE[ #&gt; SCOPE[&quot;Horizontal component of 3D system.&quot;], #&gt; AREA[&quot;Latin America - Central America and South America - onshore and offshore. Brazil - onshore and offshore.&quot;], #&gt; BBOX[-59.87,-122.19,32.72,-25.28]], #&gt; ID[&quot;EPSG&quot;,4674]] ## Acessar a tabela de atributos geo_vetor_rio_claro_tab &lt;- sf::st_drop_geometry(geo_vetor_rio_claro) geo_vetor_rio_claro_tab #&gt; code_muni name_muni code_state abbrev_state name_state code_region name_region #&gt; 493 3543907 Rio Claro 35 SP São Paulo 3 Sudeste 15.7.2 Raster Da mesma forma, podemos acessar as informações objetos raster chamando o nome do objeto. ## Raster layer geo_raster_srtm #&gt; class : RasterLayer #&gt; dimensions : 6000, 6000, 3.6e+07 (nrow, ncol, ncell) #&gt; resolution : 0.0008333333, 0.0008333333 (x, y) #&gt; extent : -50, -45, -25, -20 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : srtm_27_17.tif #&gt; names : srtm_27_17 #&gt; values : -32768, 32767 (min, max) Além disso, podemos selecionar informações desse objeto com funções específicas, tanto para RasterLayer, quanto para RasterBrick ou RasterStack como: classe, dimensões (número de linhas, colunas e camadas), número de camadas, número de linhas, número de colunas, número de células, resolução (largura e altura do tamanho do pixel), extensão (limites geográficos), sistema de referência de coordenadas (CRS), nome das camadas e extrair os valores de todos os pixels. ## Classe class(geo_raster_srtm) #&gt; [1] &quot;RasterLayer&quot; #&gt; attr(,&quot;package&quot;) #&gt; [1] &quot;raster&quot; ## Dimensões dim(geo_raster_srtm) #&gt; [1] 6000 6000 1 ## Número de camadas nlayers(geo_raster_srtm) #&gt; [1] 1 ## Número de linhas nrow(geo_raster_srtm) #&gt; [1] 6000 ## Número de colunas ncol(geo_raster_srtm) #&gt; [1] 6000 ## Número de células ncell(geo_raster_srtm) #&gt; [1] 3.6e+07 ## Resolução res(geo_raster_srtm) #&gt; [1] 0.0008333333 0.0008333333 ## Extensão extent(geo_raster_srtm) #&gt; class : Extent #&gt; xmin : -50 #&gt; xmax : -45 #&gt; ymin : -25 #&gt; ymax : -20 ## Projeção ou CRS projection(geo_raster_srtm) #&gt; [1] &quot;+proj=longlat +datum=WGS84 +no_defs&quot; ## Nomes names(geo_raster_srtm) #&gt; [1] &quot;srtm_27_17&quot; ## Valores getValues(geo_raster_srtm) %&gt;% head #&gt; [1] 382 379 379 379 379 383 values(geo_raster_srtm) %&gt;% head #&gt; [1] 382 379 379 379 379 383 geo_raster_srtm[] %&gt;% head #&gt; [1] 382 379 379 379 379 383 15.8 Reprojeção de dados geoespaciais Em algumas situações é necessário alterar o CRS de um objeto espacial para um novo CRS. A reprojeção é justamente a transformação de coordenadas de um CRS para outro: geográficos (‘lon/lat,’ com unidades em graus de longitude e latitude) e projetados (normalmente com unidades de metros a partir de um datum). Geralmente precisaremos fazer essa operação para transformar camadas vetoriais ou rasters para o mesmo CRS, de modo que possam ser exibidas conjuntamente, ou ainda que as camadas possuem CRS projetado para realizar alguma operação espacial entre camadas, ou quando precisamos calcular áreas, formatos ou distâncias, como métricas de paisagem, por exemplo. Existe uma infinidade de projeções e um excelente material de consulta é o livro de Lapaine and Usery (2017). Podemos verificar o CRS de uma camada através da função sf::st_crs() ou raster::projection() e raster::crs(), ou ainda, saber se a mesma possui um CRS geográfico ou não, com a função sf::st_is_longlat(). Já para reprojetar um objeto sf usamos a função sf::st_transform() e para um objeto raster usamos a função raster::projectRaster(). ## Projeção de vetores sf::st_crs(geo_vetor_rio_claro) #&gt; Coordinate Reference System: #&gt; User input: SIRGAS 2000 #&gt; wkt: #&gt; GEOGCRS[&quot;SIRGAS 2000&quot;, #&gt; DATUM[&quot;Sistema de Referencia Geocentrico para las AmericaS 2000&quot;, #&gt; ELLIPSOID[&quot;GRS 1980&quot;,6378137,298.257222101, #&gt; LENGTHUNIT[&quot;metre&quot;,1]]], #&gt; PRIMEM[&quot;Greenwich&quot;,0, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; CS[ellipsoidal,2], #&gt; AXIS[&quot;geodetic latitude (Lat)&quot;,north, #&gt; ORDER[1], #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; AXIS[&quot;geodetic longitude (Lon)&quot;,east, #&gt; ORDER[2], #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; USAGE[ #&gt; SCOPE[&quot;Horizontal component of 3D system.&quot;], #&gt; AREA[&quot;Latin America - Central America and South America - onshore and offshore. Brazil - onshore and offshore.&quot;], #&gt; BBOX[-59.87,-122.19,32.72,-25.28]], #&gt; ID[&quot;EPSG&quot;,4674]] ## Projeção de raster raster::projection(geo_raster_srtm) #&gt; [1] &quot;+proj=longlat +datum=WGS84 +no_defs&quot; raster::crs(geo_raster_srtm) #&gt; Coordinate Reference System: #&gt; Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs #&gt; WKT2 2019 representation: #&gt; GEOGCRS[&quot;WGS 84 (with axis order normalized for visualization)&quot;, #&gt; DATUM[&quot;World Geodetic System 1984&quot;, #&gt; ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, #&gt; LENGTHUNIT[&quot;metre&quot;,1]]], #&gt; PRIMEM[&quot;Greenwich&quot;,0, #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], #&gt; CS[ellipsoidal,2], #&gt; AXIS[&quot;geodetic longitude (Lon)&quot;,east, #&gt; ORDER[1], #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, #&gt; ID[&quot;EPSG&quot;,9122]]], #&gt; AXIS[&quot;geodetic latitude (Lat)&quot;,north, #&gt; ORDER[2], #&gt; ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, #&gt; ID[&quot;EPSG&quot;,9122]]]] ## Verificar se o CRS é geográfico sf::st_is_longlat(geo_vetor_rio_claro) #&gt; [1] TRUE As funções sf::st_transform() e raster::projectRaster() possuem dois argumentos importantes: x que é o objeto a ser reprojetado e o crs que é o CRS alvo. O argumento crs pode ser especificado de quatro maneiras: 1) código EPSG (por exemplo, 4326), 2) string PROJ4 (por exemplo, “+ proj = longlat + datum = WGS84 + no_defs”), 3) string WKT, ou 4) objeto crs de outra camada, conforme retornado por sf::st_crs() ou raster::crs(). Esas informações de EPSG, PROJ4 e WKT podem ser acessadas nas bases: epsg.io e spatialreference.org. Dentre os possíveis CRSs a serem utilizados, alguns são mais comuns para CRSs geográficos e projetados. Para CRSs geográficos, o mais comum para o mundo é o World Geodetic System 1984 (WGS84), ou seja, geográfico com datum WGS84. Para o Brasil, o CRS adotado é o Sistema de Referencia Geocéntrico para las Américas 2000 (SIRGAS 2000), ou seja, geográfico com datum SIRGAS2000. Para CRSs projetados, essa escolha vai depender da extensão e localização da área de interesse no globo terrestre. Aqui destacaremos os principais, para três escalas: global, regional e local. Para a escala global, geralmente usa-se umas dessas projeções, dependendo do objetivo: 1) Projeção de Mollweide, 2) Projeção de Winkel Tripel, 3) Projeção de Eckert IV, 4) Projeção Azimutal de Lambert. Para a escala regional, como um hemisfério, geralmente usa-se a Projeção Cônica de Albers. Por fim, para a escala local, usa-se geralmente a Projeção Universal Transverse Mercator (UTM), um conjunto de CRSs que divide a Terra em 60 cunhas longitudinais e 20 segmentos latitudinais, como pode ser visto neste link. Os principais CRSs são descritos na Tabela 15.10. Tabela 15.10: Principais CRSs utilizados. CRS Tipo de CRS Descrição epsg.io spatialreference.org World Geodetic System 1984 (WGS84) Geográfico CRS geográfico mais comum para o mundo EPSG:4326 EPSG:4326 Sistema de Referencia Geocéntrico para las Américas 2000 (SIRGAS 2000) Geográfico CRS geográfico oficial para o Brasil EPSG:4674 EPSG:4674 Projeção de Mollweide Projetado CRS projetado que preserva as relações de área ESRI:54009 SR-ORG:7099 Projeção de Winkel Tripel Projetado CRS projetado com mínimo de distorção para área, direção e distância NA SR-ORG:7291 Projeção de Eckert IV Projetado CRS projetado que preserva a área e com meridianos elípticos EPSG:54012 ESRI:54012 Projeção Azimutal de Lambert Projetado CRS projetado que preserva os tamanhos relativos e senso de direção a partir do centro NA NA Projeção Cônica de Albers Projetado CRS projetado para escala regional, mantendo a área constante em toda sua superfície NA SR-ORG:7823 Projeção Universal Transverse Mercator (UTM) Projetado CRS projetado para escala local, distorcendo áreas e distâncias com gravidade crescente com a distância do centro da zona UTM EPSG:31983 EPSG:31983 15.8.1 Vetor Como dissemos, para reprojetar um vetor, utilizamos a função sf::st_transform(), observando os argumentos x que é a camada a ser reprojetada, e o crs que é o CRS alvo. Vamos reprojetar o limite do município de Rio Claro/SP do CRS SIRGAS2000/geográfico para o CRS projetado SIRGAS2000/UTM23S, com os efeitos da transformação podendo ser notados na Figura 15.15. ## Converter CRS geo_vetor_rio_claro_sirgas2000_utm23s &lt;- sf::st_transform(x = geo_vetor_rio_claro, crs = 31983) Figura 15.15: Limites do município de Rio Claro/SP com CRS SIRGAS2000/geográfico e com CRS SIRGAS2000/UTM23S. Podemos ainda utilizar o formato proj4string no argumento crs para fazer a transformação. Vamos primeiramente plotar o mundo em WGS84/Geográfico (Figura 15.16). ## Plot plot(co110_sf[1], col = &quot;gray&quot;, main = &quot;WGS84/Geográfio&quot;, graticule = TRUE) Figura 15.16: Camada BIO01 para o mundo com CRS geográfico e datum WGS84. Agora, reprojetaremos utilizando a Projeção de Mollweide (Figura 15.17). ## Projeção de Mollweide co110_sf_moll &lt;- sf::st_transform(x = co110_sf, crs = &quot;+proj=moll&quot;) ## Plot plot(co110_sf_moll[1], col = &quot;gray&quot;, main = &quot;Projeção de Mollweide&quot;, graticule = TRUE) Figura 15.17: Camada BIO01 para o mundo com CRS Projeção de Mollweide. Ou ainda podemos utilizar a Projeção Azimutal de Lambert com alguns parâmetros ajustados para centralizar a projeção no Brasil (15.18). ## Projeção Azimutal de Lambert co110_sf_laea &lt;- sf::st_transform(x = co110_sf, crs = &quot;+proj=laea +x_0=0 +y_0=0 +lon_0=-50 +lat_0=0&quot;) ## Plot plot(co110_sf_laea[1], col = &quot;gray&quot;, main = &quot;Projeção Azimutal de Lambert&quot;, graticule = TRUE) Figura 15.18: amada BIO01 para o mundo com CRS Projeção Azimutal de Lambert centrado no Brasil. 15.8.2 Raster A reprojeção de objetos raster não é uma tarefa tão simples quanto a reprojeção de vetores. Em vetores, a reprojeção altera as coordenadas de cada vértice. Entretanto, como rasters são compostos de células retangulares do mesmo tamanho, a reprojeção do raster envolve a criação de um novo objeto raster, envolvendo duas operações espaciais separadas: 1) reprojeção vetorial dos centroides celulares para outro CRS (i.e., muda a posição e tamanho do pixel) e, 2) cálculo de novos valores do pixel por meio de reamostragem (i.e., muda o valor do pixel). A função raster::projectRaster() possui alguns parâmetros que necessitam de algumas especificações. O argumento from que é o objeto raster de entrada que sofre a reprojeção. O argumento to é um objeto raster do qual todas as propriedades dos CRSs, como extensão e resolução serão associadas ao objeto raster indicado no argumento from. O argumento res permite ajustar a resolução do pixel de saída do objeto raster reprojetado. O argumento crs aceita apenas as definições de proj4string extensas de um CRS em vez de códigos EPSG concisos. Contudo, é possível usar um código EPSG em uma definição de proj4string com +init=epsg:EPSG. Por exemplo, pode-se usar a definição +init=epsg:4326 para definir CRS para WGS84 (código EPSG de 4326). A biblioteca PROJ adiciona automaticamente o resto dos parâmetros e os converte em +init=epsg:4326 +proj=longlat +datum=WGS84 + no_defs + ellps=WGS84 + towgs84=0,0,0. O argumento method permite escolher entre os métodos ngb (vizinho mais próximo) ou biliniar (interpolação bilinear), sendo o primeiro mais indicado para reprojeção de rasters categóricos, pois os valores estimados devem ser iguais aos do raster original. O método ngb define cada novo valor de célula para o valor da célula mais próxima (centro) do raster de entrada. Já o método biliniar é indicado para raster contínuos e calcula o valor da célula de saída com base nas quatro células mais próximas no raster original, sendo a média ponderada da distância dos valores dessas quatro células. Aqui, vamos reprojetar os dados de elevação para Rio Claro/SP. Para que esse processo seja mais rápido, iremos antes ajustar a extensão do raster para o limite do município usando a função raster::crop() (Figura 15.19). Essa função é melhor explicada na seção de cortes e máscaras. ## Ajuste do limite geo_raster_srtm_rio_claro &lt;- raster::crop(x = geo_raster_srtm, y = geo_vetor_rio_claro) geo_raster_srtm_rio_claro #&gt; class : RasterLayer #&gt; dimensions : 370, 364, 134680 (nrow, ncol, ncell) #&gt; resolution : 0.0008333333, 0.0008333333 (x, y) #&gt; extent : -47.765, -47.46167, -22.55167, -22.24333 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : srtm_27_17 #&gt; values : 491, 985 (min, max) ## Plot plot(geo_raster_srtm_rio_claro, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.19: Ajuste da extensão do raster de elevação para o município de Rio Claro/SP. Primeiramente, vamos reprojetar indicando uma projeção e sem especificar o tamanho da célula. Note que o tamanho da célula vai se ajustar para valores diferentes, sendo portanto, pixels retangulares e não quadrados. ## Reprojeção geo_raster_srtm_rio_claro_sirgas2000_utm23s &lt;- raster::projectRaster( from = geo_raster_srtm_rio_claro, crs = &quot;+init=epsg:31983&quot;, method = &quot;bilinear&quot;) geo_raster_srtm_rio_claro_sirgas2000_utm23s #&gt; class : RasterLayer #&gt; dimensions : 386, 381, 147066 (nrow, ncol, ncell) #&gt; resolution : 85.8, 92.3 (x, y) #&gt; extent : 214575.4, 247265.2, 7503009, 7538637 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=utm +zone=23 +south +ellps=GRS80 +units=m +no_defs #&gt; source : memory #&gt; names : srtm_27_17 #&gt; values : 491.6033, 980.4151 (min, max) Agora vamos reprojetar especificando o tamanho da célula (Figura 15.20). Dessa forma, todas as células terão o mesmo, i.e., quadrados de 90 metros. ## Reprojeção geo_raster_srtm_rio_claro_sirgas2000_utm23s &lt;- raster::projectRaster( from = geo_raster_srtm_rio_claro, crs = &quot;+init=epsg:31983&quot;, method = &quot;bilinear&quot;, res = 90) geo_raster_srtm_rio_claro_sirgas2000_utm23s #&gt; class : RasterLayer #&gt; dimensions : 396, 364, 144144 (nrow, ncol, ncell) #&gt; resolution : 90, 90 (x, y) #&gt; extent : 214554.4, 247314.4, 7502985, 7538625 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=utm +zone=23 +south +ellps=GRS80 +units=m +no_defs #&gt; source : memory #&gt; names : srtm_27_17 #&gt; values : 493.2395, 986.686 (min, max) ## Plot plot(geo_raster_srtm_rio_claro_sirgas2000_utm23s, col = viridis::viridis(10)) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.20: Reprojeção do raster de elevação para SIRGAS2000/UTM23S especificado por um objeto e informando o tamanho da célula. Vamos também reprojetar uma camada mundial da média de temperatura anual (BIO01), indicando o tamanho da célula para 25.000 m (Figura 15.21). ## Reprojeção geo_raster_bioclim_moll &lt;- raster::projectRaster( from = geo_raster_bioclim[[1]], crs = &quot;+proj=moll&quot;, res = 25000, method = &quot;bilinear&quot;) geo_raster_bioclim_moll #&gt; class : RasterLayer #&gt; dimensions : 732, 1453, 1063596 (nrow, ncol, ncell) #&gt; resolution : 25000, 25000 (x, y) #&gt; extent : -18159905, 18165095, -9154952, 9145048 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs #&gt; source : memory #&gt; names : wc2.1_10m_bio_1 #&gt; values : -54.66752, 30.71805 (min, max) ## Plot plot(geo_raster_bioclim_moll, col = viridis::viridis(10)) plot(co110_sf_moll[1], col = NA, add = TRUE) Figura 15.21: Reprojeção do raster de média de temperatura anual (BIO01) para Projeção de Mollweide informando o tamanho da célula. 15.9 Principais operações com dados geoespaciais Nesta seção veremos as principais funções para realizar operações com dados geoespaciais. Essas operações são separadas conforme Lovelace, Nowosad, and Münchow (2019) em: Operações de atributos, Operações espaciais, e Operações geométricas. 15.9.1 Operações de atributos São modificação de objetos espaciais baseado em informações não espaciais associadas a dados geoespaciais, como a tabela de atributos ou valores das células e nome das camadas dos rasters. 15.9.1.1 Vetor As principais operações de atributos vetoriais são com respeito à tabela de atributos, sendo elas: 1) filtro, 2) junção, 3) agregação e 4) manipulação da tabela de atributos. A lista de possíveis operações é longa, dessa forma, apresentaremos algumas operações utilizando as principais funções e listamos as demais funções e suas operações, que dependerão de objetivos específicos. Quase todas as operações serão as mesmas realizadas pelo pacote dplyr em uma tabela de dados (ver o Capítulo 5), sendo algumas operações específicas para alterar apenas campos da tabela de atributos e outras que refletem operações nas feições, ou seja, alterarão através da tabela de atributos as características das feições. Essas funções e suas operações são descritas com detalhes na Tabela (15.11). Tabela 15.11: Principais funções para realizar operações de atributos e suas descrições. Funções Onde atua Descrição filter() Feições Selecionar feições por valores slice() Feições Selecionar feições pela posição na tabela de atributos n_sample() Feições Amostrar feições na tabela de atributos group_by() Feições Agrupar feições por valores da tabela de atributos summarise() Feições Operações com valores das feições na tabela de atributos, que acabam por dissolver as feições select() Atributos Selecionar colunas da tabela de atributos pull() Atributos Selecionar uma coluna da tabela de atributos como vetor rename() Atributos Renomear uma coluna da tabela de atributos mutate() Atributos Criar uma coluna ou alterar os valores da tabela de atributos *_join() Atributos Diversas funções para juntar dados de outras tabelas de dados à tabela de atributos Para exemplificar as operações de atributos, vamos utilizar os dados de nascentes, hidrologia e cobertura da terra para o município de Rio Claro/SP. 15.9.1.1.1 Filtro Vamos iniciar as operações fazendo o filtro de feições pela tabela de atributos, que permite selecionar feições pelos seus valores atribuídos, utilizando a função dplyr::filter(). Aqui vamos selecionar as feições de floresta do mapa de cobertura da terra para Rio Claro/SP (Figura 15.22). ## Filtro geo_vetor_cobertura_floresta &lt;- geo_vetor_cobertura %&gt;% dplyr::filter(CLASSE_USO == &quot;formação florestal&quot;) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_cobertura_floresta$geometry, col = &quot;forestgreen&quot;, add = TRUE) Figura 15.22: Filtro da classe floresta para o mapeamento de cobertura da terra para o município de Rio Claro/SP. 15.9.1.1.2 Junção Uma das funções mais úteis de operações de atributos é a junção, referida em inglês como join, através das funções dplyr::*_join() (ver detalhes do Capítulo 5). Nela, usamos uma coluna identificadora para atribuir dados de outra tabela de dados. Como exemplo, vamos criar uma tabela de dados com novos nomes das classes de cobertura da terra e atribuir esses novos nomes à tabela de atributos do objeto vetorial. É fundamental destacar que para que essa função funcione, precisamos de uma coluna identificadora dos valores para que a junção seja possível. ## Dados dados_classes &lt;- tibble::tibble( CLASSE_USO = geo_vetor_cobertura$CLASSE_USO, classe = c(&quot;agua&quot;, &quot;antropico&quot;, &quot;edificado&quot;, &quot;floresta&quot;, &quot;silvicultura&quot;)) dados_classes #&gt; # A tibble: 5 × 2 #&gt; CLASSE_USO classe #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 água agua #&gt; 2 área antropizada antropico #&gt; 3 área edificada edificado #&gt; 4 formação florestal floresta #&gt; 5 silvicultura silvicultura ## Junção geo_vetor_cobertura_classes &lt;- dplyr::left_join( x = geo_vetor_cobertura, y = dados_classes, by = &quot;CLASSE_USO&quot;) %&gt;% sf::st_drop_geometry() geo_vetor_cobertura_classes #&gt; GEOCODIGO MUNICIPIO UF CD_UF CLASSE_USO AREA_HA classe #&gt; 1 3543907 RIO CLARO SP 35 água 357.027 agua #&gt; 2 3543907 RIO CLARO SP 35 área antropizada 37297.800 antropico #&gt; 3 3543907 RIO CLARO SP 35 área edificada 5078.330 edificado #&gt; 4 3543907 RIO CLARO SP 35 formação florestal 7017.990 floresta #&gt; 5 3543907 RIO CLARO SP 35 silvicultura 138.173 silvicultura 15.9.1.1.3 Agregação Outra função bastante útil é a agregação de atributos. Apesar de existir uma função que realiza a união de feições, o uso conjunto das funções dplyr::group_by() e dplyr::summarise() realizam uma tarefa semelhante. Aqui vamos agregar as nascentes para Rio Claro/SP, i.e., juntar cada ponto que estava numa linha da tabela de atributos de modo que todos fiquem numa mesma linha, com o valor da quantidade de nascentes (Figura 15.23). ## Agregar geo_vetor_nascentes_n &lt;- geo_vetor_nascentes %&gt;% dplyr::group_by(MUNICIPIO, HIDRO) %&gt;% dplyr::summarise(n = n()) geo_vetor_nascentes_n #&gt; Simple feature collection with 1 feature and 3 fields #&gt; Geometry type: MULTIPOINT #&gt; Dimension: XY #&gt; Bounding box: xmin: 217622.9 ymin: 7504132 xmax: 246367.4 ymax: 7537855 #&gt; Projected CRS: SIRGAS 2000 / UTM zone 23S #&gt; # A tibble: 1 × 4 #&gt; # Groups: MUNICIPIO [1] #&gt; MUNICIPIO HIDRO n geometry #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;MULTIPOINT [m]&gt; #&gt; 1 RIO CLARO nascente 1220 ((217622.9 7528315), (217836.5 7528103), (217988.9 7528203), (218288.9 7528237), (2183… ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_nascentes_n$geometry, pch = 20, col = &quot;blue&quot;, add = TRUE) Figura 15.23: Agregação e contagem das nascentes para o município de Rio Claro/SP. 15.9.1.1.4 Manipulação da tabela de atributos Por fim, é muito comum em análises de softwares SIG a criação ou atualização dos valores de colunas na tabela de atributos. Aqui, podemos utilizar a função dplyr::mutate() para criar essas novas colunas, assim como atualizar os valores de colunas existentes. Em nosso exemplo, fazeremos uma composição das colunas CLASSE_USO e AREA_HA numa nova coluna chamada classe_area. ## Criar coluna geo_vetor_cobertura_cob_col_area &lt;- geo_vetor_cobertura %&gt;% dplyr::mutate(classe_area = paste0(CLASSE_USO, &quot; (&quot;, AREA_HA, &quot; ha)&quot;)) %&gt;% sf::st_drop_geometry() geo_vetor_cobertura_cob_col_area #&gt; GEOCODIGO MUNICIPIO UF CD_UF CLASSE_USO AREA_HA classe_area #&gt; 1 3543907 RIO CLARO SP 35 água 357.027 água (357.027 ha) #&gt; 2 3543907 RIO CLARO SP 35 área antropizada 37297.800 área antropizada (37297.8 ha) #&gt; 3 3543907 RIO CLARO SP 35 área edificada 5078.330 área edificada (5078.33 ha) #&gt; 4 3543907 RIO CLARO SP 35 formação florestal 7017.990 formação florestal (7017.99 ha) #&gt; 5 3543907 RIO CLARO SP 35 silvicultura 138.173 silvicultura (138.173 ha) Duas funções são bastante interessantes de serem integradas junto a manipulação de tabelas de atributos. Elas calculam propriedades geométricas numéricas dos vetores de linhas (comprimento) e polígonos (área): sf::st_length() e sf::st_area(). Essas funções calculam essas propriedades em metros para comprimento e em metros quadrados para área, independentemente do CRS. Para tanto, vamos utilizar as linhas de hidrografia e os polígonos de cobertura da terra para Rio Claro/SP, e atribuir esses valores à tabela de atributos de ambos os objetos espaciais, utilizando em conjunto a função dplyr::mutate(). ## Comprimento das linhas geo_vetor_hidrografia_comp &lt;- geo_vetor_hidrografia %&gt;% dplyr::mutate(comprimento = sf::st_length(.)) geo_vetor_hidrografia_comp #&gt; Simple feature collection with 1 feature and 7 fields #&gt; Geometry type: MULTILINESTRING #&gt; Dimension: XY #&gt; Bounding box: xmin: 215155.3 ymin: 7504132 xmax: 246367.4 ymax: 7537978 #&gt; Projected CRS: SIRGAS 2000 / UTM zone 23S #&gt; GEOCODIGO MUNICIPIO UF CD_UF HIDRO COMP_KM geometry comprimento #&gt; 1 3543907 RIO CLARO SP 35 curso d&#39;água (0 - 10m) 1142.98 MULTILINESTRING ((231815.7 ... 1142981 [m] ## Área dos polígonos geo_vetor_cobertura_area &lt;- geo_vetor_cobertura %&gt;% dplyr::mutate(area_m2 = sf::st_area(.)) geo_vetor_cobertura_area #&gt; Simple feature collection with 5 features and 7 fields #&gt; Geometry type: MULTIPOLYGON #&gt; Dimension: XY #&gt; Bounding box: xmin: 215151.7 ymin: 7503723 xmax: 246582.4 ymax: 7537978 #&gt; Projected CRS: SIRGAS 2000 / UTM zone 23S #&gt; GEOCODIGO MUNICIPIO UF CD_UF CLASSE_USO AREA_HA geometry area_m2 #&gt; 1 3543907 RIO CLARO SP 35 água 357.027 MULTIPOLYGON (((235487.6 75... 3570267 [m^2] #&gt; 2 3543907 RIO CLARO SP 35 área antropizada 37297.800 MULTIPOLYGON (((232275 7504... 372978415 [m^2] #&gt; 3 3543907 RIO CLARO SP 35 área edificada 5078.330 MULTIPOLYGON (((233123.6 75... 50783283 [m^2] #&gt; 4 3543907 RIO CLARO SP 35 formação florestal 7017.990 MULTIPOLYGON (((232355 7504... 70179895 [m^2] #&gt; 5 3543907 RIO CLARO SP 35 silvicultura 138.173 MULTIPOLYGON (((243052.1 75... 1381726 [m^2] 15.9.1.2 Raster Devido a estrutura espacial do raster ser formada por uma ou mais superfícies contínuas, as manipulações como subconjunto e outras operações em objetos raster funcionam de uma maneira diferente do que em objetos vetoriais. Veremos aqui as três principais: 1) subconjunto de células usando o operador [] ou subconjunto de camadas RasterStack ou RasterBrick utilizando os operadores [[]] e $, 2) renomear nomes das camadas, e 3) resumir informações de todos os pixels. 15.9.1.2.1 Subconjunto Podemos fazer um subconjunto de células utilizando dentro dos operadores [] valores para indicar a posição da linha e da coluna de um raster, ou ainda a posição de uma célula utilizando apenas um número. Essas operações resultarão em valores diferentes para RasterLayer e RasterBrick ou RasterStack. ## Raster - linha 1 e columna 1 geo_raster_srtm[1, 1] #&gt; #&gt; 382 ## Raster - célula 1 geo_raster_srtm[1] #&gt; #&gt; 382 ## Stack - linha 1 e columna 1 geo_raster_bioclim[1, 1] #&gt; wc2.1_10m_bio_1 wc2.1_10m_bio_10 wc2.1_10m_bio_11 wc2.1_10m_bio_12 wc2.1_10m_bio_13 wc2.1_10m_bio_14 #&gt; [1,] NA NA NA NA NA NA #&gt; wc2.1_10m_bio_15 wc2.1_10m_bio_16 wc2.1_10m_bio_17 wc2.1_10m_bio_18 wc2.1_10m_bio_19 wc2.1_10m_bio_2 #&gt; [1,] NA NA NA NA NA NA #&gt; wc2.1_10m_bio_3 wc2.1_10m_bio_4 wc2.1_10m_bio_5 wc2.1_10m_bio_6 wc2.1_10m_bio_7 wc2.1_10m_bio_8 #&gt; [1,] NA NA NA NA NA NA #&gt; wc2.1_10m_bio_9 #&gt; [1,] NA ## Stack - célula 1 geo_raster_bioclim[1] #&gt; wc2.1_10m_bio_1 wc2.1_10m_bio_10 wc2.1_10m_bio_11 wc2.1_10m_bio_12 wc2.1_10m_bio_13 wc2.1_10m_bio_14 #&gt; [1,] NA NA NA NA NA NA #&gt; wc2.1_10m_bio_15 wc2.1_10m_bio_16 wc2.1_10m_bio_17 wc2.1_10m_bio_18 wc2.1_10m_bio_19 wc2.1_10m_bio_2 #&gt; [1,] NA NA NA NA NA NA #&gt; wc2.1_10m_bio_3 wc2.1_10m_bio_4 wc2.1_10m_bio_5 wc2.1_10m_bio_6 wc2.1_10m_bio_7 wc2.1_10m_bio_8 #&gt; [1,] NA NA NA NA NA NA #&gt; wc2.1_10m_bio_9 #&gt; [1,] NA Para selecionar uma camada de um RasterBrick ou RasterStack, podemos utilizar as funções raster::subset() ou raster::raster() com o argumento layer indicando a ordem ou o nome da camada, além dos operadores [[]] e $ (Figura 15.24). ## Seleção de camada num objeto stack utilizando a função subset geo_raster_bioclim_bio01 &lt;- raster::subset(geo_raster_bioclim, &quot;wc2.1_10m_bio_1&quot;) geo_raster_bioclim_bio01 #&gt; class : RasterLayer #&gt; dimensions : 1080, 2160, 2332800 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : wc2.1_10m_bio_1.tif #&gt; names : wc2.1_10m_bio_1 #&gt; values : -54.72435, 30.98764 (min, max) ## Seleção de camada num objeto stack utilizando a função raster geo_raster_bioclim_bio01 &lt;- raster::raster(geo_raster_bioclim, layer = 1) geo_raster_bioclim_bio01 #&gt; class : RasterLayer #&gt; dimensions : 1080, 2160, 2332800 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : wc2.1_10m_bio_1.tif #&gt; names : wc2.1_10m_bio_1 #&gt; values : -54.72435, 30.98764 (min, max) ## Seleção de camada num objeto stack utilizando os operadores [[]] e o nome geo_raster_bioclim_bio01 &lt;- geo_raster_bioclim[[&quot;wc2.1_10m_bio_1&quot;]] geo_raster_bioclim_bio01 #&gt; class : RasterLayer #&gt; dimensions : 1080, 2160, 2332800 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : wc2.1_10m_bio_1.tif #&gt; names : wc2.1_10m_bio_1 #&gt; values : -54.72435, 30.98764 (min, max) ## Seleção de camada num objeto stack utilizando os operadores [[]] e a posicao geo_raster_bioclim_bio01 &lt;- geo_raster_bioclim[[1]] geo_raster_bioclim_bio01 #&gt; class : RasterLayer #&gt; dimensions : 1080, 2160, 2332800 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : wc2.1_10m_bio_1.tif #&gt; names : wc2.1_10m_bio_1 #&gt; values : -54.72435, 30.98764 (min, max) ## Seleção de camada num objeto stack utilizando o operador $ geo_raster_bioclim_bio01 &lt;- geo_raster_bioclim$wc2.1_10m_bio_1 geo_raster_bioclim_bio01 #&gt; class : RasterLayer #&gt; dimensions : 1080, 2160, 2332800 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : wc2.1_10m_bio_1.tif #&gt; names : wc2.1_10m_bio_1 #&gt; values : -54.72435, 30.98764 (min, max) # Plot plot(geo_raster_bioclim_bio01, col = viridis::viridis(10)) Figura 15.24: Camada BIO01 selecionada pelas operações de subconjunto. 15.9.1.2.2 Renomear Podemos ainda renomear camadas dos raster RasterLayer utilizando a função names(). ## Raster - nomes names(geo_raster_srtm_rio_claro) #&gt; [1] &quot;srtm_27_17&quot; ## Raster - renomear names(geo_raster_srtm_rio_claro) &lt;- &quot;elevacao&quot; ## Raster - nomes names(geo_raster_srtm_rio_claro) #&gt; [1] &quot;elevacao&quot; E essa operação também funciona para RasterBrick e RasterStack. ## Stack - nomes names(geo_raster_bioclim) #&gt; [1] &quot;wc2.1_10m_bio_1&quot; &quot;wc2.1_10m_bio_10&quot; &quot;wc2.1_10m_bio_11&quot; &quot;wc2.1_10m_bio_12&quot; &quot;wc2.1_10m_bio_13&quot; #&gt; [6] &quot;wc2.1_10m_bio_14&quot; &quot;wc2.1_10m_bio_15&quot; &quot;wc2.1_10m_bio_16&quot; &quot;wc2.1_10m_bio_17&quot; &quot;wc2.1_10m_bio_18&quot; #&gt; [11] &quot;wc2.1_10m_bio_19&quot; &quot;wc2.1_10m_bio_2&quot; &quot;wc2.1_10m_bio_3&quot; &quot;wc2.1_10m_bio_4&quot; &quot;wc2.1_10m_bio_5&quot; #&gt; [16] &quot;wc2.1_10m_bio_6&quot; &quot;wc2.1_10m_bio_7&quot; &quot;wc2.1_10m_bio_8&quot; &quot;wc2.1_10m_bio_9&quot; ## Stack - renomear names(geo_raster_bioclim) &lt;- c(&quot;bio01&quot;, paste0(&quot;bio&quot;, 10:19), paste0(&quot;bio0&quot;, 2:9)) ## Stack - nomes names(geo_raster_bioclim) #&gt; [1] &quot;bio01&quot; &quot;bio10&quot; &quot;bio11&quot; &quot;bio12&quot; &quot;bio13&quot; &quot;bio14&quot; &quot;bio15&quot; &quot;bio16&quot; &quot;bio17&quot; &quot;bio18&quot; &quot;bio19&quot; &quot;bio02&quot; &quot;bio03&quot; #&gt; [14] &quot;bio04&quot; &quot;bio05&quot; &quot;bio06&quot; &quot;bio07&quot; &quot;bio08&quot; &quot;bio09&quot; 15.9.1.2.3 Resumir Muitas vezes queremos fazer cálculos para todos as células de um raster. Podemos resumir informações de todos os pixels fazendo cálculos simples com todos os pixels de cada camada com a função raster::cellStats(), sendo x o argumento do objeto raster e stat o nome da função resumo, como “mean” ou “sum.” ## Raster - média de todas as células de altitude raster::cellStats(x = geo_raster_srtm_rio_claro, stat = mean) #&gt; [1] 625.8273 ## Stack - média de todas as células de cada camada bioclimática raster::cellStats(x = geo_raster_bioclim, stat = mean) #&gt; bio01 bio10 bio11 bio12 bio13 bio14 bio15 bio16 bio17 #&gt; -4.0378283 7.2035545 -13.8963286 550.0569022 93.4633916 15.3689993 74.7084151 241.6525005 55.4149542 #&gt; bio18 bio19 bio02 bio03 bio04 bio05 bio06 bio07 bio08 #&gt; 156.4237816 108.8950626 9.9432120 34.5221528 880.1215546 13.9386423 -19.7938943 33.7325366 -0.9226276 #&gt; bio09 #&gt; -5.3774489 Ou ainda, podemos analisar a frequência com que cada valor dos pixels ocorre, utilizando a função raster::freq(). ## Raster - frequência das células raster::freq(x = geo_raster_srtm_rio_claro) %&gt;% head() #&gt; value count #&gt; [1,] 491 1 #&gt; [2,] 492 4 #&gt; [3,] 493 9 #&gt; [4,] 494 19 #&gt; [5,] 495 32 #&gt; [6,] 496 44 ## Stack - frequência das células raster::freq(x = geo_raster_bioclim[[1]]) %&gt;% head() #&gt; value count #&gt; [1,] -55 319 #&gt; [2,] -54 4529 #&gt; [3,] -53 5778 #&gt; [4,] -52 6128 #&gt; [5,] -51 6090 #&gt; [6,] -50 7892 15.9.2 Operações espaciais As operações espaciais são modificações de objetos espaciais baseado em informações espaciais, como localização e formato. Seria impossível abordar todas as operações realizáveis, então demonstraremos as principais para dados vetoriais e raster. 15.9.2.1 Vetor As principais operações espaciais para dados vetoriais são: 1) filtro espacial, 2) junção espacial, 3) agregação espacial e 4) distância espacial. Apresentaremos essas operações utilizando as principais funções utilizando os dados de nascentes, hidrologia e cobertura da terra para o município de Rio Claro/SP. 15.9.2.1.1 Filtro espacial Filtros espaciais são operações que realizam seleção de feições espaciais entre dois objetos espaciais (x e y). Existe uma grande quantidade de funções para realizar filtros espaciais no R, como podemos ver na Tabela (15.12). Essas funções verificam se cada feição em x mantém sua relação em y. Ao especificar o parâmetro sparse = FALSE, as funções retornam uma matriz lógica (comporta por TRUE e FALSE). Tabela 15.12: Principais pacotes para composição de mapas no R. Função Descrição Função inversa sf::st_contains() Nenhum dos pontos de x está fora de y st_within sf::st_contains_properly() x contém y, e y não tem pontos em comum com a fronteira de x NA sf::st_covers() Nenhum ponto de y se encontra no exterior de x st_covered_by sf::st_covered_by() Inverso de sf::st_covers() NA sf::st_crosses() x e y têm alguns, mas não todos os pontos internos em comum NA sf::st_disjoint() x e y não têm pontos em comum st_intersects sf::st_equals() x e y são geometricamente iguais; o número de pedido dos nós pode ser diferente NA sf::st_equals_exact() x e y são geometricamente iguais e têm ordem de nó idêntica NA sf::st_intersects() x e y não são separados st_disjoint sf::st_is_within_distance() x está mais perto de y do que uma determinada distância NA sf::st_within() Nenhum dos pontos de y está fora de x st_contains sf::st_touches() x e y têm pelo menos um ponto limite em comum, mas nenhum ponto interno NA sf::st_overlaps() x e y têm alguns pontos em comum; a dimensão destes é idêntica à de x e y NA sf::st_relate() Dado um padrão, retorna se x e y aderem a este padrão NA Em nosso exemplo, utilizaremos a função sf::intersects() para filtrar as nascentes dentro de floresta para Rio Claro/SP. Essa função vai retornar a resposta binária se as nascentes estão (1) ou não (empty) dentro dos polígonos de floresta. ## Filtro espacial sf::st_intersects(x = geo_vetor_nascentes, y = geo_vetor_cobertura_floresta) #&gt; Sparse geometry binary predicate list of length 1220, where the predicate was `intersects&#39; #&gt; first 10 elements: #&gt; 1: 1 #&gt; 2: 1 #&gt; 3: (empty) #&gt; 4: 1 #&gt; 5: (empty) #&gt; 6: (empty) #&gt; 7: (empty) #&gt; 8: (empty) #&gt; 9: 1 #&gt; 10: (empty) Podemos usar essa mesma função em conjunto com a função dplyr::filter() para filtrar as nascentes dentro de florestas, mas agora com o argumento sparse = FALSE para valores lógicos funcionarem com o filtro. ## Filtro espacial - interno geo_vetor_nascentes_floresta_int &lt;- geo_vetor_nascentes %&gt;% dplyr::filter(sf::st_intersects(x = ., y = geo_vetor_cobertura_floresta, sparse = FALSE)) Ou ainda podemos utilizar o operador [] para realizar esse filtro, como podemos notar na Figura 15.25. ## Filtro espacial com [] - interno geo_vetor_nascentes_floresta_int &lt;- geo_vetor_nascentes[geo_vetor_cobertura_floresta, ] ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_cobertura_floresta$geometry, col = &quot;forestgreen&quot;, add = TRUE) plot(geo_vetor_nascentes_floresta_int$geometry, col = &quot;blue&quot;, pch = 20, cex = 1, add = TRUE) Figura 15.25: Nascentes dentro de florestas no município de Rio Claro/SP. Entretanto, muitas vezes queremos fazer o filtro de feições que estão fora de feições de outro objeto espacial. Para isso, podemos usar a função sf::st_disjoint() ou ainda utilizando o operador [], mas com o argumento op, nesse caso utilizando a mesma função sf::st_disjoint() como operação (Figura 15.26). Notar o segundo vazio nesse filtro. ## Filtro espacial - externo geo_vetor_nascentes_floresta_ext &lt;- geo_vetor_nascentes %&gt;% dplyr::filter(sf::st_disjoint(x = ., y = geo_vetor_cobertura_floresta, sparse = FALSE)) ## Filtro espacial com [] - externo geo_vetor_nascentes_floresta_ext &lt;- geo_vetor_nascentes[geo_vetor_cobertura_floresta, , op = st_disjoint] ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_cobertura_floresta$geometry, col = &quot;forestgreen&quot;, add = TRUE) plot(geo_vetor_nascentes_floresta_ext$geometry, col = &quot;steelblue&quot;, pch = 20, cex = 1, add = TRUE) Figura 15.26: Nascentes fora de florestas no município de Rio Claro/SP. 15.9.2.1.2 Junção espacial Outra operação muito usada dentro de análises geoespaciais é a junção espacial ou do inglês spatial join. A ideia base é muito semelhante com a junção baseada em atributos, mas aqui atribuiremos o valor da tabela de atributos das feições de um objeto espacial y às feições que fazem intersecção com um objeto espacial x, de modo que esses valores sejam armazenados na tabela de atributos do primeiro objeto espacial. Para exemplificar, vamos atribuir os valores dos polígonos de cobertura da terra aos pontos de nascentes para Rio Claro/SP, fazendo um agrupamento pela tabela de atributos para permitir criar o mapa da Figura 15.27. ## Junção espacial geo_vetor_nascentes_cob_jun &lt;- geo_vetor_nascentes %&gt;% sf::st_join(x = ., y = geo_vetor_cobertura) %&gt;% dplyr::group_by(CLASSE_USO) %&gt;% dplyr::summarise(n = n()) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_nascentes_cob_jun[1], col = c(&quot;blue&quot;, &quot;orange&quot;, &quot;gray30&quot;, &quot;forestgreen&quot;, &quot;green&quot;), pch = 20, add = TRUE) legend(x = 209000, y = 7520000, pch = 15, cex = .7, pt.cex = 2.5, legend = (geo_vetor_nascentes_cob_jun$CLASSE_USO), col = c(&quot;blue&quot;, &quot;orange&quot;, &quot;gray30&quot;, &quot;forestgreen&quot;, &quot;green&quot;)) Figura 15.27: Junção espacial da cobertura da terra para as nascentes no município de Rio Claro/SP. 15.9.2.1.3 Agregação espacial Muitas vezes queremos contabilizar quantas feições ou agregar valores de feições para polígonos. Podemos realizar essa operação usando as funções dplyr::group_by() e dplyr::summarise, ou utilizar a função aggregate(). Nesse exemplo, vamos contabilizar quantas nascentes há por polígono de cobertura da terra para o município de Rio Claro/SP (Figura 15.28). ## Agregação espacial geo_vetor_cobertura_nas_agre &lt;- geo_vetor_nascentes %&gt;% aggregate(x = ., by = geo_vetor_cobertura, FUN = length) ## Plot plot(geo_vetor_cobertura_nas_agre[1], axes = TRUE, graticule = TRUE, main = NA) Figura 15.28: Agregação espacial contabilizando o número de nascentes para cada classe de cobertura da terra no município de Rio Claro/SP. 15.9.2.1.4 Distância espacial A distância espacial é a distância calculada em duas dimensões (2D) entre um objeto espacial x e y baseado no CRS e para cada feição dos objetos espaciais. Para realizar esse cálculo, utilizamos a função sf::st_distance(). Em nosso exemplo, vamos calcular a distância das nascentes até a floresta mais próxima, e adicionando essa informação para cada ponto na tabela de atributos com a função dplyr::mutate(), para o município de Rio Claro/SP (Figura 15.29). ## Distância espacial geo_vetor_nascentes_dist_flo &lt;- geo_vetor_nascentes %&gt;% dplyr::mutate(dist_flo = sf::st_distance(geo_vetor_nascentes, geo_vetor_cobertura_floresta)) ## Plot plot(geo_vetor_nascentes_dist_flo[7], pch = 20, axes = TRUE, graticule = TRUE, main = NA) Figura 15.29: Distância espacial das nascentes até o fragmento de floresta mais próxima no município de Rio Claro/SP. 15.9.2.2 Raster As principais operações espaciais para dados raster podem ser classificas, segundo Lovelace, Nowosad, and Münchow (2019), em: 1) operações locais (por célula), 2) operações focais (por bloco de múltiplas células regulares - e.g. 3x3), 3) operações zonais (por bloco de múltiplas células irregulares) e 4) operações globais (por um ou vários rasters inteiros). Cada uma delas é aplicada para objetivos e escalas espaciais específicas. Para os exemplos desta seção, utilizaremos o dado raster de elevação para o município de Rio Claro/SP. 15.9.2.2.1 Operações locais As operações locais contemplam todas as operações realizadas célula a célula em uma ou várias camadas de um objeto raster. A álgebra de raster é uma das mais comuns, simples e poderosas operações no R envolvendo rasters. Com ela podemos fazer operações simples através de operadores aritméticos (soma, subtração, multiplicação, divisão ou potenciação) entre dois ou mais objetos raster, ou utilizar funções para alterar todos os valores dos pixels como, por exemplo, as funções lo10() ou sqrt(), ou ainda a função raster::scale() para padronizar ou centralizar os valores dos rasters (Figura 15.30). ## Soma geo_raster_srtm_rio_claro2 &lt;- geo_raster_srtm_rio_claro + geo_raster_srtm_rio_claro ## Log10 geo_raster_srtm_rio_claro_log10 &lt;- log10(geo_raster_srtm_rio_claro) ## Plot old_par &lt;- par(mfrow = c(1, 2)) plot(geo_raster_srtm_rio_claro2, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) plot(geo_raster_srtm_rio_claro_log10, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) par(old_par) Figura 15.30: Rasters de soma e log10 do mapa de elevação para Rio Claro/SP. Além das operações aritméticas, a álgebra de rasters também permite operações lógicas, como criar um raster (binário - composto por 1 quando a operação lógica é verdadeira, e 0 quanto é falsa). Em nosso caso, buscamos todos os pixels acima de 600 metros para o raster de elevação de Rio Claro/SP (Figura 15.31). ## Acima de 600 geo_raster_srtm_rio_claro_acima_600 &lt;- geo_raster_srtm_rio_claro &gt; 600 ## Plot plot(geo_raster_srtm_rio_claro_acima_600, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.31: Operação local lógica mostrando todos os pixels acima de 600 metros de elevação para Rio Claro/SP. Além dos operadores aritméticos, também podemos usar as funções raster::calc() (uma camada) e raster::overlay() (duas ou mais camadas) para realizar operações em todas as células. Elas funcionam com a criação de uma função específica através da função function(), para que esta seja aplicada em todas as células do raster. Essas funções são muito eficientes, portanto, são preferíveis para grandes conjuntos de dados raster. Exemplificaremos essa operação calculando o produto de todos os pixels por eles mesmos do raster de elevação de Rio Claro/SP (Figura 15.32). ## Produto dos pixel - calc geo_raster_srtm_rio_claro_prod &lt;- raster::calc(x = geo_raster_srtm_rio_claro, fun = function(x){x * x}) geo_raster_srtm_rio_claro_prod #&gt; class : RasterLayer #&gt; dimensions : 370, 364, 134680 (nrow, ncol, ncell) #&gt; resolution : 0.0008333333, 0.0008333333 (x, y) #&gt; extent : -47.765, -47.46167, -22.55167, -22.24333 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : layer #&gt; values : 241081, 970225 (min, max) ## Plot plot(geo_raster_srtm_rio_claro_prod, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.32: Operação local de multiplicação de todos os pixels por eles mesmos do raster de elevação para Rio Claro/SP. A predição de objetos raster é outra aplicação extremamente útil de operações locais. A partir da relação entre variáveis respostas (e.g, pontos no espaço, como ocorrência ou riqueza de espécies), e variáveis preditoras (rasters contínuos de elevação, pH, precipitação, temperatura, cobertura da terra ou classe de solo), criamos modelos usando funções como lm(), glm(), gam() ou uma técnica de aprendizado de máquina, e fazemos predições espaciais aplicando os coeficientes estimados aos valores dos raster preditores (consulte o Capítulo 7). Por fim, a reclassificação de rasters é outra operação muito comum quando trabalhamos com rasters. Nela é realizada a classificação de intervalos de valores numéricos em grupos, e.g. agrupar um modelo digital de elevação em classes de valores. A função que faz essa operação é a raster::reclassify(). Ela possui dois argumentos: x que é o raster a ser reclassificado, e o segundo rcl para o qual devemos construir uma matriz de reclassificação, onde a primeira coluna é a extremidade inferior, a segunda coluna é a extremidade superior, e a terceira coluna representa o novo valor para os intervalos das colunas um e dois. Vamos reclassificar o raster de elevação de Rio Claro/SP para os intervalos 400–600, 600–800 e 800–1000 que são reclassificados para os valores 1, 2 e 3, respectivamente (Figura 15.33). ## Matriz de reclassificação rcl &lt;- matrix(c(400,600,1, 600,800,2, 800,1000,3), ncol = 3, byrow = TRUE) ## Reclassifição geo_raster_srtm_rio_claro_rcl &lt;- raster::reclassify(x = geo_raster_srtm_rio_claro, rcl = rcl) ## Plot plot(geo_raster_srtm_rio_claro_rcl, col = viridis::viridis(3)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.33: Operação local de reclassificação para três classes de elevação para Rio Claro/SP. 15.9.2.2.2 Operações focais As operações focais levam em consideração uma célula central e seus vizinhos. A vizinhança (também chamada de janela móvel - moving window) tipicamente é composta de células de 3 por 3 (célula central e seus oito vizinhos), mas pode assumir outra forma. A operação focal aplica uma função de agregação a todas as células dentro da vizinhança especificada, e usa a saída correspondente como o novo valor para a célula central, e segue para a próxima célula central e seus vizinhos. Essa operação é realizada através da função raster::focal(). O parâmetro x especifica o raster de entrada, o parâmetro w define a janela móvel por uma matriz cujos valores correspondem a pesos, e por fim o parâmetro fun especifica a função que desejamos aplicar às células, como min(), max(), sum(), mean(), sd() ou var(). Existem diversas aplicações dessa operação para dados raster, como no processamento de imagens de satélite (ver mais em Wegmann, Leutner, and Dech (2016)). Outra utilidade é para o cálculo de características topográficas, como declividade, aspecto e direções de fluxo. Para calcular essas métricas específicas, podemos utilizar a função raster::terrain(). Para nosso exemplo, vamos realizar o cálculo do desvio padrão da elevação e a métrica de aspecto (orientação da vertente) para o raster de elevação em Rio Claro/SP (Figura 15.34). ## Janela móvel - moving window geo_raster_srtm_rio_claro_focal_sd &lt;- raster::focal( x = geo_raster_srtm_rio_claro, w = matrix(data = 1, nrow = 3, ncol = 3), fun = sd) ## Declividade geo_raster_srtm_rio_claro_asp &lt;- raster::terrain(x = geo_raster_srtm_rio_claro, opt = &quot;aspect&quot;) ## Plot old_par &lt;- par(mfrow = c(1, 2)) plot(geo_raster_srtm_rio_claro_focal_sd, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) plot(geo_raster_srtm_rio_claro_asp, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) par(old_par) Figura 15.34: Cálculo do desvio padrão da elevação para uma janela de 3x3 e do aspecto para Rio Claro/SP. 15.9.2.2.3 Operações zonais As operações zonais aplicam uma função de agregação a várias células de um raster. Geralmente usa-se um segundo raster categórico para definir as zonas, de modo que as células raster que definem a zona não precisam ser vizinhas, como na operação focal. O resultado de uma operação zonal é uma tabela de resumo agrupada por zona, explicando porque essa operação também é conhecida como estatística zonal. Isso é um contraste com as operações focais que retornam um objeto raster. A operação zonal é realizada através da função raster::zonal(), que recebe de entrada no x o raster contínuo, em z o raster categórico, e em fun a função que resumirá as células. Em nosso exemplo, vamos calcular diversas medidas resumo da elevação com a função summary() para cada classe de elevação que criamos anteriormente. ## Estatística zonal geo_raster_srtm_rio_claro_zonal &lt;- data.frame(raster::zonal(geo_raster_srtm_rio_claro, geo_raster_srtm_rio_claro_rcl, fun = &quot;summary&quot;)) colnames(geo_raster_srtm_rio_claro_zonal) &lt;- c(&quot;zona&quot;, &quot;min&quot;, &quot;1qt&quot;, &quot;mediana&quot;, &quot;media&quot;, &quot;3qt&quot;, &quot;max&quot;) geo_raster_srtm_rio_claro_zonal #&gt; zona min 1qt mediana media 3qt max #&gt; 1 1 491 552 574.0 567.5995 589 600 #&gt; 2 2 601 620 640.0 650.6829 670 800 #&gt; 3 3 801 817 832.5 834.2732 846 985 15.9.2.2.4 Operações globais As operações globais usam todo o conjunto de dados raster representando uma única zona. As operações globais mais comuns são estatísticas descritivas para todos os pixels do raster, utilizando a função raster::cellStats() ou raster::freq(), já vistas. Além das estatísticas descritivas, podemos gerar rasters de distância, que calcula a distância de cada célula a uma ou um grupo células-alvo específica, utilizando a função raster::distance(). Em nosso exemplo, vamos selecionar os pixels abaixo de 500 m do raster de elevação e calcular a Distância Euclidiana (Figura 15.35). ## Distância euclidiana geo_raster_srtm_rio_claro_abaixo_500 &lt;- raster::calc( x = geo_raster_srtm_rio_claro, fun = function(x) ifelse(x &lt; 500, 1, NA)) geo_raster_srtm_rio_claro_global_dist &lt;- raster::distance(geo_raster_srtm_rio_claro_abaixo_500) ## Plot plot(geo_raster_srtm_rio_claro_global_dist, col = viridis::viridis(10)) plot(geo_raster_srtm_rio_claro_abaixo_500, add = TRUE, col = &quot;white&quot;, legend = FALSE) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.35: Raster de distância Euclidiana dos pixels abaixo de 500 m de elevação para Rio Claro/SP. 15.9.3 Operações geométricas As operações geométricas realizam modificações em objetos espaciais baseado na geometria do vetor ou do raster e na interação e conversão entre vetor-raster. As operações geométricas vetoriais podem ser unárias funcionam em uma única geometria, ou binárias que modificam uma geometria com base na forma de outra. Ainda podemos fazer transformações para alterar os tipos vetores, que refletirá se as feições são únicas ou múltiplas, inclusive na tabela de atributos. As operações geométricas em rasters envolvem mudar a posição, tamanho e número dos pixels subjacentes e atribuir-lhes novos valores. Por fim, podemos ainda fazer operações de interações e conversões entre raster-vetor para ajustar rasters a vetores, assim como converter um objeto espacial vetorial para raster e vice-versa. 15.9.3.1 Vetor Como dissemos, as operações geométricas em vetores criarão ou alterar a geometria de objetos da classe sf, podendo fazer alterações em única geometria (unárias): 1) simplificação, 2) centroides, 3) pontos aleatórios, 4) buffers, 5) polígono convexo, 7) polígonos de Voronoi, 7) quadrículas e hexágonos; ou modificar uma geometria com base na forma de outra geometria (binárias): 8) união e 9) recortes; ou ainda fazer transformações de tipo. Para exemplificar as operações geométricas com vetores, vamos utilizar os dados do limite, nascentes, hidrologia e cobertura da terra para o município de Rio Claro/SP. 15.9.3.1.1 Simplificação A simplificação possui o intuito de generalizar linhas ou polígonos, diminuindo assim suas complexidades em relação ao número de vértices. É utilizada para representação em mapas menores ou mapas interativos ou ainda quando um objeto vetorial é muito grande. A função utilizada é a sf::st_simplify(), que usa o argumento x para uma geometria de entrada e dTolerance para controlar o nível de generalização nas unidades do mapa. Em nosso exemplo, simplificaremos a hidrografia de Rio Claro/SP (Figura 15.36). ## Simplificação geo_vetor_hidrografia_simplificado &lt;- sf::st_simplify(x = geo_vetor_hidrografia, dTolerance = 1000) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_hidrografia$geometry, col = &quot;steelblue&quot;, lwd = 2, add = TRUE) plot(geo_vetor_hidrografia_simplificado$geometry, col = adjustcolor(&quot;black&quot;, .7), add = TRUE) Figura 15.36: Simplificação da hidrografia para Rio Claro/SP. 15.9.3.1.2 Centroides A operação de centroides identifica o centro de objetos geográficos, geralmente o centro de massa das feições. É utilizado para gerar um ponto simples para representações complexas ou para estimar a distância entre polígonos utilizando esse centroide. Podemos calculá-los com a função sf::st_centroids(), ou com a função sf::st_point_on_surface() para garantir que esses centroides caiam dentro das geometrias. Aqui calcularemos o centroide do município de Rio Claro/SP (Figura 15.37). ## Centroides geo_vetor_rio_claro_sirgas2000_utm23s_cent &lt;- sf::st_centroid(geo_vetor_rio_claro_sirgas2000_utm23s) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_cent$geom, cex = 3, pch = 20, add = TRUE) Figura 15.37: Centroide do limite do município de Rio Claro/SP. 15.9.3.1.3 Pontos aleatórios Por vezes precisamos criar algum padrão aleatório dentro de um contexto espacial. Isso pode ser realizado de diversas formas. Uma delas é a criação de pontos aleatórios dentro de um polígono. Podemos realizar essa operação com a função sf::st_sample(). Para essa função, dois argumentos são utilizados: x uma geometria de entrada e o size indicando o número de pontos à ser criado. Outro argumento bastante interessante é o type, indicando o tipo de amostragem espacial (aleatório, regular ou triangular). Para nosso exemplo, vamos fixar a amostragem utilizando a função set.seed() e sortear 30 pontos para o limite do município de Rio Claro/SP (15.38). ## Fixar amostragem set.seed(42) ## Pontos aleatórios geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios &lt;- sf::st_sample(geo_vetor_rio_claro_sirgas2000_utm23s, size = 30) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, pch = 20, add = TRUE) Figura 15.38: Sorteio de 30 pontos aleatório para Rio Claro/SP. 15.9.3.1.4 Buffer Buffers são polígonos que representam a área dentro de uma determinada distância de um elemento geométrico, independentemente de ser um ponto, linha ou polígono. O buffer é comumente utilizado para análise de dados geoespaciais, geralmente sendo entendio como uma unidade amostral, delimitando uma porção no entorno de algum elemento ou evento, como as condições climáticas ou da estrutura da paisagem para uma amostragem, ou as características de cobertura da terra ao longo de um corpo d’água, e.g., a Área de Preservação Permanente (APP). A função utilizada para criar buffers é a sf::st_buffer(), que requer pelo menos dois argumentos: x uma geometria de entrada e o dist uma distância para o buffer, fornecido nas unidades do CRS da geometria de entrada. Em nosso exemplo, vamos criar buffers de 1000 metros para os 30 pontos aleatórios criados anteriormente para o município de Rio Claro/SP (Figura 15.39). ## Buffer geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer &lt;- sf::st_buffer( x = geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, dist = 1000) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer, col = NA, lwd = 2, border = &quot;red&quot;, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, pch = 20, cex = 1, add = TRUE) Figura 15.39: Buffers de 1000 metros para os 30 pontos aleatórios no município de Rio Claro/SP. Podemos ainda criar buffers quadrados acrescentando o argumento , endCapStyle = \"SQUARE\" (Figura 15.40). ## Buffer geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_quad &lt;- sf::st_buffer( x = geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, dist = 1000, endCapStyle = &quot;SQUARE&quot;) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_quad, col = NA, lwd = 2, border = &quot;red&quot;, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, pch = 20, cex = 1, add = TRUE) Figura 15.40: Buffers quadrados de 1000 metros para os 30 pontos aleatórios no município de Rio Claro/SP. 15.9.3.1.5 Polígono convexo Uma análise bastante comum, principalmente realizada pela IUCN, é a criação de polígonos convexos, para definir a extensão de ocorrência de uma espécie (Extent of occurrence - EOO). Nesse sentido, essa operação ligará os pontos externos de um conjunto de pontos e criar um polígono a partir deles. Podemos criar esse polígono com a função sf::st_convex_hull(). Um único passo que precisamos adiantar é utilizar a função sf::st_union() para unir todos os pontos e criar um objeto sf MULTIPOINT, já iremos explicado com mais detalhes adiante. Vamos utilizar os pontos aleatórios que criamos anteriormente para criar o polígono convexo (Figura 15.41). ## Polígono convexo geo_vetor_rio_claro_sirgas2000_utm23s_convexo &lt;- geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios %&gt;% sf::st_union() %&gt;% sf::st_convex_hull() ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_convexo, col = NA, lwd = 2, border = &quot;red&quot;, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, pch = 20, cex = 1, add = TRUE) Figura 15.41: Polígono convexo para os 30 pontos criados aleatoriamente para Rio Claro/SP. 15.9.3.1.6 Polígonos de Voronoi Uma outra forma de criar polígonos para resumir dados espaciais é através de Polígonos de Voronoi ou Diagrama de Voronoi. Nele, polígonos irregulares são criados a partir da proximidade de pontos, de modo a estimar uma área de abrangência no entorno dos mesmos (Okabe (2000)). Esses polígonos podem ser criados com a função sf::st_voronoi(), mas precisamos novamente utilizar a função sf::st_union() para unir todos os pontos e criar um objeto sf MULTIPOINT. Vamos utilizar os pontos aleatórios que criamos anteriormente para criar o polígono de Voronoi (Figura 15.42). ## Polígonos de Voronoi geo_vetor_rio_claro_sirgas2000_utm23s_voronoi &lt;- geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios %&gt;% sf::st_union() %&gt;% sf::st_voronoi() ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_voronoi, col = NA, lwd = 2, border = &quot;red&quot;, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios, pch = 20, cex = 1, add = TRUE) Figura 15.42: Polígonos de Voronoi para os 30 pontos criados aleatoriamente para Rio Claro/SP. 15.9.3.1.7 Quadrículas e hexágonos Muitas vezes precisamos criar unidades espaciais idênticas e igualmente espaçadas para resumir informações dispersas por toda a nossa área de estudo. Uma prática muito comum é a criação de um gride de pontos ou quadrículas em toda a área de estudo, e depois utilizar essas geometrias para associar ou resumir informações espacializadas, como a IUCN utiliza para a análise de área de ocupação (Are of occupancy - AOO). Além das quadrículas, uma outra geometria que se tornou bastante comum para as finalidades descritas, é a criação de hexágonos, que além de serem mais esteticamente atraentes, possuem uma explicação matemática de sua melhor funcionalidade para análises espaciais em Ecologia (Birch, Oom, and Beecham (2007)). A função utilizada para criar esses grides é a sf::st_make_grid(), que requer pelo menos dois argumentos: x uma geometria de entrada e o cellsize indicando o tamanho do gride a ser criado, fornecido nas unidades do CRS da geometria de entrada. Há diversos outros argumentos, mas os mais importantes são o square que definirá se o gride será de quadriculas ou de hexágonos, e o what que definirá se geraremos polígonos, cantos ou centroides. Em nosso exemplo, vamos criar quadrículas e hexágonos de 2000 metros (i.e. 4000000 metros quadrados) para o município de Rio Claro/SP (Figura 15.43 e Figura 15.44). Podemos ainda utilizar as funções de filtros espaciais (Tabela 15.12) para definir como selecionaremos esses elementos para a área de estudo. Aqui utilizamos a função sf::st_intersects(). ## Quadrículas geo_vetor_rio_claro_sirgas2000_utm23s_grid &lt;- sf::st_make_grid( x = geo_vetor_rio_claro_sirgas2000_utm23s, cellsize = 2000, what = &quot;polygons&quot;) %&gt;% sf::st_as_sf() %&gt;% dplyr::filter(sf::st_intersects(x = ., y = geo_vetor_rio_claro_sirgas2000_utm23s, sparse = FALSE)) ## Centroides das quadrículas geo_vetor_rio_claro_sirgas2000_utm23s_grid_cent &lt;- geo_vetor_rio_claro_sirgas2000_utm23s %&gt;% sf::st_make_grid(cellsize = 2000, what = &quot;centers&quot;) %&gt;% sf::st_as_sf() %&gt;% dplyr::filter(sf::st_intersects(x = ., y = sf::st_union(geo_vetor_rio_claro_sirgas2000_utm23s_grid), sparse = FALSE)) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_grid, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_grid_cent, pch = 20, add = TRUE) Figura 15.43: Quadrículas de 2000 metros de arestas e centroides para Rio Claro/SP. ## Hexágonos geo_vetor_rio_claro_sirgas2000_utm23s_hex &lt;- geo_vetor_rio_claro_sirgas2000_utm23s %&gt;% sf::st_make_grid(cellsize = 2000, square = FALSE) %&gt;% sf::st_as_sf() %&gt;% dplyr::filter(sf::st_intersects(x = ., y = geo_vetor_rio_claro_sirgas2000_utm23s, sparse = FALSE)) ## Centroides de hexágonos geo_vetor_rio_claro_sirgas2000_utm23s_hex_cent &lt;- geo_vetor_rio_claro_sirgas2000_utm23s %&gt;% sf::st_make_grid(cellsize = 2000, square = FALSE, what = &quot;centers&quot;) %&gt;% sf::st_as_sf() %&gt;% dplyr::filter(sf::st_intersects(x = ., y = sf::st_union(geo_vetor_rio_claro_sirgas2000_utm23s_hex), sparse = FALSE)) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_hex, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_hex_cent, pch = 20, add = TRUE) Figura 15.44: Hexágonos equivalentes a quadrículas de 2000 metros de arestas e centroides para Rio Claro/SP. 15.9.3.1.8 União (“dissolver”) Como vimos, a agregação por atributos podemos dissolver as geometrias de polígonos do mesmo grupo pelos valores da tabela de atributos, onde, naquele exemplo, contabilizamos quantas nascentes havia por polígono de cobertura da terra para o município de Rio Claro/SP (Figura 15.28). Nesta seção, vamos utilizar a função sf::st_union() para unir diversas feições em uma só, dissolvendo os limites entre elas. Vamos utilizar de exemplo os buffers que criamos a partir dos 30 pontos aleatórios (Figura 15.45). ## União geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao &lt;- sf::st_union(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao, col = adjustcolor(&quot;blue&quot;, .1), add = TRUE) Figura 15.45: União - dissolução - dos buffers criados a partir de pontos aleatórios para Rio Claro/SP. 15.9.3.1.9 Recorte e apagar (“clipar” e “erase”) O recorte realiza um subconjunto espacial envolvendo dois objetos espaciais. O recorte é aplicado somente a linhas e polígonos, ou seja, usaremos linhas e polígonos para recortar linhas ou polígonos. Esse recorte pode ser realizado de três formas: 1) intersecção (subconjunto das geometrias sobrepostas entre os dois objetos), 2) diferença (subconjunto das geometrias do primeiro objeto sem sobreposição com o segundo objeto), e 3) diferença simétrica (apenas as geometrias não sobrepostas entre os dois objetos). Respectivamente para cada uma dessas operações temos funções específicas: sf::st_intersection(), sf::st_difference() e sf::st_sym_difference(). Para nosso exemplo, faremos o recorte da hidrografia em relação aos buffers criados e unidos para os 30 pontos aleatórios em Rio Claro/SP. Primeiramente, fazeremos o recorte para dentro dos buffers com a função sf::st_intersection() (Figura 15.46). ## Recorte - intersecção geo_vetor_hidrografia_interseccao &lt;- sf::st_intersection(x = geo_vetor_hidrografia, y = geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao, col = adjustcolor(&quot;blue&quot;, .1), add = TRUE) plot(geo_vetor_hidrografia_interseccao$geometry, col = &quot;blue&quot;, add = TRUE) Figura 15.46: Recorte da hidrografia para dentro dos buffers dos 30 aleatórios para Rio Claro/SP. Para nosso segundo exemplo, realizamos o recorte da hidrografia em relação aos buffers, mas agora para fora dos buffers utilizando a função sf::st_difference() (Figura 15.47), que seria semelhando a operação de apagar (“erase”). ## Recorte - diferença geo_vetor_hidrografia_diferenca &lt;- sf::st_difference(x = geo_vetor_hidrografia, y = geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s_pontos_aleatorios_buffer_uniao, col = adjustcolor(&quot;blue&quot;, .1), add = TRUE) plot(geo_vetor_hidrografia_diferenca$geometry, col = &quot;blue&quot;, add = TRUE) Figura 15.47: Recorte da hidrografia para fora dos buffers dos 30 aleatórios para Rio Claro/SP. 15.9.3.1.10 Transformações de tipo Esse tópico possui muitas funcionalidades, que são exploradas no tópico “5.2.7 Type transformations” de Lovelace, Nowosad, and Münchow (2019). Aqui, nosso interesse principal é em relação à transformação dos tipos de objetos espaciais da classe sf: MULTIPOINT, MULTILINESTRING e MULTIPOLYGON, para POINT, LINESTRING e POLYGON. Muitas vezes as feições de nossos objetos, i.e., as linhas da tabela de atributos estão agrupadas em apenas uma linha da tabela. Quando o objeto espacial está nesse formato, geralmente em alguma classe dessas (MULTIPOINT, MULTILINESTRING e MULTIPOLYGON), não temos como realizar operações espaciais ou geométricas para cada feição, e precisamos separá-las cada uma em uma linha para que operações como o cálculo de comprimento ou área seja possível para cada feição. Dessa forma, podemos utilizar a função sf::st_cast() para fazer essas transformações e atribuir cada feição a uma linha da tabela de atributos. Como exemplo, vamos separar os fragmentos de floresta e calcular a área para cada feição em hectares (Figura 15.48). ## Transformação de tipo geo_vetor_cobertura_floresta_polygon &lt;- geo_vetor_cobertura_floresta %&gt;% sf::st_cast(&quot;POLYGON&quot;) %&gt;% dplyr::mutate(area_ha = sf::st_area(.)/1e4 %&gt;% round(2)) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = &quot;gray&quot;, main = NA, axes = TRUE, graticule = TRUE) plot(geo_vetor_cobertura_floresta_polygon[&quot;area_ha&quot;], col = viridis::viridis(100), add = TRUE) Figura 15.48: Transformação do vetor de florestas em POLYGON e cálculo da área para cada feição para Rio Claro/SP. 15.9.3.2 Raster As operações geométricas em rasters envolvem mudar a posição, tamanho e número dos pixels e atribuir novos valores, geralmente aumentando ou diminuindo o tamanho desses pixels. Essas operações permitem alinhar rasters de diversas fontes, fazendo com que compartilhem uma correspondência entre os pixels, permitindo que eles sejam processados todos juntos, ou simplesmente permita a realização de análises que demorariam muito, caso os rasters possuam um tamanho de pixel muito pequeno. Importante frisar que essas operações funcionam para as três classes dos objetos raster: RasterLayer, RasterBrick e RasterStack. Para exemplificar as operações geométricas com rasters, vamos utilizar os dados de elevação para o município de Rio Claro/SP e bioclimáticos para o mundo. 15.9.3.2.1 Agregação Na agregação de rasters aumentaremos o tamanho dos pixels (diminuindo a resolução), agregando os valores dos pixels em um pixel maior. Podemos realizar essa operação com a função raster::aggregate(), que possui três argumentos: x corresponde ao objeto raster de entrada, fact é o fator de agregação e corresponde ao número que definirá o novo tamanho do pixel (e.g. se um raster tem resolução de 90 m, um fator de agregação de 10 fará com o novo raster tenha a resolução de 900 m), e fun é a função utilizada para realizar a agregação dos pixels (Figura 15.49). Em nosso exemplo, vamos aumentar o tamanho dos pixels para 900 metros do raster de elevação para Rio Claro/SP. ## Agregação - aumentar o tamanho do pixel geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media &lt;- raster::aggregate(x = geo_raster_srtm_rio_claro_sirgas2000_utm23s, fact = 10, fun = &quot;mean&quot;) geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media #&gt; class : RasterLayer #&gt; dimensions : 40, 37, 1480 (nrow, ncol, ncell) #&gt; resolution : 900, 900 (x, y) #&gt; extent : 214554.4, 247854.4, 7502625, 7538625 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=utm +zone=23 +south +ellps=GRS80 +units=m +no_defs #&gt; source : memory #&gt; names : srtm_27_17 #&gt; values : 506.0024, 922.8709 (min, max) ## Plot plot(geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, col = viridis::viridis(10)) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.49: Agregação (aumento do pixel para 900 metros) utilizando a média para o raster de elevação para Rio Claro/SP. 15.9.3.2.2 Desagregação De modo contrário, na desagregação de rasters diminuiremos o tamanho dos pixels (aumentando a resolução), preenchendo com novos valores. Podemos realizar essa operação com a função raster::desaggregate(), que assim como a função anterior, possui três argumentos: x corresponde ao objeto raster de entrada, fact é o fator de desagregação e corresponde ao número que definirá o novo tamanho do pixel (e.g. se um raster tem resolução de 90 m, um fator de desagregação de 2 fará com que o novo raster tenha a resolução de 9 m), e method é a função utilizada para realizar a desagregação dos pixels (Figura 15.50). Nesse exemplo, vamos diminuir o tamanho dos pixels para 45 metros do raster de elevação para Rio Claro/SP. ## Desagregação - diminuir o tamanho do pixel geo_raster_srtm_rio_claro_desg_bil &lt;- raster::disaggregate(x = geo_raster_srtm_rio_claro_sirgas2000_utm23s, fact = 2, method = &quot;bilinear&quot;) geo_raster_srtm_rio_claro_desg_bil #&gt; class : RasterLayer #&gt; dimensions : 792, 728, 576576 (nrow, ncol, ncell) #&gt; resolution : 45, 45 (x, y) #&gt; extent : 214554.4, 247314.4, 7502985, 7538625 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=utm +zone=23 +south +ellps=GRS80 +units=m +no_defs #&gt; source : memory #&gt; names : srtm_27_17 #&gt; values : 493.7046, 986.5187 (min, max) ## Plot plot(geo_raster_srtm_rio_claro_desg_bil, col = viridis::viridis(10)) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.50: Desagregação (diminuição do pixel para 45 metros) utilizando o método bilinear para o raster de elevação para Rio Claro/SP. 15.9.3.2.3 Alinhamento de rasters Muitas vezes queremos ir além de ajustar o tamanho do pixel, ajustando também a extensão, número e origem dos pixels para várias camadas rasters, principalmente se precisamos criar objetos das classes RasterBrick ou RasterStack. Dessa forma, podemos utilizar a função raster::compareRaster() para comparar os rasters em relação a extensão, número de linhas e colunas, projeção, resolução e origem (ou um subconjunto dessas comparações). Podemos utilizar a função raster::resample() para fazer esse alinhamento, ou ainda a função gdalUtils::align_rasters(). Para a primeira função, os argumentos são x para o raster de entrada, y para o raster de alinhamento e method para o método utilizado no alinhamento. Para nosso exemplo, vamos ajustar uma camada bioclimática (BIO01) à camada de elevação para Rio Claro/SP (Figura 15.51). ## Reamostragem geo_raster_bioclim_rc &lt;- raster::resample(x = geo_raster_bioclim$bio01, y = geo_raster_srtm_rio_claro, method = &quot;bilinear&quot;) geo_raster_bioclim_rc #&gt; class : RasterLayer #&gt; dimensions : 370, 364, 134680 (nrow, ncol, ncell) #&gt; resolution : 0.0008333333, 0.0008333333 (x, y) #&gt; extent : -47.765, -47.46167, -22.55167, -22.24333 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : bio01 #&gt; values : 19.8383, 20.60492 (min, max) ## Plot plot(geo_raster_bioclim, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.51: Reamostragem (alinhamento dos rasters) utilizando o método bilinear para alinhar o raster bioclimático (BIO01) ao de elevação para Rio Claro/SP. 15.9.3.3 Interações raster-vetor Podemos fazer operações da interação entre objetos vetoriais e raster, como ajustes da extensão e limite do raster para vetores (corte e máscara), extração dos valores dos pixels para vetores (pontos, linhas e polígonos), e estatísticas zonais dos valores dos pixels dos raster para um vetor (polígonos). 15.9.3.3.1 Cortes e máscaras Muitas vezes precisamos ajustar o tamanho de um objeto raster a uma área menor de interesse, geralmente definido por um objeto vetorial. Para realizar essa operação, dispomos de duas funções: raster::crop() e raster::mask(), sendo que ambos os objetos raster a ser reduzido e vetor como molde precisam estar no mesmo CRS. A função raster::crop() ajusta o raster à extensão do vetor. Como exemplo, vamos retomar o raster de elevação original baixado e importado na seção anterior (Figura 15.13). Primeiramente, vamos usar a função raster::crop() para ajustar esse raster à extensão do limite do município de Rio Claro/SP (Figura 15.52). ## Crop - adjuste da extensão geo_raster_srtm_rio_claro_crop &lt;- raster::crop(geo_raster_srtm, geo_vetor_rio_claro) ## Plot plot(geo_raster_srtm_rio_claro_crop, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.52: Ajuste da extensão do raster de elevação para a extensão de Rio Claro/SP. Para ajustar o raster ao limite do município de Rio Claro/SP, vamos usar a função raster::mask(). É importante notar que essa função preenche com NAs os pixels que estão fora do limite do polígono e não ajusta a extensão (Figura 15.52). ## Mask - adjuste ao limite geo_raster_srtm_rio_claro_mask &lt;- raster::mask(geo_raster_srtm, geo_vetor_rio_claro) ## Plot plot(geo_raster_srtm_rio_claro_mask, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.53: Ajuste do raster de elevação para o limite de Rio Claro/SP. Para ajustar o raster à extensão e ao limite do município de Rio Claro/SP, precisamos utilizar conjuntamente as funções raster::crop() e raster::mask() (Figura 15.54). ## Crop e mask - ajuste da extensão e do limite geo_raster_srtm_rio_claro_crop_mask &lt;- geo_raster_srtm %&gt;% raster::crop(geo_vetor_rio_claro) %&gt;% raster::mask(geo_vetor_rio_claro) ## Plot plot(geo_raster_srtm_rio_claro_crop_mask, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.54: Ajuste da extensão e do limite do raster de elevação para Rio Claro/SP. A função raster::mask() possui ainda um argumento chamado inverse, que cria uma máscara inversa ao limite, preenchendo com NA o pixels internos ao limite do polígono, como podemos ver para o raster de elevação e o limite de Rio Claro/SP (Figura 15.55). ## Crop e mask inversa - ajuste da extensão e do limite inverso geo_raster_srtm_rio_claro_crop_mask_inv &lt;- geo_raster_srtm %&gt;% raster::crop(geo_vetor_rio_claro) %&gt;% raster::mask(geo_vetor_rio_claro, inverse = TRUE) ## Plot plot(geo_raster_srtm_rio_claro_crop_mask_inv, col = viridis::viridis(10)) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.55: Ajuste da extensão e do limite externo do raster de elevação para Rio Claro/SP. 15.9.3.3.2 Extração A interação entre raster-vetor de extração é o processo que identifica e retorna valores associados de pixels de um raster com base em um objeto vetorial. É uma operação extremamente comum em análises geoespaciais, principalmente para associar valores de raster ambientais (contínuos ou categóricos) a pontos de ocorrência ou amostragem. Os valores retornados dependerão do tipo vetor (pontos, linhas ou polígonos) e de argumentos da função raster::extract() que alteram o funcionamento da extração. Em nosso exemplo, vamos extrair os valores do raster de elevação para as nascentes do município de Rio Claro/SP (Figura 15.56). ## Extração geo_vetor_nascentes_ele &lt;- geo_vetor_nascentes %&gt;% dplyr::mutate(elev = raster::extract(x = geo_raster_srtm_rio_claro_sirgas2000_utm23s, y = .)) ## Plot plot(geo_vetor_nascentes_ele[&quot;elev&quot;], pch = 20, main = NA, axes = TRUE, graticule = TRUE) Figura 15.56: Extração dos valores de elevação para as nascentes de Rio Claro/SP. Além da extração dos valores totais, podemos resumir os valores dos pixels com a mesma operação de extração, utilizando ainda a função raster::extract(), mas utilizando uma função para resumir os valores dos pixels para um polígono, operação também denominada de estatística zonal (agora para vetores). Já vimos que ela pode ser realizada entre rasters na seção de operações-zonais, mas aqui a realizaremos para rasters e vetores. Para o exemplo, vamos calcular a elevação média dos valores para os hexágonos que criamos para o limite de Rio Claro/SP( Figura 15.57). ## Extração - estatística por zonas geo_vetor_rio_claro_sirgas2000_utm23s_hex_alt &lt;- geo_vetor_rio_claro_sirgas2000_utm23s_hex %&gt;% dplyr::mutate(elev_mean = raster::extract(x = geo_raster_srtm_rio_claro_sirgas2000_utm23s, y = geo_vetor_rio_claro_sirgas2000_utm23s_hex, fun = mean, na.rm = TRUE)) ## Plot plot(geo_vetor_rio_claro_sirgas2000_utm23s_hex_alt[&quot;elev_mean&quot;], pch = 20, main = NA, axes = TRUE, graticule = TRUE) Figura 15.57: Extração dos valores de elevação e resumo pela média para os hexágonos de Rio Claro/SP. 15.9.3.4 Conversões raster-vetor Por fim, podemos ainda fazer operações de conversão entre objetos vetoriais para raster e vice-versa. Nessas operações, podemos resumir ou transformar objetos vetoriais (pontos, linhas ou polígonos) para rasters, escolhendo um raster previamente existente, processo denominado rasterização. Também podemos realizar o processo inverso, i.e., transformar o raster em um vetor, podendo esse vetor ser um gride pontos, linhas ou polígonos, operação chamada de vetorização. 15.9.3.4.1 Rasterização A conversão de vetor para raster pode ser realizada de pontos para rasters. Nesse processo, podemos utilizar uma função para resumir os dados pontuais para os pixels do raster que criaremos. Para essa operação, podemos utilizar a função raster::rasterize(), com o argumento x sendo o vetor de pontos de entrada, y o raster base, field a coluna ou campo da tabela de atributos do objeto vetorial para os quais os valores serão utilizados e fun a função utilizada para agregação dos dados. Aqui, vamos contabilizar a quantidade de nascentes por pixel, utilizando como base o raster para o qual mudamos a resolução para 900 metros (15.58). ## Rasterizar pontos geo_vetor_nascentes_rasterizacao &lt;- raster::rasterize(x = geo_vetor_nascentes, y = geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, field = 1, fun = &quot;count&quot;) ## Plot plot(geo_vetor_nascentes_rasterizacao, col = viridis::viridis(10)) plot(geo_vetor_nascentes$geometry, pch = 20, cex = .5, col = adjustcolor(&quot;gray&quot;, .5), add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.58: Rasterização das nascentes, com a operação de contabilização de pontos para Rio Claro/SP. Além de pontos, podemos também rasterizar linhas. Aqui vamos contabilizar as linhas da hidrografia simplificada para Rio Claro/SP (Figura 15.59). ## Rasterizar linhas geo_vetor_hidrografia_rasterizacao &lt;- raster::rasterize( x = geo_vetor_hidrografia_simplificado, y = geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, field = 1, fun = &quot;count&quot;) ## Plot plot(geo_vetor_hidrografia_rasterizacao, col = viridis::viridis(10)) plot(geo_vetor_hidrografia_simplificado$geom, col = &quot;gray&quot;, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.59: Rasterização da hidrografia, com a operação de contabilização de linhas para Rio Claro/SP. Podemos ainda rasterizar polígonos, de modo que cada pixel do raster a ser criado receberáo valor da tabela de atributos, ou uma análise pelo vizinho mais próximo no caso de um campo categórico, como a cobertura da terra, que também vai depender da resolução do raster base e do tamanho da feição do polígono. Para nosso exemplo, antes de criar o raster vamos transforma a coluna de classe de cobertura da terra em factor (Figura 15.60). Entretanto, essa operação de rasterização tente a demorar muito no caso de polígonos muito detalhados ou um raster com pixels muito pequenos, sendo que dois pacotes aceleram esse processamento (fasterize e gdalUtils), com suas respectivas funções: fasterize::fasterize() e gdalUtils::gdal_rasterize(). ## Rasterizar polígonos geo_vetor_cobertura_rasterizacao &lt;- geo_vetor_cobertura %&gt;% dplyr::mutate(classe = as.factor(CLASSE_USO)) %&gt;% raster::rasterize(x = ., y = geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, field = &quot;classe&quot;) ## Plot plot(geo_vetor_cobertura_rasterizacao, col = viridis::viridis(10)) plot(geo_vetor_cobertura$geom, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.60: Rasterização da cobertura da terra para Rio Claro/SP. 15.9.3.4.2 Vetorização A operação inversa à rasterização é a vetorização, na qual converteremos um raster em um vetor, sendo que esse vetor receberá os valores dos pixels. O vetor em questão pode ser pontos (geralmente um gride de pontos), linhas (geralmente isolinhas ou linhas de contorno), ou polígonos (podendo esses polígonos ser ou não dissolvidos pelos valores dos pixels). Existem funções específicas para cada uma dessas conversões, sendo elas: raster::rasterToPoints(), raster::rasterToContour() e raster::rasterToPolygons(), respectivamente. Para a última função, ainda dispomos de uma alternativa mais veloz spex::polygonize(). Em nosso exemplo, vamos vetorizar o raster de elevação para Rio Claro/SP, criando um gride de pontos, sendo os pontos os centroides de cada pixels (Figura 15.61). ## Vetorização de pontos geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media_pontos &lt;- raster::rasterToPoints(geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, spatial = TRUE) %&gt;% sf::st_as_sf() ## Plot plot(geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, col = viridis::viridis(10, alpha = .8)) plot(geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media_pontos, pch = 20, cex = .7, main = FALSE, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.61: Vetorização do raster de elevação criando um gride de pontos para Rio Claro/SP. Nesse outro exemplo, vamos vetorizar o raster de elevação para Rio Claro/SP novamente, mas agora criando isolinhas 15.62). ## Vetorização de linhas geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media_linhas &lt;- raster::rasterToContour( x = geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media) %&gt;% sf::st_as_sf() ## Plot plot(geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, col = viridis::viridis(10, alpha = .8)) contour(geo_raster_srtm_rio_claro_sirgas2000_utm23s_agre_media, labcex = 1, main = FALSE, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.62: Vetorização do raster de elevação criando isolinhas para Rio Claro/SP. Por fim, vamos vetorizar o raster de cobertura da terra criado anteriormente para Rio Claro/SP, criando polígonos não dissolvendo e dissolvidos 15.63). ## Vetorização de polígonos geo_vetor_cobertura_rasterizacao_poligonos &lt;- raster::rasterToPolygons(geo_vetor_cobertura_rasterizacao) %&gt;% sf::st_as_sf() ## Vetorização de polígonos dissolvendo geo_vetor_cobertura_rasterizacao_poligonos_dissolvidos &lt;- raster::rasterToPolygons(geo_vetor_cobertura_rasterizacao, dissolve = TRUE) %&gt;% sf::st_as_sf() ## Plot old_par &lt;- par(mfrow = c(1, 2)) plot(geo_vetor_cobertura_rasterizacao, col = viridis::viridis(10)) plot(geo_vetor_cobertura_rasterizacao_poligonos$geometry, col = NA, border = &quot;gray&quot;, lwd = 1, main = FALSE, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) plot(geo_vetor_cobertura_rasterizacao, col = viridis::viridis(10)) plot(geo_vetor_cobertura_rasterizacao_poligonos_dissolvidos$geometry, col = NA, border = &quot;gray&quot;, lwd = 1, main = FALSE, add = TRUE) plot(geo_vetor_rio_claro_sirgas2000_utm23s$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) par(old_par) Figura 15.63: Vetorização do raster de cobertura da terra para Rio Claro/SP, não dissolvendo e dissolvendos os polígonos gerados. 15.10 Visualização de dados geoespaciais Um dos pontos finais de toda a análise envolvendo a manipulação de dados geoespaciais será a apresentação de um mapa com as informações de interesse espacializadas. Mas antes, é necessário ter conhecimento de alguns dos elementos principais para a composição de um mapa relativamente bem informativo. Além disso, o R nos permite criar tipos diferentes de mapas: estáticos, animados e interativos. Os mais comuns são os estáticos, mas podemos por vezes melhorar a apresentação dos dados geoespaciais criando mapas animados e/ou interativos, com o auxílio de páginas web. Por fim, veremos as melhores formas de exportar mapas para diferentes formatos. 15.10.1 Principais elementos de um mapa Um mapa pode ser composto de vários elementos, tendo estes o intuito de auxiliar a visualização e entendimento de seu conteúdo. Apesar disso, nem todos os elementos necessitam estar presentes em todos os layouts de mapas, sendo que os mesmos devem atendem à necessidade das representações, podendo ser muitas vezes omitidos. Os principais elementos de um mapa geralmente são compostos por: Mapa principal (ocupando quase toda a área da figura) Mapa secundário (geralmente muito menor que o mapa principal e com o intuito de mostrar a localização do mapa principal num contexto mais amplo, como país ou continente) Título (para resumir o intuito do mapa) Legenda (apresentando as informações detalhadas das classes ou escala de valores, geralmente identificando as cores e/ou texturas), Barra de escala (representando quantas unidades do mapa representam do mundo real) Indicador de orientação (Norte) (indicando o norte geográfico, podendo ser representado por uma flecha, bússola ou compasso) Gride de coordenadas (coordenadas presentes nas laterais) Descrição do CRS (indicando qual o CRS) Informações de origem (informações sobre a fonte dos dados representados no mapa) Além de outros elementos auxiliares (como elementos textuais e figuras extras) Podemos visualizar todos esses elementos resumidos na Figura 15.64. Figura 15.64: Principais elementos de um mapa. 15.10.2 Principais pacotes para a composição de mapas Há uma grande quantidade de pacotes para a composição de mapas no R. Aqui listamos os principais (Tabela 15.13). Tabela 15.13: Principais pacotes para composição de mapas no R. Pacote Descrição ggplot2 Cria visualizações de dados elegantes usando a gramática de gráficos ggspatial Estrutura de dados espaciais para ggplot2 ggmap Visualização espacial com ggplot2 tmap Mapas temáticos leaflet Cria mapas da web interativos com a biblioteca JavaScript ‘Leaflet’ plotly Cria gráficos interativos da Web por meio de ‘plotly.js’ cartography Cartografia temática googleway Cartografia temática mapview Acessa APIs do Google Maps para recuperar dados e mapas de plotagem rasterVis Visualização interativa de dados espaciais em R cartogram Métodos de visualização para dados raster mapsf Crie cartogramas com R geogrid Transforme polígonos geoespaciais em grades regulares ou hexagonais geofacet ‘ggplot2’ Utilitários de facetação para dados geoespaciais globe Plot 2D and 3D Views of the Earth, Including Major Coastline linemap Line Maps 15.10.3 Mapas estáticos Mapas estáticos são mapas simples e fixos para visualização de dados, sendo o tipo mais comum de saída visual. No início da composição de mapas no R, esse era o único tipo de mapa que a linguagem permitia produzir, principalmente utilizando o pacote sp (Pebesma e Bivand 2005). No entanto, com o advento de ferramentas de visualização dinâmicas no R, como componentes HTML, os mapas puderam ser compostos de forma dinâmica (animados e interativos). Neste tópico abordaremos funções simples para composição de mapas estáticos, como o plot(), além de pacotes para composição de mapas mais elaborados, como os pacotes ggplot2 (Wickham et al. 2020) e tmap (Tennekes 2021). 15.10.3.1 Função plot() A função genérica plot() é a maneira mais rápida de compor mapas estáticos utilizando objetos espaciais vetoriais e raster, funcionando para ambos os pacotes que apresentamos anteriormente (sf e raster). Apesar da simplicidade, essa função geralmente tende a criar mapas com relativa velocidade, nos auxiliando principalmente em fases iniciais de desenvolvimento de um projeto. Essa função oferece dezenas de argumentos em base R, permitindo alguns ajustes limitados, com resultados bastante interessantes. Como dito anteriormente, a função plot() vai funcionar diferentemente dependendo da classe do objeto espacial. Para objetos espaciais sf, a função vai plotar um mapa para cada coluna da tabela de atributos. Vamos usar de exemplo nosso mapa de geo_vetor_biomas mostrado com os principais elementos de um mapa, podendo inclusive selecionar apenas a coluna de características geoespaciais (geom). Primeiramente, vamos fazer o download dos dados de limites de geo_vetor_biomas, retirando os sistemas costeiros, usando o pacote geobr (Pereira and Goncalves 2021). ## Download de polígonos dos geo_vetor_biomas Brasileiros geo_vetor_biomas &lt;- geobr::read_biomes(showProgress = FALSE) %&gt;% dplyr::filter(name_biome != &quot;Sistema Costeiro&quot;) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_biomas Agora, quando utilizamos a função plot() para um objeto da classe sf, temos os três mapas, cada um indicando uma coluna da tabela de atritos (Figura 15.65). ## Plot plot(geo_vetor_biomas) Figura 15.65: Mapa feito com a função plot() de um objeto sf para os Biomas do Brasil. Selecionando as colunas desse objeto, podemos escolher a informação que queremos plotar, por exemplo, apenas a geometria geom. Além disso, podemos acrescentar os argumentos col para colorir e main para o título, além dos argumentos axes e graticule para adicionar as coordenadas e quadrículas, respectivamente. A legenda pode ser adicionada com a função legend() (Figura 15.66). ## Plot plot(geo_vetor_biomas$geom, col = c(&quot;darkgreen&quot;, &quot;orange&quot;, &quot;orange4&quot;, &quot;forestgreen&quot;, &quot;yellow&quot;, &quot;yellow3&quot;), main = &quot;Biomas do Brasil&quot;, axes = TRUE, graticule = TRUE) legend(x = -75, y = -20, pch = 15, cex = .7, pt.cex = 2.5, legend = geo_vetor_biomas$name_biome, col = c(&quot;darkgreen&quot;, &quot;orange&quot;, &quot;orange4&quot;, &quot;forestgreen&quot;, &quot;yellow&quot;, &quot;yellow3&quot;)) Figura 15.66: Mapa feito com a função plot() de um objeto vetor. Para a classe dos objetos espaciais raster, a função plot() vai plotar um mapa para o tipo RasterLayer e quantos mapas houverem no objeto e couberem no espaço de plot para RasterBrick e RasterStack. Além disso, para essas classes do objeto raster, essa função provê também uma legenda e uma escala de cores automática (“terrain”). Vamos fazer o mapa da camada raster de elevação para o limite do município de Rio Claro/SP (Figura 15.67). ## Plot plot(geo_raster_srtm_rio_claro) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) Figura 15.67: Mapa feito com a função plot() de um objeto raster com uma camada. Agora vamos plotar objetos da classe RasterStack, alterando a cor para “viridis,” usando a função viridis::viridis() do pacote homônimo. Vamos fazer o mapa de duas camadas raster bioclimáticas para o mundo (Figura 15.68). ## Plot plot(geo_raster_bioclim[[1:2]], col = viridis::viridis(10)) Figura 15.68: Mapa feito com a função plot() de um objeto raster com várias camadas. Para exportar esses mapas podemos utilizar as funções png() ou pdf(), indicando os argumentos para ter as configurações que desejamos, e finalizando com a função dev.off(). Vamos exportar, a título de exemplo, a última figura. ## Criar diretório dir.create(here::here(&quot;dados&quot;, &quot;mapas&quot;)) ## Exportar mapa png(filename = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;elev_rc.png&quot;), width = 20, height = 20, units = &quot;cm&quot;, res = 300) plot(geo_raster_srtm_rio_claro) plot(geo_vetor_rio_claro$geom, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) dev.off() 15.10.3.2 Pacotes ggplot2 e ggspatial Como discutimos no Capítulo 6 sobre gráficos, o pacote ggplot2 utiliza a gramática de gráficos para composição de figuras no R Wickham (2016b). Para cada classe de objeto geográfico há funções específicas para os dados: para objetos sf geom_sf() e para objetos raster geom_raster(). Além do pacote ggplot2, podemos utilizar o pacote ggspatial para acrescentar elementos geográficos como a barra de escala e o indicador de orientação (Norte), através das funções annotation_scale() e annotation_north_arrow(), respectivamente, além de outras funções específicas que não abordaremos nesta seção. A estrutura de composição das funções do pacote ggplot2 vai funcionar parecido com a estruturação de gráficos já vista no Capítulo 6, de modo que a cada função iremos utilizando o sinal de + para acrescentar outra camada. Indicaremos os dados com a função ggplot() e a coluna da tabela de atributos que queremos representar com a função aes(). Em seguida, utilizamos a função geom_sf() para indicar que trata-se de um objeto sf. Além dessas funções, podemos ainda fazer alterações nos mapas através das funções: scale_*() que vai alterar as características indicadas em aes(), coord_*() que vai alterar construção do mapa em relação às coordenadas, facet_*() que altera a disposição de vários mapas, e theme_*() e theme() que alterarão características relacionadas ao tema, como cores de fundo, fontes e legenda. Podemos ainda utilizar as funções annotate() para adicionar textos e labs() para alterar o texto do título, legenda e eixos. Vamos demonstrar esse funcionamento para compor o mapa de geo_vetor_biomas, apresentado no início desta seção (Figura 15.69). ## Plot mapa_vetor_biomas_ggplot2 &lt;- ggplot(data = geo_vetor_biomas) + aes(fill = name_biome) + geom_sf(color = &quot;black&quot;) + scale_fill_manual(values = c(&quot;darkgreen&quot;, &quot;orange&quot;, &quot;orange4&quot;, &quot;forestgreen&quot;, &quot;yellow&quot;, &quot;yellow3&quot;)) + annotation_scale(location = &quot;br&quot;) + annotation_north_arrow(location = &quot;br&quot;, which_north = &quot;true&quot;, pad_x = unit(0, &quot;cm&quot;), pad_y = unit(.5, &quot;cm&quot;), style = north_arrow_fancy_orienteering) + annotate(geom = &quot;text&quot;, label = &quot;CRS: SIRGAS2000/Geo&quot;, x = -38, y = -31, size = 2.5) + annotate(geom = &quot;text&quot;, label = &quot;Fonte: IBGE (2019)&quot;, x = -39, y = -32.5, size = 2.5) + labs(title = &quot;Biomas do Brasil&quot;, fill = &quot;Legenda&quot;, x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) + theme_bw() + theme(title = element_text(size = 15, face = &quot;bold&quot;), legend.title = element_text(size = 10, face = &quot;bold&quot;), legend.position = c(.15, .25), legend.background = element_rect(colour = &quot;black&quot;), axis.title = element_text(size = 10, face = &quot;plain&quot;)) mapa_vetor_biomas_ggplot2 Figura 15.69: Mapa de Biomas do Brasil com o pacote ggplot2. Para objetos raster, o uso do pacote ggplot2 para compor mapas requer um passo preliminar. Primeiramente, vamos criar um data frame com os dados do raster, com as linhas sendo os pixels e as colunas sendo as coordenadas centrais da longitude e latitude, além dos valores de cada camada em cada coluna. Esse passo pode ser realizado com a função raster::rasterToPoints(). Uma vez que temos esses dados organizados, podemos utilizar as funções ggplot() para indicar o data frame, e as colunas com a função aes(). Em seguida, utilizamos a função geom_raster() para indicar que trata-se de um objeto raster. Além dessas funções, podemos ainda utilizar as demais funções para alterar as características do mapa, como comentamos acima. Entretanto, devemos nos atentar para a função coord_*() e escolher aquela que vai fazer a construção do mapa em relação à coordenadas e resolução das células. Como exemplo, vamos compor o mapa de elevação para Rio Claro/SP, adicionando também o limite do município (Figura 15.70). ## Dados geo_raster_srtm_rio_claro_dados &lt;- raster::rasterToPoints(geo_raster_srtm_rio_claro) %&gt;% tibble::as_tibble() head(geo_raster_srtm_rio_claro_dados) #&gt; # A tibble: 6 × 3 #&gt; x y elevacao #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 -47.8 -22.2 859 #&gt; 2 -47.8 -22.2 856 #&gt; 3 -47.8 -22.2 856 #&gt; 4 -47.8 -22.2 856 #&gt; 5 -47.8 -22.2 853 #&gt; 6 -47.8 -22.2 852 ## Mapa mapa_srtm_rio_claro_ggplot2 &lt;- ggplot() + geom_raster(data = geo_raster_srtm_rio_claro_dados, aes(x = x, y = y, fill = elevacao)) + geom_sf(data = geo_vetor_rio_claro, color = &quot;red&quot;, fill = NA, size = 1.3) + scale_fill_viridis_c() + coord_sf() + annotation_scale(location = &quot;br&quot;, pad_x = unit(.5, &quot;cm&quot;), pad_y = unit(.7, &quot;cm&quot;),) + annotation_north_arrow(location = &quot;br&quot;, which_north = &quot;true&quot;, pad_x = unit(.4, &quot;cm&quot;), pad_y = unit(1.3, &quot;cm&quot;), style = north_arrow_fancy_orienteering) + annotate(geom = &quot;text&quot;, label = &quot;CRS: WGS84/Geo&quot;, x = -47.51, y = -22.53, size = 3) + labs(title = &quot;Elevação de Rio Claro/SP&quot;, fill = &quot;Elevação (m)&quot;, x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) + theme_bw() + theme(title = element_text(size = 15, face = &quot;bold&quot;), legend.title = element_text(size = 10, face = &quot;bold&quot;), legend.position = c(.2, .25), legend.background = element_rect(colour = &quot;black&quot;), axis.title = element_text(size = 10, face = &quot;plain&quot;), axis.text.y = element_text(angle = 90, hjust = .4)) mapa_srtm_rio_claro_ggplot2 Figura 15.70: Mapa raster com o pacote ggplot2. Para exportar mapas criados com o pacote ggplot2, podemos utilizar a função ggplot2::ggsave(), indicando os argumentos para ter as configurações que desejamos. Vamos exportar, a título de exemplo, a última figura. ## Exportar mapa ggplot2 ggsave(filename = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;srtm_rio_claro_ggplot2.png&quot;), plot = mapa_srtm_rio_claro_ggplot2, width = 20, height = 20, units = &quot;cm&quot;, dpi = 300) 15.10.3.3 Pacote tmap O pacote tmap é um pacote direcionado à criação de mapas temáticos, com uma sintaxe concisa que permite a criação de mapas com o mínimo de códigos, mas muito similar à sintaxe do pacote ggplot2 (Tennekes 2018). Ele também pode gerar mapas estáticos ou interativos usando o mesmo código, apenas mudando a forma de visualização com a função tmap_mode(), com o argumento mode igual a “plot” para estático e “view” para interativo. Por fim, o pacote tmap aceita diversas classes espaciais, incluindo objetos raster, de forma bastante simples. Mais sobre o pacote pode ser lido aqui. Novamente, atentar para a instalação extra em Linux e MacOS. Todas as funções do pacote tmap iniciam-se com tm_*, facilitando seu uso. A cada função iremos utilizar o sinal de + para acrescentar outra camada, da mesma forma que o pacote ggplot2. A principal função, em que todos os objetos espaciais são dados de entrada, é tm_shape(). A partir dela, podemos seguir com funções específicas para vizualização de objetos sf, como tm_polygons(), tm_borders(), tm_fill(), tm_lines(), tm_dots() ou tm_bubbles(); ou com funções para objetos raster como tm_raster(). Ainda há funções como tm_text() para representação de textos das colunas da tabela de atributos, e tm_scale_bar(), tm_compass() e tm_graticules(), para adicionar barra de escala, indicador de orientação (Norte) e gride de coordenadas, respectivamente. Por fim, a função tm_credits() adiciona um texto descritivo e a função tm_layout() faz diversas mudanças nos detalhes e apresentação do mapa. Uma funcionalidade muito interessante do pacote tmap é o uso da função tmaptools::palette_explorer() para escolher as paletas de cores disponíveis. Essa função requer que os pacotes shiny e shinyjs estejam instalados, e quando executada, retorna uma aba onde é possível editar e escolher algumas paletas de cores nativas do tmap. Diversos parâmetros podem ser acrescentados às funções de composição do tmap, mas não as detalharemos aqui, pois todas são descritas nos vignettes do pacote: tmap: get started! e tmap: version changes. Vamos seguir com a composição do mapa de geo_vetor_biomas para o Brasil apresentado no início dessa seção (Figura 15.71). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa mapa_vetor_biomas_tmap &lt;- tm_shape(geo_vetor_biomas, bbox = c(-74, -35, -27, 10)) + tm_polygons(col = &quot;name_biome&quot;, pal = c(&quot;darkgreen&quot;, &quot;orange&quot;, &quot;orange4&quot;, &quot;forestgreen&quot;, &quot;yellow&quot;, &quot;yellow3&quot;), border.col = &quot;black&quot;, title = &quot;Legenda&quot;) + tm_compass() + tm_scale_bar(text.size = .6) + tm_graticules(lines = FALSE) + tm_credits(&quot;CRS: SIRGAS2000/Geo&quot;, position = c(.63, .13)) + tm_credits(&quot;Fonte: IBGE (2019)&quot;, position = c(.63, .09)) + tm_layout(title = &quot;Biomas do Brasil&quot;, title.position = c(.25, .95), title.size = 1.8, title.fontface = &quot;bold&quot;, legend.frame = TRUE, legend.position = c(&quot;left&quot;, &quot;bottom&quot;), legend.title.fontface = &quot;bold&quot;) mapa_vetor_biomas_tmap Figura 15.71: Mapa de Biomas do Brasil com o pacote tmap. Além disso, o pacote tmap nos permite adicionar de forma simples um mapa secundário, provendo uma localização regional de interesse (Figura 15.72). ## Dados geo_vetor_am_sul &lt;- rnaturalearth::ne_countries(continent = &quot;South America&quot;) geo_vetor_brasil &lt;- rnaturalearth::ne_countries(country = &quot;Brazil&quot;) geo_vetor_biomas &lt;- geobr::read_biomes(showProgress = FALSE) %&gt;% dplyr::filter(name_biome != &quot;Sistema Costeiro&quot;) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_am_sul ecodados::geo_vetor_brasil ecodados::geo_vetor_biomas ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa secundário mapa_am_sul &lt;- tm_shape(geo_vetor_am_sul) + tm_polygons() + tm_shape(geo_vetor_brasil) + tm_polygons(col = &quot;gray50&quot;) ## Juntando os mapas mapa_vetor_biomas_tmap print(mapa_am_sul, vp = grid::viewport(.815, .875, wi = .2, he = .2)) Figura 15.72: Mapa vetorial primário e secundário com o pacote tmap. Como exemplo de mapa raster, vamos compor novamente o mapa de elevação para Rio Claro/SP, adicionando também o limite do município (Figura 15.73). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa mapa_srtm_rio_claro_tmap &lt;- tm_shape(geo_raster_srtm_rio_claro) + tm_raster(pal = &quot;viridis&quot;, title = &quot;Elevação (m)&quot;) + tm_shape(geo_vetor_rio_claro) + tm_borders(col = &quot;red&quot;, lwd = 2) + tm_compass(position = c(.9, .08)) + tm_scale_bar(text.size = .6, position = c(.67, 0)) + tm_graticules(lines = FALSE) + tm_credits(&quot;CRS: WGS84/Geo&quot;, position = c(.67, .06)) + tm_layout(title = &quot;Elevação Rio Claro/SP&quot;, title.size = 1, title.fontface = &quot;bold&quot;, legend.title.size = .7, legend.text.size = .6, legend.frame = TRUE, legend.position = c(.01, .01), legend.title.fontface = &quot;bold&quot;) mapa_srtm_rio_claro_tmap Figura 15.73: Mapa raster de elevação com o pacote tmap. Para exportar mapas criados com o pacote tmap podemos utilizar a função tmap::tmap_save(), indicando os argumentos para ter as configurações que desejamos. Vamos exportar, a título de exemplo, a última figura. ## Exportar mapa tmap tmap::tmap_save(tm = mapa_srtm_rio_claro_tmap, filename = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;srtm_rio_claro_tmap.png&quot;), width = 20, height = 20, units = &quot;cm&quot;, dpi = 300) 15.10.4 Mapas animados Podemos montar mapas facetados para mostrar como padrões espaciais variam ao longo do tempo, como por exemplo, os limites do Brasil ao longo dos anos (Figura 15.74). Entretanto essa a abordagem possui algumas desvantagens, de modo que as facetas podem ficar muito pequenas quando há muitas delas. ## Dados geo_vetor_brasil_anos &lt;- NULL for(i in c(1872, 1900, 1911, 1920, 1933, 1940, 1950, 1960, 1970, 1980, 1991, 2001, 2010, 2019)){ geo_vetor_brasil_anos &lt;- geobr::read_state(code_state = &quot;all&quot;, year = i, showProgress = FALSE) %&gt;% sf::st_geometry() %&gt;% sf::st_as_sf() %&gt;% dplyr::mutate(year = i) %&gt;% dplyr::bind_rows(geo_vetor_brasil_anos, .) } Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_brasil_anos ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa facetado mapa_brasil_tmap &lt;- tm_shape(geo_vetor_brasil_anos) + tm_polygons() + tm_facets(by = &quot;year&quot;, nrow = 4) mapa_brasil_tmap Figura 15.74: Mapa vetor facetado dos estados brasileiros ao longo do tempo com o pacote tmap. Uma solução é a composição de mapas animados. Apesar de dependerem da publicação digital, os mapas animados podem aprimorar relatórios físicos à medida que o vínculo a uma página da web contendo a versão animada torna-se simples. Existem várias maneiras de gerar animações em R, e uma forma é com o pacote gganimate e ggplot2. Entretanto, aqui veremos a criação de mapas animados com tmap. Podemos criar mapas animados alterando dois argumentos da função tm_facets(): trocando o by = year por along = year indicando o free.coords = FALSE Por fim, podemos exportar o mapa animado no formato de .gif utilizando a função tmap::tmap_animation(), indicando a taxa de atualização com o argumento delay (Figura 15.75). Alguns pacotes extras são requeridos dependendo do sistema operacional utilizado. ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa animado mapa_brasil_tmap_ani &lt;- tm_shape(geo_vetor_brasil_anos) + tm_polygons() + tm_facets(along = &quot;year&quot;, free.coords = FALSE) ## Exportar mapa tmap animado tmap::tmap_animation(tm = mapa_brasil_tmap_ani, filename = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;srtm_rio_claro_tmap_ani.gif&quot;), delay = 30) Figura 15.75: Mapa vetorial animado mostrando os estados brasileiros ao longo do tempo com o pacote tmap. 15.10.5 Mapas interativos Mapas interativos podem assumir muitas formas, sendo que a mais comum e útil é a capacidade de deslocar e ampliar qualquer parte de um conjunto de dados geoespaciais sobreposto em um “mapa da web.” Diversos pacotes nos permitem criar esse tipo de mapa, sendo os mais comuns o tmap, mapview e leaflet. É importante destacar ainda que esses mapas irão ser compostos numa janela especial de “Viewer.” 15.10.5.1 pacote tmap Um recurso exclusivo do tmap é sua capacidade de criar mapas estáticos e interativos usando o mesmo código. Os mapas podem ser visualizados interativamente em qualquer ponto mudando para o modo de visualização, usando a função tmap::tmap_mode(mode = \"view\") (Figura 15.76). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;view&quot;) ## Atribuir novo mapa interativo mapa_srtm_rio_claro_tmap_int &lt;- mapa_srtm_rio_claro_tmap Figura 15.76: Mapa vetorial interativo com o pacote tmap. Para exportar mapas interativos criados com o pacote tmap, podemos utilizar novamente a função tmap::tmap_save(), indicando a extensão como .html. ## Exportar mapa tmap interativo tmap::tmap_save(tm = mapa_srtm_rio_claro_tmap_int, filename = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;srtm_rio_claro_tmap_int.html&quot;)) 15.10.5.2 Pacote mapview O pacote mapview cria rapidamente mapas interativos simples com a função mapvew::mapview() (Figura 15.77). Entretanto, outras características podem ser mudadas para criar mapas bem mais elaborados, como pode ser visto através do site do pacote. ## Mapa mapa_srtm_rio_claro_mapview_int &lt;- mapview::mapview( geo_raster_srtm_rio_claro, col.regions = viridis::viridis(100)) Figura 15.77: Mapa vetorial interativo com o pacote mapview. Para exportar mapas interativos criados com o pacote mapview, podemos utilizar a função mapivew::mapshot(), indicando a extensão como .html. ## Exportar mapa mapview interativo mapview::mapshot(x = mapa_srtm_rio_claro_mapview_int, url = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;srtm_rio_claro_mapview_int.html&quot;)) 15.10.5.3 Pacote leaflet O leaflet é o pacote de mapeamento interativo mais utilizado e completo em R. Esse pacote fornece uma interface utilizando a biblioteca JavaScript e muitos argumentos podem ser compreendidos lendo a documentação da biblioteca original. Mapas interativos usando esse pacote são criados utilizando a função leaflet::leaflet(). O resultado dessa função é um objeto da classe leaflet, que pode ser alterado por outras funções deste pacote, permitindo que várias camadas e configurações de controle sejam adicionadas interativamente (Figura 15.78). Mais sobre o pacote leaflet pode ser consultado em seu site e CheatSheet. ## Paleta de cores pal &lt;- colorNumeric(viridis::viridis(10), raster::values(geo_raster_srtm_rio_claro)) ## Mapa mapa_srtm_rio_claro_leaflet_int &lt;- leaflet() %&gt;% addProviderTiles(&quot;CartoDB.Positron&quot;) %&gt;% addRasterImage(geo_raster_srtm_rio_claro, colors = pal, opacity = .8) %&gt;% addLegend(pal = pal, values = raster::values(geo_raster_srtm_rio_claro), title = &quot;Elevação (m)&quot;) %&gt;% addPolygons(data = geo_vetor_rio_claro, col = &quot;red&quot;, fill = NA) knitr::include_url(&quot;img/cap15_fig78.html&quot;) Figura 15.78: Mapa vetorial interativo com o pacote leaflet. Para exportar mapas interativos criados com o pacote leaflet, podemos utilizar novamente a função mapivew::mapshot(), indicando a extensão como .html. ## Exportar mapa leaflet interativo mapview::mapshot(x = mapa_srtm_rio_claro_leaflet_int, url = here::here(&quot;dados&quot;, &quot;mapas&quot;, &quot;srtm_rio_claro_leaflet_int.html&quot;)) 15.11 Exemplos de aplicações de análises geoespaciais para dados ecológicos Agora que vimos os principais conceitos e aplicações do manejo e visualização de dados geoespaciais, podemos avançar para realizar cinco exemplos de aplicações para dados ecológicos. Para isso, usaremos novamente os dados de comunidades de anfíbios da Mata Atlântica (Atlantic Amphibians, Vancine et al. (2018)). Primeiramente, veremos como resumir informações de biodiversidade (número de ocorrências e riqueza) para hexágonos. Num segundo momento veremos como associar dados ambientais a coordenadas de espécies ou comunidades. Depois como resumir dados de rasters para buffers. Como gerar rasters de dados tabulares. Por fim, realizaremos predições espaciais contínuas de adequabilidade de habitat e número de espécies. 15.11.1 Resumir informações de biodiversidade para unidades espaciais Resumir informações para unidades espaciais é um passo muito frequente em análises de Macroecologia, Biogeografia ou Ecologia da Paisagem. Nesta seção, contabilizaremos o número de ocorrências e riqueza de anfíbios para hexágonos na Mata Atlântica. Primeiramente, vamos importar e preparar os dados de biodiversidade que usaremos nesses exemplos. Vamos começar importando os locais de amostragens de anfíbios na Mata Atlântica e selecionando apenas as colunas de interesse. ## Importar locais geo_anfibios_locais &lt;- readr::read_csv( here::here(&quot;dados&quot;, &quot;tabelas&quot;, &quot;ATLANTIC_AMPHIBIANS_sites.csv&quot;), col_types = cols()) %&gt;% dplyr::select(id, longitude, latitude, species_number) Agora vamos importar as espécies das comunidades, selecionando apenas as espécies com nomes válidos e transformando a coluna de indivíduos para 1, para compor posteriormente uma matriz de comunidade de espécies. ## Importar espécies geo_anfibios_especies &lt;- readr::read_csv( here::here(&quot;dados&quot;, &quot;tabelas&quot;, &quot;ATLANTIC_AMPHIBIANS_species.csv&quot;), col_types = cols()) %&gt;% tidyr::drop_na(valid_name) %&gt;% dplyr::select(id, valid_name, individuals) %&gt;% dplyr::distinct(id, valid_name, .keep_all = TRUE) %&gt;% dplyr::mutate(individuals = tidyr::replace_na(individuals, 1), individuals = ifelse(individuals &gt; 0, 1, 1)) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_anfibios_locais ecodados::geo_anfibios_especies Podemos agora juntar a tabela de locais, que possui as coordenadas à tabela de espécies. Em seguida convertemos essa única tabela na classe vetor sf. ## Junção das coordenadas e conversão para classe sf geo_anfibios_especies_locais_vetor &lt;- geo_anfibios_especies %&gt;% dplyr::left_join(geo_anfibios_locais, by = &quot;id&quot;) %&gt;% dplyr::relocate(longitude, latitude, .after = 1) %&gt;% dplyr::mutate(lon = longitude, lat = latitude) %&gt;% sf::st_as_sf(coords = c(&quot;lon&quot;, &quot;lat&quot;), crs = 4326) Agora vamos baixar o limite do Bioma da Mata Atlântica para o Brasil, converter o GCS para WGS84/Geo e ajustar sua extensão para remover as ilhas no Oceano Atlântico. ## Download do Bioma da Mata Atlântica geo_vetor_mata_atlantica &lt;- geobr::read_biomes(year = 2019, showProgress = FALSE) %&gt;% dplyr::filter(name_biome == &quot;Mata Atlântica&quot;) %&gt;% sf::st_transform(crs = 4326) %&gt;% sf::st_crop(xmin = -55, ymin = -30, xmax = -34, ymax = -5) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_vetor_mata_atlantica Podemos verificar se as coordenadas e o limite do bioma estão todos corretos compondo um mapa preliminar, usando o pacote tmap (Figura 15.79). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa tm_shape(geo_vetor_mata_atlantica, bbox = geo_anfibios_especies_locais_vetor) + tm_polygons() + tm_shape(geo_anfibios_especies_locais_vetor) + tm_dots(size = .1, col = &quot;forestgreen&quot;) Figura 15.79: Mapa dos locais do Atlantic Amphibians e do limite da Mata Atlântica. Como o limite utilizado para reunir informações das comunidades de anfíbios foi o mais abrangente possível (Muylaert et al. (2018), Vancine et al. (2018)), selecionaremos apenas os locais que caem dentro do limite da Mata Atlântica que estamos utilizando aqui. ## Selecionar os locais dentro do limite geo_anfibios_especies_locais_vetor_mata_atlantica &lt;- geo_anfibios_especies_locais_vetor[geo_vetor_mata_atlantica, ] Podemos refazer o mapa mostrando as coordenadas retiradas em vermelho e as que ficaram em verde (Figura 15.80). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa tm_shape(geo_vetor_mata_atlantica, bbox = geo_anfibios_especies_locais_vetor) + tm_polygons() + tm_shape(geo_anfibios_especies_locais_vetor) + tm_bubbles(size = .1, col = &quot;red&quot;) + tm_shape(geo_anfibios_especies_locais_vetor_mata_atlantica) + tm_bubbles(size = .1, col = &quot;forestgreen&quot;) Figura 15.80: Mapa dos locais do Atlantic Amphibians que caem dentro do limite da Mata Atlântica. O próximo passo é criar um gride de hexágonos para o Bioma da Mata Atlântica. Usaremos a função sf::st_make_grid() que pode criar quadrículas ou hexágonos. Esses hexágonos terão a área equivalente à quadrículas de 1º de tamanho (aproximadamente 110 km²). Usaremos a função sf::st_area() para calcular as áreas dos hexágonos e a função tibble::rowid_to_column() para criar uma identificação para cada feição. ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Criar hexágonos de ~110 km geo_vetor_mata_atlantica_hex &lt;- sf::st_make_grid( x = geo_vetor_mata_atlantica, cellsize = 1, square = FALSE) %&gt;% sf::st_as_sf() %&gt;% dplyr::mutate(areakm2 = sf::st_area(.)/1e6) %&gt;% tibble::rowid_to_column(&quot;id_hex&quot;) ## Selecionar os hexágonos dentro do limite da Mata Atlântica geo_vetor_mata_atlantica_hex &lt;- geo_vetor_mata_atlantica_hex[geo_vetor_mata_atlantica, ] Podemos conferir os hexágonos criados fazendo um mapa preliminar (Figura 15.81). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa tm_shape(geo_vetor_mata_atlantica, bbox = geo_vetor_mata_atlantica_hex) + tm_polygons() + tm_shape(geo_vetor_mata_atlantica_hex) + tm_borders() Figura 15.81: Mapa dos hexágonos para o limite da Mata Atlântica. Podemos ser mais restritos e selecionar apenas os hexágonos dentro do limite do Bioma da Mata Atlântica utilizando o operador st_within() (Figura 15.82. ## Selecionar os hexágonos totalmente dentro do limite da Mata Atlântica geo_vetor_mata_atlantica_hex_total &lt;- geo_vetor_mata_atlantica_hex[geo_vetor_mata_atlantica, , op = st_within] ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa tm_shape(geo_vetor_mata_atlantica, bbox = geo_vetor_mata_atlantica_hex) + tm_polygons() + tm_shape(geo_vetor_mata_atlantica_hex_total) + tm_borders() Figura 15.82: Mapa dos hexágonos totalmente dentro do limite da Mata Atlântica. Podemos agora associar as espécies aos hexágonos fazendo um “join” espacial, utilizando a função sf::st_join(). ## Junção espacial dos locais com os hexágonos geo_vetor_mata_atlantica_hex_especies &lt;- sf::st_join( x = geo_vetor_mata_atlantica_hex, y = geo_anfibios_especies_locais_vetor_mata_atlantica, left = TRUE) Por fim, podemos agregar os dados para ter o número de ocorrências e de espécies por hexágono. ## Agregar dados de ocorrências e número de espécies por hexágono geo_vetor_mata_atlantica_hex_especies_oco_riq &lt;- geo_vetor_mata_atlantica_hex_especies %&gt;% dplyr::group_by(id_hex) %&gt;% dplyr::summarise(ocorrencias = length(valid_name[!is.na(valid_name)]), riqueza = n_distinct(valid_name, na.rm = TRUE)) Finalmente podemos compor os mapas finais, mostrando os hexágonos com cores e valores do número de ocorrências e de espécies 15.83). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa de ocorrências mapa_oco &lt;- tm_shape(geo_vetor_mata_atlantica_hex_especies_oco_riq) + tm_polygons(title = &quot;Ocorrência de anfíbios&quot;, col = &quot;ocorrencias&quot;, pal = &quot;viridis&quot;, style = &quot;pretty&quot;) + tm_text(&quot;ocorrencias&quot;, size = .4) + tm_graticules(lines = FALSE) + tm_compass() + tm_scale_bar() + tm_layout(legend.title.size = 2, legend.title.fontface = &quot;bold&quot;, legend.position = c(&quot;left&quot;, &quot;top&quot;)) ## Mapa de riqueza mapa_riq &lt;- tm_shape(geo_vetor_mata_atlantica_hex_especies_oco_riq) + tm_polygons(title = &quot;Riqueza de anfíbios&quot;, col = &quot;riqueza&quot;, pal = &quot;viridis&quot;, style = &quot;pretty&quot;) + tm_text(&quot;riqueza&quot;, size = .4) + tm_graticules(lines = FALSE) + tm_compass() + tm_scale_bar() + tm_layout(legend.title.size = 2, legend.title.fontface = &quot;bold&quot;, legend.position = c(&quot;left&quot;, &quot;top&quot;)) ## União dos mapas tmap_arrange(mapa_oco, mapa_riq) Figura 15.83: Mapa com o número de ocorrências e riqueza de anfíbios para hexágonos no limite da Mata Atlântica. 15.11.2 Extrair dados raster para pontos Atribuir informações ambientais a ocorrências é um passo fundamental para diversas análises. Nesta seção, atribuiremos os valores das variáveis bioclimáticas aos locais de amostragem de anfíbios na Mata Atlântica. Já realizamos o download das variáveis bioclimáticas na seção de raster. Vamos importar novamente esses dados, primeiramente listando as camadas e depois importando com a função raster:stack(). ## Listar arquivos arquivos_raster &lt;- dir(path = here::here(&quot;dados&quot;, &quot;raster&quot;), pattern = &quot;wc&quot;) %&gt;% grep(&quot;.tif&quot;, ., value = TRUE) ## Importar rasters geo_raster_bioclim &lt;- raster::stack(here::here(&quot;dados&quot;, &quot;raster&quot;, arquivos_raster)) ## Renomear rasters names(geo_raster_bioclim) &lt;- c(&quot;bio01&quot;, paste0(&quot;bio&quot;, 10:19), paste0(&quot;bio0&quot;, 2:9)) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_raster_bioclim Da seção anterior, já temos o objeto com a tabela de coordenadas dos locais de amostragem das comunidades de anfíbios. Vamos agora criar um objeto vetorial das coordenadas e em seguida selecionar os locais dentro do limite do bioma da Mata Atlântica. ## Importar locais e converter em sf geo_anfibios_locais_vetor &lt;- geo_anfibios_locais %&gt;% dplyr::mutate(lon = longitude, lat = latitude) %&gt;% sf::st_as_sf(coords = c(&quot;lon&quot;, &quot;lat&quot;), crs = 4326) geo_anfibios_locais_vetor #&gt; Simple feature collection with 1163 features and 4 fields #&gt; Geometry type: POINT #&gt; Dimension: XY #&gt; Bounding box: xmin: -56.74194 ymin: -33.51083 xmax: -34.79667 ymax: -3.51525 #&gt; Geodetic CRS: WGS 84 #&gt; # A tibble: 1,163 × 5 #&gt; id longitude latitude species_number geometry #&gt; * &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;POINT [°]&gt; #&gt; 1 amp1001 -43.4 -8.68 19 (-43.42194 -8.68) #&gt; 2 amp1002 -38.9 -3.55 16 (-38.85783 -3.545527) #&gt; 3 amp1003 -38.9 -3.57 14 (-38.88869 -3.574194) #&gt; 4 amp1004 -38.9 -3.52 13 (-38.9188 -3.51525) #&gt; 5 amp1005 -38.9 -4.28 30 (-38.91083 -4.280556) #&gt; 6 amp1006 -36.4 -9.23 42 (-36.42806 -9.229167) #&gt; 7 amp1007 -40.9 -3.85 23 (-40.89444 -3.846111) #&gt; 8 amp1008 -40.9 -3.83 19 (-40.91944 -3.825833) #&gt; 9 amp1009 -40.9 -3.84 13 (-40.91028 -3.8375) #&gt; 10 amp1010 -35.2 -6.14 1 (-35.22944 -6.136944) #&gt; # … with 1,153 more rows Usaremos agora a função raster::extract() para extrair e associar os valores das variáveis bioclimáticas para os locais de amostragem. ## Extrair valores das variáveis para os locais geo_anfibios_locais_vetor_bioclim &lt;- geo_anfibios_locais_vetor %&gt;% dplyr::mutate(raster::extract(geo_raster_bioclim, ., df = TRUE)) %&gt;% dplyr::select(-ID) %&gt;% dplyr::relocate(bio02:bio09, .after = bio01) Podemos ver esses dados na Tabela 15.14. Tabela 15.14: Dados extraídos e atribuídos aos locais de amostragens de comunidades de anfíbios na Mata Atlântica id longitude latitude species_number bio01 bio02 bio03 bio04 bio05 amp1001 -43.42194 -8.680000 19 24.88622 12.842188 76.28720 84.54608 33.17875 amp1002 -38.85783 -3.545527 16 26.43918 7.802419 78.70332 59.72862 31.37876 amp1003 -38.88869 -3.574194 14 26.43918 7.802419 78.70332 59.72862 31.37876 amp1004 -38.91880 -3.515250 13 26.43918 7.802419 78.70332 59.72862 31.37876 amp1005 -38.91083 -4.280556 30 22.52411 8.434667 73.76507 64.62517 28.08925 amp1006 -36.42806 -9.229167 42 21.61951 8.110271 67.74083 147.67953 27.98150 Podemos ainda fazer alguns mapas para espacializar essas variáveis (Figura 15.84). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa geo_anfibios_locais_vetor_bioclim %&gt;% dplyr::select(bio01:bio06) %&gt;% tidyr::gather(var, val, -geometry) %&gt;% tm_shape() + tm_bubbles(size = .1, col = &quot;val&quot;, pal = &quot;viridis&quot;) + tm_facets(&quot;var&quot;, free.scales = TRUE) + tm_layout(legend.outside = FALSE) Figura 15.84: Mapa mostrando os valores das variáveis bioclimáticas (BIO01:BIO06) para os locais amostrados de comunidades de anfíbios para hexágonos no limite da Mata Atlântica. 15.11.3 Resumir dados de rasters para buffers Muitas análises requerem que façamos um resumo da composição da paisagem para buffers, sendo o buffer uma unidade de análise espacial no entorno de um ponto de amostragem. Aqui, usaremos os dados do GlobCover v.2.3 de 2009 (Arino et al. 2012) como raster de cobertura da terra. O arquivo é grande (~400 Mb) e pode demorar muito, dependendo da velocidade da internet. ## Aumentar o tempo de download options(timeout = 1e5) ## Download dos dados do GlobCover download.file(url = &quot;http://due.esrin.esa.int/files/Globcover2009_V2.3_Global_.zip&quot;, destfile = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;Globcover2009_V2.3_Global.zip&quot;), mode = &quot;wb&quot;, extra = &quot;c&quot;) ## Unzip unzip(zipfile = here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;Globcover2009_V2.3_Global.zip&quot;), exdir = here::here(&quot;dados&quot;, &quot;raster&quot;)) Caso o download não funcione ou haja problemas com a importação, disponibilizamos os dados também no pacote ecodados. ## Importar os dados pelo pacote ecodados ecodados::geo_raster_globcover Depois de fazer o download, vamos importar e ajustar esse raster para o limite da Mata Atlântica (Figura 15.85). ## Importar raster do GlobCover geo_raster_globcover &lt;- raster::raster( here::here(&quot;dados&quot;, &quot;raster&quot;, &quot;GLOBCOVER_L4_200901_200912_V2.3.tif&quot;)) ## Ajustar para o limite do bioma da Mata Atlântica geo_raster_globcover_mata_atlantica &lt;- geo_raster_globcover %&gt;% raster::crop(geo_vetor_mata_atlantica) %&gt;% raster::mask(geo_vetor_mata_atlantica) geo_raster_globcover_mata_atlantica #&gt; class : RasterLayer #&gt; dimensions : 8940, 7274, 65029560 (nrow, ncol, ncell) #&gt; resolution : 0.002777778, 0.002777778 (x, y) #&gt; extent : -54.99861, -34.79306, -29.98194, -5.148611 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : GLOBCOVER_L4_200901_200912_V2.3 #&gt; values : 14, 220 (min, max) # Plot plot(geo_raster_globcover_mata_atlantica, col = viridis::viridis(n = 200)) Figura 15.85: Camada raster do GlobCover 2.3 para o Bioma da Mata Atlântica. Vamos agora transformar a tabela de locais em vetor, selecionar aleatoriamente 50 amostragens das comunidades de anfíbios e criar buffers de ~10 km. ## Fixar a amostragem set.seed(42) ## Pontos geo_anfibios_especies_locais_vetor_mata_atlantica &lt;- geo_anfibios_locais %&gt;% sf::st_as_sf(coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) %&gt;% dplyr::filter(sf::st_intersects(x = ., y = geo_vetor_mata_atlantica, sparse = FALSE)) %&gt;% dplyr::slice_sample(n = 50) ## Buffers de ~10 km geo_anfibios_especies_locais_vetor_mata_atlantica_buffer10km &lt;- sf::st_buffer(geo_anfibios_especies_locais_vetor_mata_atlantica, dist = .08333) Podemos conferir no mapa da Figura 15.86. ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa tm_shape(geo_vetor_mata_atlantica) + tm_polygons() + tm_shape(geo_anfibios_especies_locais_vetor_mata_atlantica_buffer10km) + tm_bubbles(size = .3, border.col = &quot;red&quot;, alpha = 0) + tm_shape(geo_anfibios_especies_locais_vetor_mata_atlantica) + tm_dots(size = .01, col = &quot;forestgreen&quot;) Figura 15.86: Distribuição de 50 localidades aleatórios e buffers de ~10 km (fora de escala). Agora podemos utilizar a função raster::extract() para fazer a contabilização, já em porcentagem, de pixels de cada classe para cada buffer. ## Estatística zonal geo_anfibios_locais_vetor_ma_buffer10km_ext &lt;- raster::extract( x = geo_raster_globcover_mata_atlantica, y = geo_anfibios_especies_locais_vetor_mata_atlantica_buffer10km, fun = function(i,...) table(i), na.rm = TRUE) %&gt;% dplyr::bind_rows() %&gt;% dplyr::mutate(across(everything(), ~replace_na(.x, 0))) %&gt;% dplyr::rename_with(~paste0(&quot;cover_&quot;, .)) %&gt;% dplyr::mutate(across(everything(), as.numeric)) %&gt;% dplyr::bind_cols(id = geo_anfibios_especies_locais_vetor_mata_atlantica_buffer10km$id, .) %&gt;% janitor::adorn_totals(&quot;col&quot;) %&gt;% janitor::adorn_percentages(&quot;row&quot;) %&gt;% janitor::adorn_pct_formatting(rounding = &quot;half up&quot;, digits = 1) head(geo_anfibios_locais_vetor_ma_buffer10km_ext) #&gt; id cover_40 cover_20 cover_30 cover_14 cover_50 cover_130 cover_120 Total #&gt; amp1716 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; amp1351 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; amp1168 0.0% 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; amp1085 0.0% 0.0% 0.0% 100.0% 0.0% 0.0% 0.0% 100.0% #&gt; amp1258 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; amp1160 0.0% 0.0% 0.0% 0.0% 100.0% 0.0% 0.0% 100.0% Agora podemos juntar esses dados aos dados dos buffers. ## Junção geo_anfibios_locais_vetor_ma_buffer10km_ext_join &lt;- dplyr::left_join( x = geo_anfibios_especies_locais_vetor_mata_atlantica_buffer10km, y = geo_anfibios_locais_vetor_ma_buffer10km_ext, by = &quot;id&quot;) %&gt;% sf::st_drop_geometry() geo_anfibios_locais_vetor_ma_buffer10km_ext_join #&gt; # A tibble: 50 × 10 #&gt; id species_number cover_40 cover_20 cover_30 cover_14 cover_50 cover_130 cover_120 Total #&gt; * &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 amp1716 10 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; 2 amp1351 16 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; 3 amp1168 19 0.0% 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; 4 amp1085 20 0.0% 0.0% 0.0% 100.0% 0.0% 0.0% 0.0% 100.0% #&gt; 5 amp1258 3 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; 6 amp1160 9 0.0% 0.0% 0.0% 0.0% 100.0% 0.0% 0.0% 100.0% #&gt; 7 amp1843 14 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; 8 amp1060 8 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; 9 amp1141 5 0.0% 0.0% 0.0% 100.0% 0.0% 0.0% 0.0% 100.0% #&gt; 10 amp1333 7 0.0% 100.0% 0.0% 0.0% 0.0% 0.0% 0.0% 100.0% #&gt; # … with 40 more rows 15.11.4 Predições espaciais de objetos raster O pacote raster além de permitir realizar manejo e visualização de dados raster no R, também permite a extrapolação do ajuste de análises, como GLMs, GAMs dentre outras. Aqui, faremos uma pequena demostração utilizando a função raster::predict(), predizendo o resultado de dois ajustes de GLMs para a presença/ausência de uma espécie de anuro e a extrapolação do número de espécies de anfíbios para o Bioma da Mata Atlântica. Para ajustar um GLM para dados de presença/ausência, podemos usar a tabela já criada anteriormente, com as espécies e as coordenadas, e fazer uma junção com a última tabela que criamos com os dados bioclimáticos. ## Junção dos dados ambientais aos dados de espécies geo_anfibios_locais_especies_vetor_bioclim &lt;- geo_anfibios_especies %&gt;% dplyr::left_join(., sf::st_drop_geometry(geo_anfibios_locais_vetor_bioclim), by = &quot;id&quot;) Agora, vamos selecionar ocorrências da espécie Haddadus binotatus, atribuindo 1 quando ela ocorre e 0 quando ela não ocorre. Essa espécie é relativamente comum na serrapilheira de florestas da Mata Atlântica, e recebe esse nome em homenagem a um grande pesquisador de anfíbios da Mata Atlântica, o Prof. Célio Fernando Baptista Haddad. ## Seleção da espécie Haddadus binotatus geo_anfibios_locais_especies_vetor_bioclim_hb &lt;- geo_anfibios_locais_especies_vetor_bioclim %&gt;% dplyr::mutate(pa = ifelse(valid_name == &quot;Haddadus binotatus&quot;, 1, 0), .after = individuals) %&gt;% dplyr::distinct(id, .keep_all = TRUE) Vamos utilizar apenas as variáveis não correlacionadas para o índice de correlação de Pearson para r &lt; 0,7. ## Correlação entre as variáveis corr &lt;- geo_anfibios_locais_especies_vetor_bioclim_hb %&gt;% dplyr::select(bio01:bio19) %&gt;% cor() %&gt;% caret::findCorrelation(.7, names = TRUE) ## Seleção das variáveis não correlacionadas geo_anfibios_locais_especies_vetor_bioclim_hb_cor &lt;- geo_anfibios_locais_especies_vetor_bioclim_hb %&gt;% dplyr::select(pa, bio01:bio19) %&gt;% dplyr::select(-c(corr)) Agora sim, podemos ajustar um modelo simples da presença e ausência dessa espécie, utilizando as variáveis não correlacionadas, através de um GLM para a família binomial (para mais detalhes volte para o Capítulo 8). ## Ajustar um modelo GLM binomial modelo_pa &lt;- glm(formula = pa ~ ., data = geo_anfibios_locais_especies_vetor_bioclim_hb_cor, family = binomial(&quot;logit&quot;)) summary(modelo_pa) #&gt; #&gt; Call: #&gt; glm(formula = pa ~ ., family = binomial(&quot;logit&quot;), data = geo_anfibios_locais_especies_vetor_bioclim_hb_cor) #&gt; #&gt; Deviance Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.59893 -0.22536 -0.09970 -0.04346 2.93828 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error z value Pr(&gt;|z|) #&gt; (Intercept) 7.961169 5.885169 1.353 0.17614 #&gt; bio02 -0.707206 0.268418 -2.635 0.00842 ** #&gt; bio03 -0.037839 0.083800 -0.452 0.65160 #&gt; bio10 -0.008583 0.122100 -0.070 0.94396 #&gt; bio12 -0.001870 0.004048 -0.462 0.64417 #&gt; bio13 0.017527 0.016417 1.068 0.28569 #&gt; bio14 0.115063 0.057971 1.985 0.04716 * #&gt; bio18 -0.002555 0.004139 -0.617 0.53700 #&gt; bio19 -0.042563 0.014557 -2.924 0.00346 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; (Dispersion parameter for binomial family taken to be 1) #&gt; #&gt; Null deviance: 241.10 on 1154 degrees of freedom #&gt; Residual deviance: 196.64 on 1146 degrees of freedom #&gt; AIC: 214.64 #&gt; #&gt; Number of Fisher Scoring iterations: 10 Antes de fazermos a predição da distribuição potencial da espécie é fundamental que o objeto raster esteja ajustado para o limite da Mata Atlântica. Para isso vamos utilizar as funções raster::crop() e raster::mask() para fazer esse ajuste 15.87). ## Ajuste da extensão e limite geo_raster_bioclim_mata_atlantica &lt;- geo_raster_bioclim %&gt;% raster::crop(geo_vetor_mata_atlantica) %&gt;% raster::mask(geo_vetor_mata_atlantica) ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa tm_shape(geo_raster_bioclim_mata_atlantica[[c(1, 4)]]) + tm_raster(pal = &quot;viridis&quot;, title = c(&quot;bio01&quot;, &quot;bio12&quot;)) + tm_facets(free.scales.raster = TRUE) Figura 15.87: Mapa de dois rasters (BIO01 e BIO12) ajustados ao limite da Mata Atlântica. Agora podemos fazer a predição desse modelo para todo o Bioma da Mata Atlântica. Essa função vai utilizar os coeficientes do modelo ajustado para gerar um raster de predição para todos os pixels da Mata Atlântica. Vamos usar o argumento type = \"response\" para que os valores da predição sejam ajustados a 0 a 1. ## Predições modelo_pa_pred &lt;- raster::predict( object = geo_raster_bioclim_mata_atlantica, model = modelo_pa, type = &quot;response&quot;) modelo_pa_pred #&gt; class : RasterLayer #&gt; dimensions : 149, 121, 18029 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -55, -34.83333, -30, -5.166667 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : layer #&gt; values : 1.255833e-12, 0.1983049 (min, max) Por fim, no último passo podemos tornar esse modelo binário, ou seja, apenas com valores 0 ou 1. Para isso vamos adotar arbitrariamente o valor de 0,01 como ponto de corte. A partir desse valor consideraremos o pixels acima como 1 e abaixo como 0. ## Seleção dos pixels de presença/ausência potencial modelo_pa_pred_corte &lt;- modelo_pa_pred &gt;= .01 Por fim, vamos produzir dois mapas mostrando os valores das predições, o mapa binário e as ocorrências da espécie 15.88). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa de predição contínua mapa_pa_pred_cont &lt;- tm_shape(modelo_pa_pred) + tm_raster(title = &quot;Predição contínua&quot;, pal = &quot;viridis&quot;) + tm_graticules(lines = FALSE) + tm_compass() + tm_scale_bar() + tm_layout(legend.title.size = 2, legend.title.fontface = &quot;bold&quot;, legend.position = c(&quot;left&quot;, &quot;top&quot;)) ## Mapa de predição binária mapa_pa_pred_corte &lt;- tm_shape(modelo_pa_pred_corte) + tm_raster(title = &quot;Predição binária&quot;, pal = c(&quot;#440154&quot;, &quot;#fde725&quot;), labels = c(&quot;Potencialmente ausente&quot;, &quot;Potencialmente presente&quot;)) + tm_graticules(lines = FALSE) + tm_compass() + tm_scale_bar() + tm_layout(legend.title.size = 2, legend.title.fontface = &quot;bold&quot;, legend.position = c(&quot;left&quot;, &quot;top&quot;)) ## União dos mapas tmap_arrange(mapa_pa_pred_cont, mapa_pa_pred_corte) Figura 15.88: Mapa da predição contínua e binária do modelo ajustado para a presença/ausência da espécie Haddadus binotatus na Mata Atlântica e suas ocorrências. Em nossa segunda análise, vamos predizer os dados de riqueza para todo o bioma da Mata Atlântica. Para isso, temos de retirar novamente as variáveis correlacionadas. ## Correlação corr &lt;- geo_anfibios_locais_vetor_bioclim %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(bio01:bio19) %&gt;% cor() %&gt;% caret::findCorrelation(.7, names = TRUE) ## Seleção das variáveis não correlacionadas geo_anfibios_locais_bioclim_cor &lt;- geo_anfibios_locais_vetor_bioclim %&gt;% sf::st_drop_geometry() %&gt;% dplyr::select(species_number, bio01:bio19) %&gt;% dplyr::select(-c(corr)) Agora sim, podemos criar os GLMs com famílias de distribuição apropriadas para dados de contagem como Poisson e Binomial Negativa. ## Modelo Poisson modelo_riq_pois &lt;- glm( formula = species_number ~ ., data = geo_anfibios_locais_bioclim_cor, family = poisson) ## Modelo Binomial Negativo modelo_riq_nb &lt;- MASS::glm.nb( formula = species_number ~ ., data = geo_anfibios_locais_bioclim_cor) Com os modelos ajustados, podemos fazer as predições utilizando os objetos raster com as variáveis ambientais. ## Predição do modelo Poisson modelo_riq_pois_pred &lt;- raster::predict( object = geo_raster_bioclim_mata_atlantica, model = modelo_riq_pois, type = &quot;response&quot;) modelo_riq_pois_pred #&gt; class : RasterLayer #&gt; dimensions : 149, 121, 18029 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -55, -34.83333, -30, -5.166667 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : layer #&gt; values : 8.249131, 24.76082 (min, max) ## Predição do modelo Binomial Negativo modelo_riq_nb_pred &lt;- raster::predict( object = geo_raster_bioclim_mata_atlantica, model = modelo_riq_nb, type = &quot;response&quot;) modelo_riq_nb_pred #&gt; class : RasterLayer #&gt; dimensions : 149, 121, 18029 (nrow, ncol, ncell) #&gt; resolution : 0.1666667, 0.1666667 (x, y) #&gt; extent : -55, -34.83333, -30, -5.166667 (xmin, xmax, ymin, ymax) #&gt; crs : +proj=longlat +datum=WGS84 +no_defs #&gt; source : memory #&gt; names : layer #&gt; values : 9.262095, 24.45297 (min, max) Por fim, podemos compor os dois mapas de predições (Figura 15.89). ## Mudar o modo de exibição do tmap tmap::tmap_mode(mode = &quot;plot&quot;) ## Mapa da predição Poisson mapa_pred_riq_pois &lt;- tm_shape(modelo_riq_pois_pred) + tm_raster(title = &quot;Número de espécies (Poisson)&quot;, pal = &quot;viridis&quot;) + tm_graticules(lines = FALSE) + tm_compass() + tm_scale_bar() + tm_layout(legend.title.size = 2, legend.title.fontface = &quot;bold&quot;, legend.position = c(&quot;left&quot;, &quot;top&quot;)) ## Mapa predição Binomial Negativo mapa_pred_riq_nb &lt;- tm_shape(modelo_riq_nb_pred) + tm_raster(title = &quot;Número de espécies (Binomial Negativa)&quot;, pal = &quot;viridis&quot;) + tm_graticules(lines = FALSE) + tm_compass() + tm_scale_bar() + tm_layout(legend.title.size = 2, legend.title.fontface = &quot;bold&quot;, legend.position = c(&quot;left&quot;, &quot;top&quot;)) ## União dos mapas tmap_arrange(mapa_pred_riq_pois, mapa_pred_riq_nb) Figura 15.89: Mapa da predição de riqueza utilizando o modelo Poisson e Binomial Negativa para a Mata Atlântica. 15.12 Para se aprofundar Listamos aqui as principais referências sobre manipulação, visualização de dados geoespaciais e análises geoespaciais no R. Lovelace, Nowosad &amp; Muenchow (2019) Geocomputation with R. Chapman &amp; Hall/CRC Biostatistics Series Mas et al. (2019) Análise espacial com R. Pebesma &amp; Bivand (2020) Spatial Data Science. Olaya (2020) Sistemas de Información Geográfica. Moraga, Paula (2019) Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny. Chapman &amp; Hall/CRC Biostatistics Series Brunsdon &amp; Comber (2019) An Introduction to Spatial Analysis and Mapping in R. 2nd edition. Mieno (2020) R as GIS for Economists. Gimond (2021) Intro to GIS and Spatial Analysis. Engel (2019) Using Spatial Data with R. Dorman (2021) Using R for Spatial Data Analysis Rowe, Arribas-Bel (2021) Spatial Modelling for Data Scientists Wegmann, Leutner &amp; Dech (2016) Remote Sensing and GIS for Ecologists: Using Open Source Software. Pelagic Publishing Ltd. Wegmann, Schwalb-Willmann &amp; Dech (2020) An Introduction to Spatial Data Analysis Remote Sensing and GIS with Open Source Software. Pelagic Publishing Ltd. Fletcher &amp; Fortin (2018) Spatial ecology and conservation modeling: Applications with R. Springer International Publishing. Lapaine, Miljenko, Usery, E. Lynn (2017) Choosing a Map Projection. Spring. Referências "],["referências-1.html", "Referências", " Referências "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
